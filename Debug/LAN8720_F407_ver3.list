
LAN8720_F407_ver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015028  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003804  080151b8  080151b8  000251b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080189bc  080189bc  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  080189bc  080189bc  000289bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080189c4  080189c4  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080189c4  080189c4  000289c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080189c8  080189c8  000289c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080189cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ac60  20000080  08018a4c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ace0  08018a4c  0003ace0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003dd1f  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000727a  00000000  00000000  0006ddcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e80  00000000  00000000  00075050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d08  00000000  00000000  00076ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031654  00000000  00000000  00078bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000283d2  00000000  00000000  000aa22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec38f  00000000  00000000  000d25fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001be98d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081e0  00000000  00000000  001bea08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080151a0 	.word	0x080151a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080151a0 	.word	0x080151a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800058e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	2000009c 	.word	0x2000009c
 80005a0:	200000f0 	.word	0x200000f0

080005a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <MX_FREERTOS_Init+0x30>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fbea 	bl	8003d9a <osThreadCreate>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <MX_FREERTOS_Init+0x34>)
 80005ca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bdb0      	pop	{r4, r5, r7, pc}
 80005d4:	080151c4 	.word	0x080151c4
 80005d8:	200043e0 	.word	0x200043e0

080005dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80005e4:	f002 fe32 	bl	800324c <MX_LWIP_Init>
  void *data;
  u16_t len;

  LWIP_UNUSED_ARG(argument);

  printf("before netconn_new\r\n");
 80005e8:	4836      	ldr	r0, [pc, #216]	; (80006c4 <StartDefaultTask+0xe8>)
 80005ea:	f013 fec9 	bl	8014380 <puts>
  conn = netconn_new(NETCONN_TCP); //new tcp netconn
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2010      	movs	r0, #16
 80005f4:	f006 fb48 	bl	8006c88 <netconn_new_with_proto_and_callback>
 80005f8:	61f8      	str	r0, [r7, #28]

  if (conn != NULL){
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d05d      	beq.n	80006bc <StartDefaultTask+0xe0>

	  err = netconn_bind(conn, NULL, 80); //bind to port 80
 8000600:	2250      	movs	r2, #80	; 0x50
 8000602:	2100      	movs	r1, #0
 8000604:	69f8      	ldr	r0, [r7, #28]
 8000606:	f006 fbf9 	bl	8006dfc <netconn_bind>
 800060a:	4603      	mov	r3, r0
 800060c:	76fb      	strb	r3, [r7, #27]

	  if (err == ERR_OK){
 800060e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d14e      	bne.n	80006b4 <StartDefaultTask+0xd8>

		  netconn_listen(conn); //listen at port 80
 8000616:	21ff      	movs	r1, #255	; 0xff
 8000618:	69f8      	ldr	r0, [r7, #28]
 800061a:	f006 fc27 	bl	8006e6c <netconn_listen_with_backlog>

		  /* Infinite loop */
		  for(;;){

			  printf("before netconn_accept\r\n");
 800061e:	482a      	ldr	r0, [pc, #168]	; (80006c8 <StartDefaultTask+0xec>)
 8000620:	f013 feae 	bl	8014380 <puts>
			  accept_err = netconn_accept(conn, &newconn); //accept new connection
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	69f8      	ldr	r0, [r7, #28]
 800062c:	f006 fc4a 	bl	8006ec4 <netconn_accept>
 8000630:	4603      	mov	r3, r0
 8000632:	76bb      	strb	r3, [r7, #26]

			  if (accept_err == ERR_OK){ //accept ok
 8000634:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1f0      	bne.n	800061e <StartDefaultTask+0x42>

				  printf("before netconn_recv\r\n");
 800063c:	4823      	ldr	r0, [pc, #140]	; (80006cc <StartDefaultTask+0xf0>)
 800063e:	f013 fe9f 	bl	8014380 <puts>
				while (netconn_recv(newconn, &buf) == ERR_OK){ //receive data
 8000642:	e024      	b.n	800068e <StartDefaultTask+0xb2>
				  printf("after netconn_recv\r\n");
 8000644:	4822      	ldr	r0, [pc, #136]	; (80006d0 <StartDefaultTask+0xf4>)
 8000646:	f013 fe9b 	bl	8014380 <puts>

				  do{

					  netbuf_data(buf, &data, &len); //receive data pointer & length
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	f107 020a 	add.w	r2, r7, #10
 8000650:	f107 010c 	add.w	r1, r7, #12
 8000654:	4618      	mov	r0, r3
 8000656:	f008 fbd1 	bl	8008dfc <netbuf_data>
					  printf("before netconn_write\r\n");
 800065a:	481e      	ldr	r0, [pc, #120]	; (80006d4 <StartDefaultTask+0xf8>)
 800065c:	f013 fe90 	bl	8014380 <puts>
					  netconn_write(newconn, data, len, NETCONN_COPY); //echo back to the client
 8000660:	6978      	ldr	r0, [r7, #20]
 8000662:	68f9      	ldr	r1, [r7, #12]
 8000664:	897b      	ldrh	r3, [r7, #10]
 8000666:	461a      	mov	r2, r3
 8000668:	2300      	movs	r3, #0
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2301      	movs	r3, #1
 800066e:	f006 feab 	bl	80073c8 <netconn_write_partly>
					  printf("after netconn_write\r\n");
 8000672:	4819      	ldr	r0, [pc, #100]	; (80006d8 <StartDefaultTask+0xfc>)
 8000674:	f013 fe84 	bl	8014380 <puts>
				  } while (netbuf_next(buf) >= 0); //check buffer empty
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	4618      	mov	r0, r3
 800067c:	f008 fc08 	bl	8008e90 <netbuf_next>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	dae1      	bge.n	800064a <StartDefaultTask+0x6e>

				  netbuf_delete(buf); //clear buffer
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	4618      	mov	r0, r3
 800068a:	f008 fb97 	bl	8008dbc <netbuf_delete>
				while (netconn_recv(newconn, &buf) == ERR_OK){ //receive data
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	f107 0210 	add.w	r2, r7, #16
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fe1c 	bl	80072d4 <netconn_recv>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0d0      	beq.n	8000644 <StartDefaultTask+0x68>
				}
				netconn_close(newconn); //close session
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f006 ff91 	bl	80075cc <netconn_close>
				netconn_delete(newconn); //free memory
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f006 fb89 	bl	8006dc4 <netconn_delete>
			  printf("before netconn_accept\r\n");
 80006b2:	e7b4      	b.n	800061e <StartDefaultTask+0x42>
			  }
		  }
	  } else {
		netconn_delete(newconn); //free memory
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 fb84 	bl	8006dc4 <netconn_delete>
	  }
  }

  /* USER CODE END StartDefaultTask */
}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	080151e0 	.word	0x080151e0
 80006c8:	080151f4 	.word	0x080151f4
 80006cc:	0801520c 	.word	0x0801520c
 80006d0:	08015224 	.word	0x08015224
 80006d4:	08015238 	.word	0x08015238
 80006d8:	08015250 	.word	0x08015250

080006dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_GPIO_Init+0x84>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <MX_GPIO_Init+0x84>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_GPIO_Init+0x84>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_GPIO_Init+0x84>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a16      	ldr	r2, [pc, #88]	; (8000760 <MX_GPIO_Init+0x84>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_GPIO_Init+0x84>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_GPIO_Init+0x84>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <MX_GPIO_Init+0x84>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_GPIO_Init+0x84>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_GPIO_Init+0x84>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <MX_GPIO_Init+0x84>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_GPIO_Init+0x84>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000768:	f000 f940 	bl	80009ec <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fa2a 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f808 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f7ff ffb2 	bl	80006dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000778:	f7ff ff14 	bl	80005a4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800077c:	f003 faf6 	bl	8003d6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000780:	e7fe      	b.n	8000780 <main+0x1c>
	...

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f013 fd78 	bl	8014288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a27      	ldr	r2, [pc, #156]	; (8000850 <SystemClock_Config+0xcc>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a21      	ldr	r2, [pc, #132]	; (8000854 <SystemClock_Config+0xd0>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <SystemClock_Config+0xd0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e0:	2301      	movs	r3, #1
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007f8:	23a8      	movs	r3, #168	; 0xa8
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fe61 	bl	80024d0 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000814:	f000 f832 	bl	800087c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000824:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2105      	movs	r1, #5
 8000836:	4618      	mov	r0, r3
 8000838:	f002 f8ba 	bl	80029b0 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000842:	f000 f81b 	bl	800087c <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	; 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d101      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086a:	f000 f9cd 	bl	8000c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40010000 	.word	0x40010000

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	2019      	movs	r0, #25
 80008f2:	f000 fa83 	bl	8000dfc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008f6:	2019      	movs	r0, #25
 80008f8:	f000 fa9c 	bl	8000e34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <HAL_InitTick+0xa4>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000904:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <HAL_InitTick+0xa4>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6453      	str	r3, [r2, #68]	; 0x44
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_InitTick+0xa4>)
 800090e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000918:	f107 0210 	add.w	r2, r7, #16
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fa22 	bl	8002d6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000928:	f002 fa0c 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 800092c:	4603      	mov	r3, r0
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <HAL_InitTick+0xa8>)
 8000936:	fba2 2303 	umull	r2, r3, r2, r3
 800093a:	0c9b      	lsrs	r3, r3, #18
 800093c:	3b01      	subs	r3, #1
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_InitTick+0xac>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <HAL_InitTick+0xb0>)
 8000944:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_InitTick+0xac>)
 8000948:	f240 32e7 	movw	r2, #999	; 0x3e7
 800094c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_InitTick+0xac>)
 8000950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000952:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_InitTick+0xac>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <HAL_InitTick+0xac>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <HAL_InitTick+0xac>)
 8000962:	f002 fa35 	bl	8002dd0 <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d104      	bne.n	8000976 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <HAL_InitTick+0xac>)
 800096e:	f002 fa64 	bl	8002e3a <HAL_TIM_Base_Start_IT>
 8000972:	4603      	mov	r3, r0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3730      	adds	r7, #48	; 0x30
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	431bde83 	.word	0x431bde83
 8000988:	200043e4 	.word	0x200043e4
 800098c:	40010000 	.word	0x40010000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009ca:	f002 fa5a 	bl	8002e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200043e4 	.word	0x200043e4

080009d8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <ETH_IRQHandler+0x10>)
 80009de:	f000 fe1d 	bl	800161c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20005d4c 	.word	0x20005d4c

080009ec <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e00a      	b.n	8000a22 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a0c:	f3af 8000 	nop.w
 8000a10:	4601      	mov	r1, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	60ba      	str	r2, [r7, #8]
 8000a18:	b2ca      	uxtb	r2, r1
 8000a1a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dbf0      	blt.n	8000a0c <_read+0x12>
	}

return len;
 8000a2a:	687b      	ldr	r3, [r7, #4]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e009      	b.n	8000a5a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	60ba      	str	r2, [r7, #8]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3301      	adds	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	dbf1      	blt.n	8000a46 <_write+0x12>
	}
	return len;
 8000a62:	687b      	ldr	r3, [r7, #4]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_close>:

int _close(int file)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	return -1;
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a94:	605a      	str	r2, [r3, #4]
	return 0;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_isatty>:

int _isatty(int file)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	return 1;
 8000aac:	2301      	movs	r3, #1
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
	return 0;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d205      	bcs.n	8000b10 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <_sbrk+0x6c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	20020000 	.word	0x20020000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	200004f0 	.word	0x200004f0
 8000b3c:	2000ace0 	.word	0x2000ace0
 8000b40:	2000acd8 	.word	0x2000acd8

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <SystemInit+0x28>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <SystemInit+0x28>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SystemInit+0x28>)
 8000b5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b76:	e003      	b.n	8000b80 <LoopCopyDataInit>

08000b78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b7e:	3104      	adds	r1, #4

08000b80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b88:	d3f6      	bcc.n	8000b78 <CopyDataInit>
  ldr  r2, =_sbss
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b8c:	e002      	b.n	8000b94 <LoopFillZerobss>

08000b8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b90:	f842 3b04 	str.w	r3, [r2], #4

08000b94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b98:	d3f9      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b9a:	f7ff ffd3 	bl	8000b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f013 fb35 	bl	801420c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fddf 	bl	8000764 <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bac:	080189cc 	.word	0x080189cc
  ldr  r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bb4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000bb8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000bbc:	2000ace0 	.word	0x2000ace0

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_Init+0x40>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_Init+0x40>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x40>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f8fa 	bl	8000de6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fe72 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe48 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20004424 	.word	0x20004424

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20004424 	.word	0x20004424

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff ffee 	bl	8000c30 <HAL_GetTick>
 8000c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_Delay+0x40>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c6e:	bf00      	nop
 8000c70:	f7ff ffde 	bl	8000c30 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000008 	.word	0x20000008

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4907      	ldr	r1, [pc, #28]	; (8000d28 <__NVIC_EnableIRQ+0x38>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff4c 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0e:	f7ff ff61 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	6978      	ldr	r0, [r7, #20]
 8000e1a:	f7ff ffb1 	bl	8000d80 <NVIC_EncodePriority>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff80 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff54 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000e60:	4baa      	ldr	r3, [pc, #680]	; (800110c <HAL_ETH_Init+0x2bc>)
 8000e62:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e185      	b.n	8001182 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d106      	bne.n	8000e90 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f002 fb3c 	bl	8003508 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b9e      	ldr	r3, [pc, #632]	; (8001110 <HAL_ETH_Init+0x2c0>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	4a9d      	ldr	r2, [pc, #628]	; (8001110 <HAL_ETH_Init+0x2c0>)
 8000e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea0:	4b9b      	ldr	r3, [pc, #620]	; (8001110 <HAL_ETH_Init+0x2c0>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000eac:	4b99      	ldr	r3, [pc, #612]	; (8001114 <HAL_ETH_Init+0x2c4>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	4a98      	ldr	r2, [pc, #608]	; (8001114 <HAL_ETH_Init+0x2c4>)
 8000eb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000eb6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000eb8:	4b96      	ldr	r3, [pc, #600]	; (8001114 <HAL_ETH_Init+0x2c4>)
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4994      	ldr	r1, [pc, #592]	; (8001114 <HAL_ETH_Init+0x2c4>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 0201 	orr.w	r2, r2, #1
 8000ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000edc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000ede:	f7ff fea7 	bl	8000c30 <HAL_GetTick>
 8000ee2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000ee4:	e011      	b.n	8000f0a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000ee6:	f7ff fea3 	bl	8000c30 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ef4:	d909      	bls.n	8000f0a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2203      	movs	r2, #3
 8000efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e13b      	b.n	8001182 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1e4      	bne.n	8000ee6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f023 031c 	bic.w	r3, r3, #28
 8000f2a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000f2c:	f001 fefe 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 8000f30:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	4a78      	ldr	r2, [pc, #480]	; (8001118 <HAL_ETH_Init+0x2c8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d908      	bls.n	8000f4c <HAL_ETH_Init+0xfc>
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	4a77      	ldr	r2, [pc, #476]	; (800111c <HAL_ETH_Init+0x2cc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d804      	bhi.n	8000f4c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e027      	b.n	8000f9c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	4a73      	ldr	r2, [pc, #460]	; (800111c <HAL_ETH_Init+0x2cc>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d908      	bls.n	8000f66 <HAL_ETH_Init+0x116>
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	4a72      	ldr	r2, [pc, #456]	; (8001120 <HAL_ETH_Init+0x2d0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d804      	bhi.n	8000f66 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f043 030c 	orr.w	r3, r3, #12
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	e01a      	b.n	8000f9c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	4a6d      	ldr	r2, [pc, #436]	; (8001120 <HAL_ETH_Init+0x2d0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d903      	bls.n	8000f76 <HAL_ETH_Init+0x126>
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4a6c      	ldr	r2, [pc, #432]	; (8001124 <HAL_ETH_Init+0x2d4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d911      	bls.n	8000f9a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4a6a      	ldr	r2, [pc, #424]	; (8001124 <HAL_ETH_Init+0x2d4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d908      	bls.n	8000f90 <HAL_ETH_Init+0x140>
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4a69      	ldr	r2, [pc, #420]	; (8001128 <HAL_ETH_Init+0x2d8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d804      	bhi.n	8000f90 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	e005      	b.n	8000f9c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	e000      	b.n	8000f9c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000f9a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000fa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fc19 	bl	80017e2 <HAL_ETH_WritePHYRegister>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 fdcf 	bl	8001b60 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0d9      	b.n	8001182 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000fce:	20ff      	movs	r0, #255	; 0xff
 8000fd0:	f7ff fe3a 	bl	8000c48 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80a7 	beq.w	800112c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000fde:	f7ff fe27 	bl	8000c30 <HAL_GetTick>
 8000fe2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2101      	movs	r1, #1
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 fb90 	bl	8001712 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000ff2:	f7ff fe1d 	bl	8000c30 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001000:	4293      	cmp	r3, r2
 8001002:	d90f      	bls.n	8001024 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001008:	6939      	ldr	r1, [r7, #16]
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 fda8 	bl	8001b60 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e0ae      	b.n	8001182 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0da      	beq.n	8000fe4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800102e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001032:	2100      	movs	r1, #0
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 fbd4 	bl	80017e2 <HAL_ETH_WritePHYRegister>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00b      	beq.n	8001058 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001044:	6939      	ldr	r1, [r7, #16]
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fd8a 	bl	8001b60 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001054:	2301      	movs	r3, #1
 8001056:	e094      	b.n	8001182 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001058:	f7ff fdea 	bl	8000c30 <HAL_GetTick>
 800105c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	461a      	mov	r2, r3
 8001064:	2101      	movs	r1, #1
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fb53 	bl	8001712 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800106c:	f7ff fde0 	bl	8000c30 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	f241 3288 	movw	r2, #5000	; 0x1388
 800107a:	4293      	cmp	r3, r2
 800107c:	d90f      	bls.n	800109e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001082:	6939      	ldr	r1, [r7, #16]
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 fd6b 	bl	8001b60 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e071      	b.n	8001182 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0da      	beq.n	800105e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	461a      	mov	r2, r3
 80010ae:	211f      	movs	r1, #31
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 fb2e 	bl	8001712 <HAL_ETH_ReadPHYRegister>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00b      	beq.n	80010d4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010c0:	6939      	ldr	r1, [r7, #16]
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fd4c 	bl	8001b60 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80010d0:	2301      	movs	r3, #1
 80010d2:	e056      	b.n	8001182 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	e002      	b.n	80010ee <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	e037      	b.n	8001170 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	e032      	b.n	8001170 <HAL_ETH_Init+0x320>
 800110a:	bf00      	nop
 800110c:	03938700 	.word	0x03938700
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	01312cff 	.word	0x01312cff
 800111c:	02160ebf 	.word	0x02160ebf
 8001120:	039386ff 	.word	0x039386ff
 8001124:	05f5e0ff 	.word	0x05f5e0ff
 8001128:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	085b      	lsrs	r3, r3, #1
 800113a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800113c:	4313      	orrs	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 fb4c 	bl	80017e2 <HAL_ETH_WritePHYRegister>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00b      	beq.n	8001168 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001154:	6939      	ldr	r1, [r7, #16]
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 fd02 	bl	8001b60 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e00c      	b.n	8001182 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001168:	f640 70ff 	movw	r0, #4095	; 0xfff
 800116c:	f7ff fd6c 	bl	8000c48 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001170:	6939      	ldr	r1, [r7, #16]
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fcf4 	bl	8001b60 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop

0800118c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_ETH_DMATxDescListInit+0x20>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e052      	b.n	8001252 <HAL_ETH_DMATxDescListInit+0xc6>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2202      	movs	r2, #2
 80011b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e030      	b.n	800122a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	015b      	lsls	r3, r3, #5
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	4413      	add	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011d8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d105      	bne.n	8001202 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	d208      	bcs.n	800121e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	015b      	lsls	r3, r3, #5
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	4413      	add	r3, r2
 8001216:	461a      	mov	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	e002      	b.n	8001224 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d3ca      	bcc.n	80011c8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800123c:	3310      	adds	r3, #16
 800123e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800125e:	b480      	push	{r7}
 8001260:	b087      	sub	sp, #28
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_ETH_DMARxDescListInit+0x20>
 800127a:	2302      	movs	r3, #2
 800127c:	e056      	b.n	800132c <HAL_ETH_DMARxDescListInit+0xce>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2202      	movs	r2, #2
 800128a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e034      	b.n	8001304 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	4413      	add	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012aa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80012b2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	461a      	mov	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d105      	bne.n	80012dc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	3b01      	subs	r3, #1
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d208      	bcs.n	80012f8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	4413      	add	r3, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	e002      	b.n	80012fe <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3c6      	bcc.n	800129a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001316:	330c      	adds	r3, #12
 8001318:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_ETH_TransmitFrame+0x24>
 8001358:	2302      	movs	r3, #2
 800135a:	e0cd      	b.n	80014f8 <HAL_ETH_TransmitFrame+0x1c0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001382:	2301      	movs	r3, #1
 8001384:	e0b8      	b.n	80014f8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	da09      	bge.n	80013a4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2212      	movs	r2, #18
 8001394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0a9      	b.n	80014f8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d915      	bls.n	80013da <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	4a54      	ldr	r2, [pc, #336]	; (8001504 <HAL_ETH_TransmitFrame+0x1cc>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0a9b      	lsrs	r3, r3, #10
 80013b8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	4b51      	ldr	r3, [pc, #324]	; (8001504 <HAL_ETH_TransmitFrame+0x1cc>)
 80013be:	fba3 1302 	umull	r1, r3, r3, r2
 80013c2:	0a9b      	lsrs	r3, r3, #10
 80013c4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80013c8:	fb01 f303 	mul.w	r3, r1, r3
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e001      	b.n	80013de <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80013da:	2301      	movs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d11c      	bne.n	800141e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80013f2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80013fe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800140e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
 800141c:	e04b      	b.n	80014b6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	e044      	b.n	80014ae <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001432:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d107      	bne.n	800144a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001448:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001452:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3b01      	subs	r3, #1
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	429a      	cmp	r2, r3
 800145c:	d116      	bne.n	800148c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800146c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_ETH_TransmitFrame+0x1d0>)
 8001472:	fb02 f203 	mul.w	r2, r2, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800147e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800148a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001496:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800149a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	3301      	adds	r3, #1
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3b6      	bcc.n	8001424 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014be:	3314      	adds	r3, #20
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00d      	beq.n	80014e6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d2:	3314      	adds	r3, #20
 80014d4:	2204      	movs	r2, #4
 80014d6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e0:	3304      	adds	r3, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	ac02b00b 	.word	0xac02b00b
 8001508:	fffffa0c 	.word	0xfffffa0c

0800150c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001522:	2302      	movs	r3, #2
 8001524:	e074      	b.n	8001610 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2202      	movs	r2, #2
 8001532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001536:	e05a      	b.n	80015ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800154c:	d10d      	bne.n	800156a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	461a      	mov	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
 8001568:	e041      	b.n	80015ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10b      	bne.n	8001590 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	461a      	mov	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
 800158e:	e02e      	b.n	80015ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d103      	bne.n	80015b2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0c1b      	lsrs	r3, r3, #16
 80015ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80015be:	1f1a      	subs	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e010      	b.n	8001610 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db02      	blt.n	80015fe <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d99c      	bls.n	8001538 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162c:	3314      	adds	r3, #20
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001634:	2b40      	cmp	r3, #64	; 0x40
 8001636:	d112      	bne.n	800165e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f002 f813 	bl	8003664 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001646:	3314      	adds	r3, #20
 8001648:	2240      	movs	r2, #64	; 0x40
 800164a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800165c:	e01b      	b.n	8001696 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001666:	3314      	adds	r3, #20
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d111      	bne.n	8001696 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f839 	bl	80016ea <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	3314      	adds	r3, #20
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169e:	3314      	adds	r3, #20
 80016a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016a4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ae:	3314      	adds	r3, #20
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ba:	d112      	bne.n	80016e2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f81e 	bl	80016fe <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ca:	3314      	adds	r3, #20
 80016cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	460b      	mov	r3, r1
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b82      	cmp	r3, #130	; 0x82
 8001732:	d101      	bne.n	8001738 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001734:	2302      	movs	r3, #2
 8001736:	e050      	b.n	80017da <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2282      	movs	r2, #130	; 0x82
 800173c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 031c 	and.w	r3, r3, #28
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8a1b      	ldrh	r3, [r3, #16]
 8001754:	02db      	lsls	r3, r3, #11
 8001756:	b29b      	uxth	r3, r3
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	4313      	orrs	r3, r2
 800175c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800175e:	897b      	ldrh	r3, [r7, #10]
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f023 0302 	bic.w	r3, r3, #2
 8001772:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001784:	f7ff fa54 	bl	8000c30 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800178a:	e015      	b.n	80017b8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800178c:	f7ff fa50 	bl	8000c30 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179a:	d309      	bcc.n	80017b0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e014      	b.n	80017da <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1e4      	bne.n	800178c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	460b      	mov	r3, r1
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b42      	cmp	r3, #66	; 0x42
 8001802:	d101      	bne.n	8001808 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001804:	2302      	movs	r3, #2
 8001806:	e04e      	b.n	80018a6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2242      	movs	r2, #66	; 0x42
 800180c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 031c 	and.w	r3, r3, #28
 800181e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8a1b      	ldrh	r3, [r3, #16]
 8001824:	02db      	lsls	r3, r3, #11
 8001826:	b29b      	uxth	r3, r3
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4313      	orrs	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800182e:	897b      	ldrh	r3, [r7, #10]
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800185e:	f7ff f9e7 	bl	8000c30 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001864:	e015      	b.n	8001892 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001866:	f7ff f9e3 	bl	8000c30 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d309      	bcc.n	800188a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e00d      	b.n	80018a6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e4      	bne.n	8001866 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_ETH_Start+0x16>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e01f      	b.n	8001904 <HAL_ETH_Start+0x56>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fb45 	bl	8001f64 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fb7c 	bl	8001fd8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fc13 	bl	800210c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fbb0 	bl	800204c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fbdd 	bl	80020ac <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_ETH_Stop+0x16>
 800191e:	2302      	movs	r3, #2
 8001920:	e01f      	b.n	8001962 <HAL_ETH_Stop+0x56>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fba2 	bl	800207c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fbcf 	bl	80020dc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fb67 	bl	8002012 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fbe1 	bl	800210c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fb27 	bl	8001f9e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_ETH_ConfigMAC+0x1c>
 8001984:	2302      	movs	r3, #2
 8001986:	e0e4      	b.n	8001b52 <HAL_ETH_ConfigMAC+0x1e6>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80b1 	beq.w	8001b02 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <HAL_ETH_ConfigMAC+0x1f0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80019b8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80019be:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80019c4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80019ca:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80019d0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80019d6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80019dc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80019e2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80019e8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80019ee:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80019f4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80019fa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff f918 	bl	8000c48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a28:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001a2e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001a34:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001a3a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001a40:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001a46:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001a52:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a54:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff f8f2 	bl	8000c48 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a74:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a7e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a8e:	4013      	ands	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a96:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001a9c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001aa2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001aa8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001aae:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001ab4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff f8bb 	bl	8000c48 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff f8a8 	bl	8000c48 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	61da      	str	r2, [r3, #28]
 8001b00:	e01e      	b.n	8001b40 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b10:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7ff f888 	bl	8000c48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	ff20810f 	.word	0xff20810f

08001b60 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0b0      	sub	sp, #192	; 0xc0
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b7c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b84:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d103      	bne.n	8001bae <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001baa:	663b      	str	r3, [r7, #96]	; 0x60
 8001bac:	e001      	b.n	8001bb2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001bcc:	2340      	movs	r3, #64	; 0x40
 8001bce:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c38:	4bac      	ldr	r3, [pc, #688]	; (8001eec <ETH_MACDMAConfig+0x38c>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c44:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001c48:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001c4c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001c52:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001c56:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001c5a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001c60:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001c64:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001c68:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001c6c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001c70:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001c74:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c88:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7fe ffd7 	bl	8000c48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ca2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ca4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ca8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001cac:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001cae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001cb2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001cb8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001cbe:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001cc4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001cc8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001cd0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001cd2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7fe ffb2 	bl	8000c48 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cec:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001cf6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d00:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d10:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d14:	4013      	ands	r3, r2
 8001d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001d1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d1e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001d20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001d24:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001d26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001d2a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001d30:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001d36:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001d38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001d3c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001d3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d50:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f7fe ff73 	bl	8000c48 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d6a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d6c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001d70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f7fe ff5e 	bl	8000c48 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d94:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001da4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001da8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001dde:	2300      	movs	r3, #0
 8001de0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dea:	3318      	adds	r3, #24
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001df2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df6:	4b3e      	ldr	r3, [pc, #248]	; (8001ef0 <ETH_MACDMAConfig+0x390>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dfe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001e00:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e02:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001e04:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001e06:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001e08:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001e0a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001e0c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001e0e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001e10:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001e12:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001e14:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001e16:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001e1a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001e1e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e32:	3318      	adds	r3, #24
 8001e34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e38:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e42:	3318      	adds	r3, #24
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7fe fefc 	bl	8000c48 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	3318      	adds	r3, #24
 8001e5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e5e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e64:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001e68:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e6c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001e70:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e74:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001e76:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e7a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e88:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f7fe fed5 	bl	8000c48 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eaa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d10f      	bne.n	8001ed4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebc:	331c      	adds	r3, #28
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed0:	331c      	adds	r3, #28
 8001ed2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2100      	movs	r1, #0
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f809 	bl	8001ef4 <ETH_MACAddressConfig>
}
 8001ee2:	bf00      	nop
 8001ee4:	37c0      	adds	r7, #192	; 0xc0
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	ff20810f 	.word	0xff20810f
 8001ef0:	f8de3f23 	.word	0xf8de3f23

08001ef4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3305      	adds	r3, #5
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	3204      	adds	r2, #4
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <ETH_MACAddressConfig+0x68>)
 8001f16:	4413      	add	r3, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3303      	adds	r3, #3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	061a      	lsls	r2, r3, #24
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3301      	adds	r3, #1
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <ETH_MACAddressConfig+0x6c>)
 8001f46:	4413      	add	r3, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	6013      	str	r3, [r2, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40028040 	.word	0x40028040
 8001f60:	40028044 	.word	0x40028044

08001f64 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0208 	orr.w	r2, r2, #8
 8001f7e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f000 f8e9 	bl	8002160 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0208 	bic.w	r2, r2, #8
 8001fb8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f000 f8cc 	bl	8002160 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	601a      	str	r2, [r3, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0204 	orr.w	r2, r2, #4
 8001ff2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f000 f8af 	bl	8002160 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0204 	bic.w	r2, r2, #4
 800202c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002036:	2001      	movs	r0, #1
 8002038:	f000 f892 	bl	8002160 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205c:	3318      	adds	r3, #24
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206c:	3318      	adds	r3, #24
 800206e:	601a      	str	r2, [r3, #0]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208c:	3318      	adds	r3, #24
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209c:	3318      	adds	r3, #24
 800209e:	601a      	str	r2, [r3, #0]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020bc:	3318      	adds	r3, #24
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0202 	orr.w	r2, r2, #2
 80020c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020cc:	3318      	adds	r3, #24
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ec:	3318      	adds	r3, #24
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0202 	bic.w	r2, r2, #2
 80020f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fc:	3318      	adds	r3, #24
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002120:	3318      	adds	r3, #24
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800212c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002130:	3318      	adds	r3, #24
 8002132:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213c:	3318      	adds	r3, #24
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002142:	2001      	movs	r0, #1
 8002144:	f000 f80c 	bl	8002160 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002152:	3318      	adds	r3, #24
 8002154:	601a      	str	r2, [r3, #0]
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <ETH_Delay+0x34>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <ETH_Delay+0x38>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0a5b      	lsrs	r3, r3, #9
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800217c:	bf00      	nop
  } 
  while (Delay --);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1e5a      	subs	r2, r3, #1
 8002182:	60fa      	str	r2, [r7, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f9      	bne.n	800217c <ETH_Delay+0x1c>
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	20000000 	.word	0x20000000
 8002198:	10624dd3 	.word	0x10624dd3

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e16b      	b.n	8002490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 815a 	bne.w	800248a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d00b      	beq.n	80021f6 <HAL_GPIO_Init+0x5a>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ea:	2b11      	cmp	r3, #17
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b12      	cmp	r3, #18
 80021f4:	d130      	bne.n	8002258 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800222c:	2201      	movs	r2, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 0201 	and.w	r2, r3, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0xfc>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b12      	cmp	r3, #18
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80b4 	beq.w	800248a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <HAL_GPIO_Init+0x308>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a5e      	ldr	r2, [pc, #376]	; (80024a4 <HAL_GPIO_Init+0x308>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <HAL_GPIO_Init+0x308>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_GPIO_Init+0x30c>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a51      	ldr	r2, [pc, #324]	; (80024ac <HAL_GPIO_Init+0x310>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02b      	beq.n	80023c2 <HAL_GPIO_Init+0x226>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a50      	ldr	r2, [pc, #320]	; (80024b0 <HAL_GPIO_Init+0x314>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d025      	beq.n	80023be <HAL_GPIO_Init+0x222>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4f      	ldr	r2, [pc, #316]	; (80024b4 <HAL_GPIO_Init+0x318>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01f      	beq.n	80023ba <HAL_GPIO_Init+0x21e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4e      	ldr	r2, [pc, #312]	; (80024b8 <HAL_GPIO_Init+0x31c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x21a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4d      	ldr	r2, [pc, #308]	; (80024bc <HAL_GPIO_Init+0x320>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x216>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4c      	ldr	r2, [pc, #304]	; (80024c0 <HAL_GPIO_Init+0x324>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x212>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <HAL_GPIO_Init+0x328>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x20e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4a      	ldr	r2, [pc, #296]	; (80024c8 <HAL_GPIO_Init+0x32c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x20a>
 80023a2:	2307      	movs	r3, #7
 80023a4:	e00e      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023a6:	2308      	movs	r3, #8
 80023a8:	e00c      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023aa:	2306      	movs	r3, #6
 80023ac:	e00a      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023ae:	2305      	movs	r3, #5
 80023b0:	e008      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023b2:	2304      	movs	r3, #4
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023c2:	2300      	movs	r3, #0
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d4:	4934      	ldr	r1, [pc, #208]	; (80024a8 <HAL_GPIO_Init+0x30c>)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_GPIO_Init+0x330>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002406:	4a31      	ldr	r2, [pc, #196]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800240c:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <HAL_GPIO_Init+0x330>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002430:	4a26      	ldr	r2, [pc, #152]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002436:	4b25      	ldr	r3, [pc, #148]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245a:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_GPIO_Init+0x330>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002484:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b0f      	cmp	r3, #15
 8002494:	f67f ae90 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002498:	bf00      	nop
 800249a:	3724      	adds	r7, #36	; 0x24
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40013800 	.word	0x40013800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40020800 	.word	0x40020800
 80024b8:	40020c00 	.word	0x40020c00
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40021400 	.word	0x40021400
 80024c4:	40021800 	.word	0x40021800
 80024c8:	40021c00 	.word	0x40021c00
 80024cc:	40013c00 	.word	0x40013c00

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e25b      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d075      	beq.n	80025da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ee:	4ba3      	ldr	r3, [pc, #652]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d00c      	beq.n	8002514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fa:	4ba0      	ldr	r3, [pc, #640]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002502:	2b08      	cmp	r3, #8
 8002504:	d112      	bne.n	800252c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b9d      	ldr	r3, [pc, #628]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002512:	d10b      	bne.n	800252c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	4b99      	ldr	r3, [pc, #612]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d05b      	beq.n	80025d8 <HAL_RCC_OscConfig+0x108>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d157      	bne.n	80025d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e236      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x74>
 8002536:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a90      	ldr	r2, [pc, #576]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xb0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x98>
 800254e:	4b8b      	ldr	r3, [pc, #556]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a8a      	ldr	r2, [pc, #552]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a87      	ldr	r2, [pc, #540]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xb0>
 8002568:	4b84      	ldr	r3, [pc, #528]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a83      	ldr	r2, [pc, #524]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b81      	ldr	r3, [pc, #516]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a80      	ldr	r2, [pc, #512]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fb52 	bl	8000c30 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fb4e 	bl	8000c30 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1fb      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xc0>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fb3e 	bl	8000c30 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fb3a 	bl	8000c30 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1e7      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0xe8>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d063      	beq.n	80026ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e6:	4b65      	ldr	r3, [pc, #404]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f2:	4b62      	ldr	r3, [pc, #392]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d11c      	bne.n	8002638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b5f      	ldr	r3, [pc, #380]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d116      	bne.n	8002638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	4b5c      	ldr	r3, [pc, #368]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x152>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e1bb      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	4b56      	ldr	r3, [pc, #344]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4952      	ldr	r1, [pc, #328]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	e03a      	b.n	80026ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCC_OscConfig+0x2b0>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe faf3 	bl	8000c30 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe faef 	bl	8000c30 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e19c      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4940      	ldr	r1, [pc, #256]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCC_OscConfig+0x2b0>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fad2 	bl	8000c30 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe face 	bl	8000c30 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e17b      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d030      	beq.n	800271c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b30      	ldr	r3, [pc, #192]	; (8002784 <HAL_RCC_OscConfig+0x2b4>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe fab2 	bl	8000c30 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe faae 	bl	8000c30 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e15b      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x200>
 80026ee:	e015      	b.n	800271c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x2b4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7fe fa9b 	bl	8000c30 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fe:	f7fe fa97 	bl	8000c30 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e144      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a0 	beq.w	800286a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	4a0e      	ldr	r2, [pc, #56]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002748:	6413      	str	r3, [r2, #64]	; 0x40
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_OscConfig+0x2b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d121      	bne.n	80027aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_RCC_OscConfig+0x2b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <HAL_RCC_OscConfig+0x2b8>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002772:	f7fe fa5d 	bl	8000c30 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	e011      	b.n	800279e <HAL_RCC_OscConfig+0x2ce>
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	42470000 	.word	0x42470000
 8002784:	42470e80 	.word	0x42470e80
 8002788:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278c:	f7fe fa50 	bl	8000c30 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0fd      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <HAL_RCC_OscConfig+0x4d4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2f0>
 80027b2:	4b7d      	ldr	r3, [pc, #500]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a7c      	ldr	r2, [pc, #496]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	e01c      	b.n	80027fa <HAL_RCC_OscConfig+0x32a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x312>
 80027c8:	4b77      	ldr	r3, [pc, #476]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	4a76      	ldr	r2, [pc, #472]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
 80027d4:	4b74      	ldr	r3, [pc, #464]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a73      	ldr	r2, [pc, #460]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	e00b      	b.n	80027fa <HAL_RCC_OscConfig+0x32a>
 80027e2:	4b71      	ldr	r3, [pc, #452]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	4a70      	ldr	r2, [pc, #448]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6713      	str	r3, [r2, #112]	; 0x70
 80027ee:	4b6e      	ldr	r3, [pc, #440]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a6d      	ldr	r2, [pc, #436]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d015      	beq.n	800282e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fa15 	bl	8000c30 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe fa11 	bl	8000c30 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	; 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0bc      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ee      	beq.n	800280a <HAL_RCC_OscConfig+0x33a>
 800282c:	e014      	b.n	8002858 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe f9ff 	bl	8000c30 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe f9fb 	bl	8000c30 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0a6      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ee      	bne.n	8002836 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285e:	4b52      	ldr	r3, [pc, #328]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a51      	ldr	r2, [pc, #324]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8092 	beq.w	8002998 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002874:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d05c      	beq.n	800293a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d141      	bne.n	800290c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	4b48      	ldr	r3, [pc, #288]	; (80029ac <HAL_RCC_OscConfig+0x4dc>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fe f9cf 	bl	8000c30 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe f9cb 	bl	8000c30 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e078      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a8:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	019b      	lsls	r3, r3, #6
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	085b      	lsrs	r3, r3, #1
 80028cc:	3b01      	subs	r3, #1
 80028ce:	041b      	lsls	r3, r3, #16
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	061b      	lsls	r3, r3, #24
 80028d8:	4933      	ldr	r1, [pc, #204]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028de:	4b33      	ldr	r3, [pc, #204]	; (80029ac <HAL_RCC_OscConfig+0x4dc>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe f9a4 	bl	8000c30 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe f9a0 	bl	8000c30 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e04d      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x41c>
 800290a:	e045      	b.n	8002998 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290c:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_RCC_OscConfig+0x4dc>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe f98d 	bl	8000c30 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe f989 	bl	8000c30 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e036      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292c:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x44a>
 8002938:	e02e      	b.n	8002998 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e029      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_RCC_OscConfig+0x4d8>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	429a      	cmp	r2, r3
 8002958:	d11c      	bne.n	8002994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d115      	bne.n	8002994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800296e:	4013      	ands	r3, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002974:	4293      	cmp	r3, r2
 8002976:	d10d      	bne.n	8002994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d106      	bne.n	8002994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40007000 	.word	0x40007000
 80029a8:	40023800 	.word	0x40023800
 80029ac:	42470060 	.word	0x42470060

080029b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0cc      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d90c      	bls.n	80029ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0b8      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a52      	ldr	r2, [pc, #328]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	494d      	ldr	r1, [pc, #308]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d044      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d119      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e07f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e067      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8e:	4b37      	ldr	r3, [pc, #220]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4934      	ldr	r1, [pc, #208]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe f8c6 	bl	8000c30 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7fe f8c2 	bl	8000c30 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e04f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 020c 	and.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1eb      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d20c      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e032      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4916      	ldr	r1, [pc, #88]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	490e      	ldr	r1, [pc, #56]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b36:	f000 f821 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
 8002b4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fec0 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023c00 	.word	0x40023c00
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	080187dc 	.word	0x080187dc
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000004 	.word	0x20000004

08002b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b92:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d007      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x32>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x38>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 80b4 	bne.w	8002d10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba8:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002baa:	60bb      	str	r3, [r7, #8]
       break;
 8002bac:	e0b3      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bae:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002bb0:	60bb      	str	r3, [r7, #8]
      break;
 8002bb2:	e0b0      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb4:	4b5a      	ldr	r3, [pc, #360]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bbe:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d04a      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bca:	4b55      	ldr	r3, [pc, #340]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	099b      	lsrs	r3, r3, #6
 8002bd0:	f04f 0400 	mov.w	r4, #0
 8002bd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	ea03 0501 	and.w	r5, r3, r1
 8002be0:	ea04 0602 	and.w	r6, r4, r2
 8002be4:	4629      	mov	r1, r5
 8002be6:	4632      	mov	r2, r6
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	f04f 0400 	mov.w	r4, #0
 8002bf0:	0154      	lsls	r4, r2, #5
 8002bf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf6:	014b      	lsls	r3, r1, #5
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	1b49      	subs	r1, r1, r5
 8002bfe:	eb62 0206 	sbc.w	r2, r2, r6
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	0194      	lsls	r4, r2, #6
 8002c0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c10:	018b      	lsls	r3, r1, #6
 8002c12:	1a5b      	subs	r3, r3, r1
 8002c14:	eb64 0402 	sbc.w	r4, r4, r2
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	00e2      	lsls	r2, r4, #3
 8002c22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c26:	00d9      	lsls	r1, r3, #3
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4614      	mov	r4, r2
 8002c2c:	195b      	adds	r3, r3, r5
 8002c2e:	eb44 0406 	adc.w	r4, r4, r6
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	0262      	lsls	r2, r4, #9
 8002c3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c40:	0259      	lsls	r1, r3, #9
 8002c42:	460b      	mov	r3, r1
 8002c44:	4614      	mov	r4, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	4621      	mov	r1, r4
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f04f 0400 	mov.w	r4, #0
 8002c50:	461a      	mov	r2, r3
 8002c52:	4623      	mov	r3, r4
 8002c54:	f7fd fb0c 	bl	8000270 <__aeabi_uldivmod>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e049      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	f04f 0400 	mov.w	r4, #0
 8002c6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	ea03 0501 	and.w	r5, r3, r1
 8002c76:	ea04 0602 	and.w	r6, r4, r2
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	4632      	mov	r2, r6
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	f04f 0400 	mov.w	r4, #0
 8002c86:	0154      	lsls	r4, r2, #5
 8002c88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c8c:	014b      	lsls	r3, r1, #5
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4622      	mov	r2, r4
 8002c92:	1b49      	subs	r1, r1, r5
 8002c94:	eb62 0206 	sbc.w	r2, r2, r6
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	f04f 0400 	mov.w	r4, #0
 8002ca0:	0194      	lsls	r4, r2, #6
 8002ca2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ca6:	018b      	lsls	r3, r1, #6
 8002ca8:	1a5b      	subs	r3, r3, r1
 8002caa:	eb64 0402 	sbc.w	r4, r4, r2
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	00e2      	lsls	r2, r4, #3
 8002cb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cbc:	00d9      	lsls	r1, r3, #3
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	195b      	adds	r3, r3, r5
 8002cc4:	eb44 0406 	adc.w	r4, r4, r6
 8002cc8:	f04f 0100 	mov.w	r1, #0
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	02a2      	lsls	r2, r4, #10
 8002cd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cd6:	0299      	lsls	r1, r3, #10
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4614      	mov	r4, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	4621      	mov	r1, r4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f04f 0400 	mov.w	r4, #0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4623      	mov	r3, r4
 8002cea:	f7fd fac1 	bl	8000270 <__aeabi_uldivmod>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	60bb      	str	r3, [r7, #8]
      break;
 8002d0e:	e002      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d12:	60bb      	str	r3, [r7, #8]
      break;
 8002d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d16:	68bb      	ldr	r3, [r7, #8]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d20:	40023800 	.word	0x40023800
 8002d24:	00f42400 	.word	0x00f42400
 8002d28:	007a1200 	.word	0x007a1200

08002d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000000 	.word	0x20000000

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d48:	f7ff fff0 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 8002d4c:	4601      	mov	r1, r0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0b5b      	lsrs	r3, r3, #13
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5a:	5cd3      	ldrb	r3, [r2, r3]
 8002d5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	080187ec 	.word	0x080187ec

08002d6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	220f      	movs	r2, #15
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	08db      	lsrs	r3, r3, #3
 8002da6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_RCC_GetClockConfig+0x60>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 020f 	and.w	r2, r3, #15
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	601a      	str	r2, [r3, #0]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40023c00 	.word	0x40023c00

08002dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e01d      	b.n	8002e1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f815 	bl	8002e26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f000 f968 	bl	80030e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d007      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d122      	bne.n	8002ede <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d11b      	bne.n	8002ede <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0202 	mvn.w	r2, #2
 8002eae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8ee 	bl	80030a6 <HAL_TIM_IC_CaptureCallback>
 8002eca:	e005      	b.n	8002ed8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f8e0 	bl	8003092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f8f1 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d122      	bne.n	8002f32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d11b      	bne.n	8002f32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f06f 0204 	mvn.w	r2, #4
 8002f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f8c4 	bl	80030a6 <HAL_TIM_IC_CaptureCallback>
 8002f1e:	e005      	b.n	8002f2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f8b6 	bl	8003092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8c7 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d122      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d11b      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0208 	mvn.w	r2, #8
 8002f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f89a 	bl	80030a6 <HAL_TIM_IC_CaptureCallback>
 8002f72:	e005      	b.n	8002f80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f88c 	bl	8003092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f89d 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d122      	bne.n	8002fda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d11b      	bne.n	8002fda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f06f 0210 	mvn.w	r2, #16
 8002faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2208      	movs	r2, #8
 8002fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f870 	bl	80030a6 <HAL_TIM_IC_CaptureCallback>
 8002fc6:	e005      	b.n	8002fd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f862 	bl	8003092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f873 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10e      	bne.n	8003006 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0201 	mvn.w	r2, #1
 8002ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7fd fc29 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d10e      	bne.n	8003032 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b80      	cmp	r3, #128	; 0x80
 8003020:	d107      	bne.n	8003032 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f903 	bl	8003238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d10e      	bne.n	800305e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d107      	bne.n	800305e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f838 	bl	80030ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d10e      	bne.n	800308a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b20      	cmp	r3, #32
 8003078:	d107      	bne.n	800308a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f06f 0220 	mvn.w	r2, #32
 8003082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f8cd 	bl	8003224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003102:	d00f      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3d      	ldr	r2, [pc, #244]	; (80031fc <TIM_Base_SetConfig+0x118>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00b      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <TIM_Base_SetConfig+0x11c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <TIM_Base_SetConfig+0x120>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a3a      	ldr	r2, [pc, #232]	; (8003208 <TIM_Base_SetConfig+0x124>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d108      	bne.n	8003136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d027      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <TIM_Base_SetConfig+0x118>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d023      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a2b      	ldr	r2, [pc, #172]	; (8003200 <TIM_Base_SetConfig+0x11c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01f      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <TIM_Base_SetConfig+0x120>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <TIM_Base_SetConfig+0x124>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d017      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a28      	ldr	r2, [pc, #160]	; (800320c <TIM_Base_SetConfig+0x128>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <TIM_Base_SetConfig+0x12c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00f      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <TIM_Base_SetConfig+0x130>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a25      	ldr	r2, [pc, #148]	; (8003218 <TIM_Base_SetConfig+0x134>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a24      	ldr	r2, [pc, #144]	; (800321c <TIM_Base_SetConfig+0x138>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a23      	ldr	r2, [pc, #140]	; (8003220 <TIM_Base_SetConfig+0x13c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_Base_SetConfig+0xf8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <TIM_Base_SetConfig+0x124>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	615a      	str	r2, [r3, #20]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40010000 	.word	0x40010000
 80031fc:	40000400 	.word	0x40000400
 8003200:	40000800 	.word	0x40000800
 8003204:	40000c00 	.word	0x40000c00
 8003208:	40010400 	.word	0x40010400
 800320c:	40014000 	.word	0x40014000
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800
 8003218:	40001800 	.word	0x40001800
 800321c:	40001c00 	.word	0x40001c00
 8003220:	40002000 	.word	0x40002000

08003224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800324c:	b5b0      	push	{r4, r5, r7, lr}
 800324e:	b08e      	sub	sp, #56	; 0x38
 8003250:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003252:	4ba0      	ldr	r3, [pc, #640]	; (80034d4 <MX_LWIP_Init+0x288>)
 8003254:	22c0      	movs	r2, #192	; 0xc0
 8003256:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003258:	4b9e      	ldr	r3, [pc, #632]	; (80034d4 <MX_LWIP_Init+0x288>)
 800325a:	22a8      	movs	r2, #168	; 0xa8
 800325c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800325e:	4b9d      	ldr	r3, [pc, #628]	; (80034d4 <MX_LWIP_Init+0x288>)
 8003260:	2200      	movs	r2, #0
 8003262:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8003264:	4b9b      	ldr	r3, [pc, #620]	; (80034d4 <MX_LWIP_Init+0x288>)
 8003266:	220a      	movs	r2, #10
 8003268:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800326a:	4b9b      	ldr	r3, [pc, #620]	; (80034d8 <MX_LWIP_Init+0x28c>)
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003270:	4b99      	ldr	r3, [pc, #612]	; (80034d8 <MX_LWIP_Init+0x28c>)
 8003272:	22ff      	movs	r2, #255	; 0xff
 8003274:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003276:	4b98      	ldr	r3, [pc, #608]	; (80034d8 <MX_LWIP_Init+0x28c>)
 8003278:	22ff      	movs	r2, #255	; 0xff
 800327a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800327c:	4b96      	ldr	r3, [pc, #600]	; (80034d8 <MX_LWIP_Init+0x28c>)
 800327e:	2200      	movs	r2, #0
 8003280:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003282:	4b96      	ldr	r3, [pc, #600]	; (80034dc <MX_LWIP_Init+0x290>)
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003288:	4b94      	ldr	r3, [pc, #592]	; (80034dc <MX_LWIP_Init+0x290>)
 800328a:	2200      	movs	r2, #0
 800328c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800328e:	4b93      	ldr	r3, [pc, #588]	; (80034dc <MX_LWIP_Init+0x290>)
 8003290:	2200      	movs	r2, #0
 8003292:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003294:	4b91      	ldr	r3, [pc, #580]	; (80034dc <MX_LWIP_Init+0x290>)
 8003296:	2200      	movs	r2, #0
 8003298:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800329a:	2100      	movs	r1, #0
 800329c:	2000      	movs	r0, #0
 800329e:	f005 ff91 	bl	80091c4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80032a2:	4b8c      	ldr	r3, [pc, #560]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	061a      	lsls	r2, r3, #24
 80032a8:	4b8a      	ldr	r3, [pc, #552]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	4b88      	ldr	r3, [pc, #544]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032b2:	789b      	ldrb	r3, [r3, #2]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	4313      	orrs	r3, r2
 80032b8:	4a86      	ldr	r2, [pc, #536]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032ba:	78d2      	ldrb	r2, [r2, #3]
 80032bc:	4313      	orrs	r3, r2
 80032be:	061a      	lsls	r2, r3, #24
 80032c0:	4b84      	ldr	r3, [pc, #528]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	0619      	lsls	r1, r3, #24
 80032c6:	4b83      	ldr	r3, [pc, #524]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032c8:	785b      	ldrb	r3, [r3, #1]
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	4319      	orrs	r1, r3
 80032ce:	4b81      	ldr	r3, [pc, #516]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032d0:	789b      	ldrb	r3, [r3, #2]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	430b      	orrs	r3, r1
 80032d6:	497f      	ldr	r1, [pc, #508]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032d8:	78c9      	ldrb	r1, [r1, #3]
 80032da:	430b      	orrs	r3, r1
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032e2:	431a      	orrs	r2, r3
 80032e4:	4b7b      	ldr	r3, [pc, #492]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	0619      	lsls	r1, r3, #24
 80032ea:	4b7a      	ldr	r3, [pc, #488]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	4319      	orrs	r1, r3
 80032f2:	4b78      	ldr	r3, [pc, #480]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032f4:	789b      	ldrb	r3, [r3, #2]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	430b      	orrs	r3, r1
 80032fa:	4976      	ldr	r1, [pc, #472]	; (80034d4 <MX_LWIP_Init+0x288>)
 80032fc:	78c9      	ldrb	r1, [r1, #3]
 80032fe:	430b      	orrs	r3, r1
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003306:	431a      	orrs	r2, r3
 8003308:	4b72      	ldr	r3, [pc, #456]	; (80034d4 <MX_LWIP_Init+0x288>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	0619      	lsls	r1, r3, #24
 800330e:	4b71      	ldr	r3, [pc, #452]	; (80034d4 <MX_LWIP_Init+0x288>)
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	041b      	lsls	r3, r3, #16
 8003314:	4319      	orrs	r1, r3
 8003316:	4b6f      	ldr	r3, [pc, #444]	; (80034d4 <MX_LWIP_Init+0x288>)
 8003318:	789b      	ldrb	r3, [r3, #2]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	430b      	orrs	r3, r1
 800331e:	496d      	ldr	r1, [pc, #436]	; (80034d4 <MX_LWIP_Init+0x288>)
 8003320:	78c9      	ldrb	r1, [r1, #3]
 8003322:	430b      	orrs	r3, r1
 8003324:	0e1b      	lsrs	r3, r3, #24
 8003326:	4313      	orrs	r3, r2
 8003328:	4a6d      	ldr	r2, [pc, #436]	; (80034e0 <MX_LWIP_Init+0x294>)
 800332a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800332c:	4b6a      	ldr	r3, [pc, #424]	; (80034d8 <MX_LWIP_Init+0x28c>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	061a      	lsls	r2, r3, #24
 8003332:	4b69      	ldr	r3, [pc, #420]	; (80034d8 <MX_LWIP_Init+0x28c>)
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	431a      	orrs	r2, r3
 800333a:	4b67      	ldr	r3, [pc, #412]	; (80034d8 <MX_LWIP_Init+0x28c>)
 800333c:	789b      	ldrb	r3, [r3, #2]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	4313      	orrs	r3, r2
 8003342:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <MX_LWIP_Init+0x28c>)
 8003344:	78d2      	ldrb	r2, [r2, #3]
 8003346:	4313      	orrs	r3, r2
 8003348:	061a      	lsls	r2, r3, #24
 800334a:	4b63      	ldr	r3, [pc, #396]	; (80034d8 <MX_LWIP_Init+0x28c>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	0619      	lsls	r1, r3, #24
 8003350:	4b61      	ldr	r3, [pc, #388]	; (80034d8 <MX_LWIP_Init+0x28c>)
 8003352:	785b      	ldrb	r3, [r3, #1]
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	4319      	orrs	r1, r3
 8003358:	4b5f      	ldr	r3, [pc, #380]	; (80034d8 <MX_LWIP_Init+0x28c>)
 800335a:	789b      	ldrb	r3, [r3, #2]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	430b      	orrs	r3, r1
 8003360:	495d      	ldr	r1, [pc, #372]	; (80034d8 <MX_LWIP_Init+0x28c>)
 8003362:	78c9      	ldrb	r1, [r1, #3]
 8003364:	430b      	orrs	r3, r1
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800336c:	431a      	orrs	r2, r3
 800336e:	4b5a      	ldr	r3, [pc, #360]	; (80034d8 <MX_LWIP_Init+0x28c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	0619      	lsls	r1, r3, #24
 8003374:	4b58      	ldr	r3, [pc, #352]	; (80034d8 <MX_LWIP_Init+0x28c>)
 8003376:	785b      	ldrb	r3, [r3, #1]
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	4319      	orrs	r1, r3
 800337c:	4b56      	ldr	r3, [pc, #344]	; (80034d8 <MX_LWIP_Init+0x28c>)
 800337e:	789b      	ldrb	r3, [r3, #2]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	430b      	orrs	r3, r1
 8003384:	4954      	ldr	r1, [pc, #336]	; (80034d8 <MX_LWIP_Init+0x28c>)
 8003386:	78c9      	ldrb	r1, [r1, #3]
 8003388:	430b      	orrs	r3, r1
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003390:	431a      	orrs	r2, r3
 8003392:	4b51      	ldr	r3, [pc, #324]	; (80034d8 <MX_LWIP_Init+0x28c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	0619      	lsls	r1, r3, #24
 8003398:	4b4f      	ldr	r3, [pc, #316]	; (80034d8 <MX_LWIP_Init+0x28c>)
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	4319      	orrs	r1, r3
 80033a0:	4b4d      	ldr	r3, [pc, #308]	; (80034d8 <MX_LWIP_Init+0x28c>)
 80033a2:	789b      	ldrb	r3, [r3, #2]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	430b      	orrs	r3, r1
 80033a8:	494b      	ldr	r1, [pc, #300]	; (80034d8 <MX_LWIP_Init+0x28c>)
 80033aa:	78c9      	ldrb	r1, [r1, #3]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	0e1b      	lsrs	r3, r3, #24
 80033b0:	4313      	orrs	r3, r2
 80033b2:	4a4c      	ldr	r2, [pc, #304]	; (80034e4 <MX_LWIP_Init+0x298>)
 80033b4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <MX_LWIP_Init+0x290>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	061a      	lsls	r2, r3, #24
 80033bc:	4b47      	ldr	r3, [pc, #284]	; (80034dc <MX_LWIP_Init+0x290>)
 80033be:	785b      	ldrb	r3, [r3, #1]
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	4b45      	ldr	r3, [pc, #276]	; (80034dc <MX_LWIP_Init+0x290>)
 80033c6:	789b      	ldrb	r3, [r3, #2]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	4313      	orrs	r3, r2
 80033cc:	4a43      	ldr	r2, [pc, #268]	; (80034dc <MX_LWIP_Init+0x290>)
 80033ce:	78d2      	ldrb	r2, [r2, #3]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	061a      	lsls	r2, r3, #24
 80033d4:	4b41      	ldr	r3, [pc, #260]	; (80034dc <MX_LWIP_Init+0x290>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	0619      	lsls	r1, r3, #24
 80033da:	4b40      	ldr	r3, [pc, #256]	; (80034dc <MX_LWIP_Init+0x290>)
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	4319      	orrs	r1, r3
 80033e2:	4b3e      	ldr	r3, [pc, #248]	; (80034dc <MX_LWIP_Init+0x290>)
 80033e4:	789b      	ldrb	r3, [r3, #2]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	430b      	orrs	r3, r1
 80033ea:	493c      	ldr	r1, [pc, #240]	; (80034dc <MX_LWIP_Init+0x290>)
 80033ec:	78c9      	ldrb	r1, [r1, #3]
 80033ee:	430b      	orrs	r3, r1
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033f6:	431a      	orrs	r2, r3
 80033f8:	4b38      	ldr	r3, [pc, #224]	; (80034dc <MX_LWIP_Init+0x290>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	0619      	lsls	r1, r3, #24
 80033fe:	4b37      	ldr	r3, [pc, #220]	; (80034dc <MX_LWIP_Init+0x290>)
 8003400:	785b      	ldrb	r3, [r3, #1]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	4319      	orrs	r1, r3
 8003406:	4b35      	ldr	r3, [pc, #212]	; (80034dc <MX_LWIP_Init+0x290>)
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	430b      	orrs	r3, r1
 800340e:	4933      	ldr	r1, [pc, #204]	; (80034dc <MX_LWIP_Init+0x290>)
 8003410:	78c9      	ldrb	r1, [r1, #3]
 8003412:	430b      	orrs	r3, r1
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800341a:	431a      	orrs	r2, r3
 800341c:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <MX_LWIP_Init+0x290>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	0619      	lsls	r1, r3, #24
 8003422:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <MX_LWIP_Init+0x290>)
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	041b      	lsls	r3, r3, #16
 8003428:	4319      	orrs	r1, r3
 800342a:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <MX_LWIP_Init+0x290>)
 800342c:	789b      	ldrb	r3, [r3, #2]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	430b      	orrs	r3, r1
 8003432:	492a      	ldr	r1, [pc, #168]	; (80034dc <MX_LWIP_Init+0x290>)
 8003434:	78c9      	ldrb	r1, [r1, #3]
 8003436:	430b      	orrs	r3, r1
 8003438:	0e1b      	lsrs	r3, r3, #24
 800343a:	4313      	orrs	r3, r2
 800343c:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <MX_LWIP_Init+0x29c>)
 800343e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003440:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <MX_LWIP_Init+0x2a0>)
 8003442:	9302      	str	r3, [sp, #8]
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <MX_LWIP_Init+0x2a4>)
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	2300      	movs	r3, #0
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <MX_LWIP_Init+0x29c>)
 800344e:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <MX_LWIP_Init+0x298>)
 8003450:	4923      	ldr	r1, [pc, #140]	; (80034e0 <MX_LWIP_Init+0x294>)
 8003452:	4828      	ldr	r0, [pc, #160]	; (80034f4 <MX_LWIP_Init+0x2a8>)
 8003454:	f006 fc3a 	bl	8009ccc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003458:	4826      	ldr	r0, [pc, #152]	; (80034f4 <MX_LWIP_Init+0x2a8>)
 800345a:	f006 fde9 	bl	800a030 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800345e:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <MX_LWIP_Init+0x2a8>)
 8003460:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003470:	4820      	ldr	r0, [pc, #128]	; (80034f4 <MX_LWIP_Init+0x2a8>)
 8003472:	f006 fded 	bl	800a050 <netif_set_up>
 8003476:	e002      	b.n	800347e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003478:	481e      	ldr	r0, [pc, #120]	; (80034f4 <MX_LWIP_Init+0x2a8>)
 800347a:	f006 fe55 	bl	800a128 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800347e:	491e      	ldr	r1, [pc, #120]	; (80034f8 <MX_LWIP_Init+0x2ac>)
 8003480:	481c      	ldr	r0, [pc, #112]	; (80034f4 <MX_LWIP_Init+0x2a8>)
 8003482:	f006 fee7 	bl	800a254 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8003486:	2300      	movs	r3, #0
 8003488:	623b      	str	r3, [r7, #32]
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800348e:	f107 0320 	add.w	r3, r7, #32
 8003492:	2101      	movs	r1, #1
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fd7d 	bl	8003f94 <osSemaphoreCreate>
 800349a:	4602      	mov	r2, r0
 800349c:	4b17      	ldr	r3, [pc, #92]	; (80034fc <MX_LWIP_Init+0x2b0>)
 800349e:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80034a0:	4b17      	ldr	r3, [pc, #92]	; (8003500 <MX_LWIP_Init+0x2b4>)
 80034a2:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <MX_LWIP_Init+0x2a8>)
 80034a4:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <MX_LWIP_Init+0x2b0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <MX_LWIP_Init+0x2b4>)
 80034ac:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <MX_LWIP_Init+0x2b8>)
 80034b0:	1d3c      	adds	r4, r7, #4
 80034b2:	461d      	mov	r5, r3
 80034b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80034c0:	1d3b      	adds	r3, r7, #4
 80034c2:	490f      	ldr	r1, [pc, #60]	; (8003500 <MX_LWIP_Init+0x2b4>)
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fc68 	bl	8003d9a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80034ca:	bf00      	nop
 80034cc:	3728      	adds	r7, #40	; 0x28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bdb0      	pop	{r4, r5, r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20004470 	.word	0x20004470
 80034d8:	2000446c 	.word	0x2000446c
 80034dc:	20004430 	.word	0x20004430
 80034e0:	20004468 	.word	0x20004468
 80034e4:	20004474 	.word	0x20004474
 80034e8:	20004478 	.word	0x20004478
 80034ec:	080090d5 	.word	0x080090d5
 80034f0:	08003b29 	.word	0x08003b29
 80034f4:	20004434 	.word	0x20004434
 80034f8:	08003c0d 	.word	0x08003c0d
 80034fc:	200004f4 	.word	0x200004f4
 8003500:	20004428 	.word	0x20004428
 8003504:	08015270 	.word	0x08015270

08003508 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08e      	sub	sp, #56	; 0x38
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a4a      	ldr	r2, [pc, #296]	; (8003650 <HAL_ETH_MspInit+0x148>)
 8003526:	4293      	cmp	r3, r2
 8003528:	f040 808d 	bne.w	8003646 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800352c:	2300      	movs	r3, #0
 800352e:	623b      	str	r3, [r7, #32]
 8003530:	4b48      	ldr	r3, [pc, #288]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4a47      	ldr	r2, [pc, #284]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 8003536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800353a:	6313      	str	r3, [r2, #48]	; 0x30
 800353c:	4b45      	ldr	r3, [pc, #276]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	4b41      	ldr	r3, [pc, #260]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4a40      	ldr	r2, [pc, #256]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 8003552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003556:	6313      	str	r3, [r2, #48]	; 0x30
 8003558:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4a39      	ldr	r2, [pc, #228]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 800356e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003572:	6313      	str	r3, [r2, #48]	; 0x30
 8003574:	4b37      	ldr	r3, [pc, #220]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	4a32      	ldr	r2, [pc, #200]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 800358a:	f043 0304 	orr.w	r3, r3, #4
 800358e:	6313      	str	r3, [r2, #48]	; 0x30
 8003590:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	4a2b      	ldr	r2, [pc, #172]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6313      	str	r3, [r2, #48]	; 0x30
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	4a24      	ldr	r2, [pc, #144]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	6313      	str	r3, [r2, #48]	; 0x30
 80035c8:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_ETH_MspInit+0x14c>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80035d4:	2332      	movs	r3, #50	; 0x32
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035e4:	230b      	movs	r3, #11
 80035e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ec:	4619      	mov	r1, r3
 80035ee:	481a      	ldr	r0, [pc, #104]	; (8003658 <HAL_ETH_MspInit+0x150>)
 80035f0:	f7fe fdd4 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80035f4:	2386      	movs	r3, #134	; 0x86
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003600:	2303      	movs	r3, #3
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003604:	230b      	movs	r3, #11
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360c:	4619      	mov	r1, r3
 800360e:	4813      	ldr	r0, [pc, #76]	; (800365c <HAL_ETH_MspInit+0x154>)
 8003610:	f7fe fdc4 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003614:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003622:	2303      	movs	r3, #3
 8003624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003626:	230b      	movs	r3, #11
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800362a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362e:	4619      	mov	r1, r3
 8003630:	480b      	ldr	r0, [pc, #44]	; (8003660 <HAL_ETH_MspInit+0x158>)
 8003632:	f7fe fdb3 	bl	800219c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003636:	2200      	movs	r2, #0
 8003638:	2105      	movs	r1, #5
 800363a:	203d      	movs	r0, #61	; 0x3d
 800363c:	f7fd fbde 	bl	8000dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003640:	203d      	movs	r0, #61	; 0x3d
 8003642:	f7fd fbf7 	bl	8000e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003646:	bf00      	nop
 8003648:	3738      	adds	r7, #56	; 0x38
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40028000 	.word	0x40028000
 8003654:	40023800 	.word	0x40023800
 8003658:	40020800 	.word	0x40020800
 800365c:	40020000 	.word	0x40020000
 8003660:	40020400 	.word	0x40020400

08003664 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <HAL_ETH_RxCpltCallback+0x1c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fd11 	bl	8004098 <osSemaphoreRelease>
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200004f8 	.word	0x200004f8

08003684 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003684:	b5b0      	push	{r4, r5, r7, lr}
 8003686:	b090      	sub	sp, #64	; 0x40
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003690:	4b5c      	ldr	r3, [pc, #368]	; (8003804 <low_level_init+0x180>)
 8003692:	4a5d      	ldr	r2, [pc, #372]	; (8003808 <low_level_init+0x184>)
 8003694:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003696:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <low_level_init+0x180>)
 8003698:	2201      	movs	r2, #1
 800369a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800369c:	4b59      	ldr	r3, [pc, #356]	; (8003804 <low_level_init+0x180>)
 800369e:	2201      	movs	r2, #1
 80036a0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80036ae:	23e1      	movs	r3, #225	; 0xe1
 80036b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80036c6:	4a4f      	ldr	r2, [pc, #316]	; (8003804 <low_level_init+0x180>)
 80036c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036cc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80036ce:	4b4d      	ldr	r3, [pc, #308]	; (8003804 <low_level_init+0x180>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80036d4:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <low_level_init+0x180>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <low_level_init+0x180>)
 80036dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80036e0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80036e2:	4848      	ldr	r0, [pc, #288]	; (8003804 <low_level_init+0x180>)
 80036e4:	f7fd fbb4 	bl	8000e50 <HAL_ETH_Init>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80036ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80036fc:	f043 0304 	orr.w	r3, r3, #4
 8003700:	b2da      	uxtb	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003708:	2304      	movs	r3, #4
 800370a:	4a40      	ldr	r2, [pc, #256]	; (800380c <low_level_init+0x188>)
 800370c:	4940      	ldr	r1, [pc, #256]	; (8003810 <low_level_init+0x18c>)
 800370e:	483d      	ldr	r0, [pc, #244]	; (8003804 <low_level_init+0x180>)
 8003710:	f7fd fd3c 	bl	800118c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003714:	2304      	movs	r3, #4
 8003716:	4a3f      	ldr	r2, [pc, #252]	; (8003814 <low_level_init+0x190>)
 8003718:	493f      	ldr	r1, [pc, #252]	; (8003818 <low_level_init+0x194>)
 800371a:	483a      	ldr	r0, [pc, #232]	; (8003804 <low_level_init+0x180>)
 800371c:	f7fd fd9f 	bl	800125e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2206      	movs	r2, #6
 8003724:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003728:	4b36      	ldr	r3, [pc, #216]	; (8003804 <low_level_init+0x180>)
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003734:	4b33      	ldr	r3, [pc, #204]	; (8003804 <low_level_init+0x180>)
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	785a      	ldrb	r2, [r3, #1]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003740:	4b30      	ldr	r3, [pc, #192]	; (8003804 <low_level_init+0x180>)
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	789a      	ldrb	r2, [r3, #2]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800374c:	4b2d      	ldr	r3, [pc, #180]	; (8003804 <low_level_init+0x180>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	78da      	ldrb	r2, [r3, #3]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003758:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <low_level_init+0x180>)
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	791a      	ldrb	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003764:	4b27      	ldr	r3, [pc, #156]	; (8003804 <low_level_init+0x180>)
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	795a      	ldrb	r2, [r3, #5]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003776:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800377e:	f043 030a 	orr.w	r3, r3, #10
 8003782:	b2da      	uxtb	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800378a:	2300      	movs	r3, #0
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
 800378e:	2300      	movs	r3, #0
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fbfb 	bl	8003f94 <osSemaphoreCreate>
 800379e:	4602      	mov	r2, r0
 80037a0:	4b1e      	ldr	r3, [pc, #120]	; (800381c <low_level_init+0x198>)
 80037a2:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80037a4:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <low_level_init+0x19c>)
 80037a6:	f107 040c 	add.w	r4, r7, #12
 80037aa:	461d      	mov	r5, r3
 80037ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80037b8:	f107 030c 	add.w	r3, r7, #12
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 faeb 	bl	8003d9a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80037c4:	480f      	ldr	r0, [pc, #60]	; (8003804 <low_level_init+0x180>)
 80037c6:	f7fe f872 	bl	80018ae <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80037ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037ce:	461a      	mov	r2, r3
 80037d0:	211d      	movs	r1, #29
 80037d2:	480c      	ldr	r0, [pc, #48]	; (8003804 <low_level_init+0x180>)
 80037d4:	f7fd ff9d 	bl	8001712 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	f043 030b 	orr.w	r3, r3, #11
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	461a      	mov	r2, r3
 80037e4:	211d      	movs	r1, #29
 80037e6:	4807      	ldr	r0, [pc, #28]	; (8003804 <low_level_init+0x180>)
 80037e8:	f7fd fffb 	bl	80017e2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80037ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037f0:	461a      	mov	r2, r3
 80037f2:	211d      	movs	r1, #29
 80037f4:	4803      	ldr	r0, [pc, #12]	; (8003804 <low_level_init+0x180>)
 80037f6:	f7fd ff8c 	bl	8001712 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80037fa:	bf00      	nop
 80037fc:	3740      	adds	r7, #64	; 0x40
 80037fe:	46bd      	mov	sp, r7
 8003800:	bdb0      	pop	{r4, r5, r7, pc}
 8003802:	bf00      	nop
 8003804:	20005d4c 	.word	0x20005d4c
 8003808:	40028000 	.word	0x40028000
 800380c:	20005d94 	.word	0x20005d94
 8003810:	2000447c 	.word	0x2000447c
 8003814:	200044fc 	.word	0x200044fc
 8003818:	20005ccc 	.word	0x20005ccc
 800381c:	200004f8 	.word	0x200004f8
 8003820:	08015294 	.word	0x08015294

08003824 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800382e:	4b4b      	ldr	r3, [pc, #300]	; (800395c <low_level_output+0x138>)
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003846:	4b45      	ldr	r3, [pc, #276]	; (800395c <low_level_output+0x138>)
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	e05a      	b.n	800390c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	da03      	bge.n	8003866 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800385e:	23f8      	movs	r3, #248	; 0xf8
 8003860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003864:	e05c      	b.n	8003920 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	895b      	ldrh	r3, [r3, #10]
 800386a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003870:	e02f      	b.n	80038d2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	18d0      	adds	r0, r2, r3
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	18d1      	adds	r1, r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003886:	3304      	adds	r3, #4
 8003888:	461a      	mov	r2, r3
 800388a:	f010 fcf2 	bl	8014272 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	da03      	bge.n	80038a4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800389c:	23f8      	movs	r3, #248	; 0xf8
 800389e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80038a2:	e03d      	b.n	8003920 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80038b4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80038c0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80038cc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4413      	add	r3, r2
 80038d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80038dc:	4293      	cmp	r3, r2
 80038de:	d8c8      	bhi.n	8003872 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	18d0      	adds	r0, r2, r3
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4413      	add	r3, r2
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4619      	mov	r1, r3
 80038f2:	f010 fcbe 	bl	8014272 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	623b      	str	r3, [r7, #32]
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1a1      	bne.n	8003856 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003912:	6979      	ldr	r1, [r7, #20]
 8003914:	4811      	ldr	r0, [pc, #68]	; (800395c <low_level_output+0x138>)
 8003916:	f7fd fd0f 	bl	8001338 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003920:	4b0e      	ldr	r3, [pc, #56]	; (800395c <low_level_output+0x138>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003928:	3314      	adds	r3, #20
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00d      	beq.n	8003950 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <low_level_output+0x138>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393c:	3314      	adds	r3, #20
 800393e:	2220      	movs	r2, #32
 8003940:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <low_level_output+0x138>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394a:	3304      	adds	r3, #4
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003950:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003954:	4618      	mov	r0, r3
 8003956:	3728      	adds	r7, #40	; 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20005d4c 	.word	0x20005d4c

08003960 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800396c:	2300      	movs	r3, #0
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003984:	484f      	ldr	r0, [pc, #316]	; (8003ac4 <low_level_input+0x164>)
 8003986:	f7fd fdc1 	bl	800150c <HAL_ETH_GetReceivedFrame_IT>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <low_level_input+0x34>

    return NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	e092      	b.n	8003aba <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <low_level_input+0x164>)
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800399a:	4b4a      	ldr	r3, [pc, #296]	; (8003ac4 <low_level_input+0x164>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80039a0:	89fb      	ldrh	r3, [r7, #14]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80039a6:	89fb      	ldrh	r3, [r7, #14]
 80039a8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80039ac:	4619      	mov	r1, r3
 80039ae:	2000      	movs	r0, #0
 80039b0:	f006 fd1a 	bl	800a3e8 <pbuf_alloc>
 80039b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d04b      	beq.n	8003a54 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80039bc:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <low_level_input+0x164>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ca:	e040      	b.n	8003a4e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	895b      	ldrh	r3, [r3, #10]
 80039d0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80039d6:	e021      	b.n	8003a1c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	18d0      	adds	r0, r2, r3
 80039e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	18d1      	adds	r1, r2, r3
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80039ec:	3304      	adds	r3, #4
 80039ee:	461a      	mov	r2, r3
 80039f0:	f010 fc3f 	bl	8014272 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4413      	add	r3, r2
 8003a06:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003a0a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a16:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d8d6      	bhi.n	80039d8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	18d0      	adds	r0, r2, r3
 8003a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	4413      	add	r3, r2
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f010 fc19 	bl	8014272 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	4413      	add	r3, r2
 8003a46:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1bb      	bne.n	80039cc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <low_level_input+0x164>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	e00b      	b.n	8003a78 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	3301      	adds	r3, #1
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <low_level_input+0x164>)
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3ee      	bcc.n	8003a60 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <low_level_input+0x164>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <low_level_input+0x164>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a90:	3314      	adds	r3, #20
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00d      	beq.n	8003ab8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <low_level_input+0x164>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <low_level_input+0x164>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3730      	adds	r7, #48	; 0x30
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20005d4c 	.word	0x20005d4c

08003ac8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003ad4:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <ethernetif_input+0x58>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fa8d 	bl	8003ffc <osSemaphoreWait>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f5      	bne.n	8003ad4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003ae8:	480e      	ldr	r0, [pc, #56]	; (8003b24 <ethernetif_input+0x5c>)
 8003aea:	f010 fb2f 	bl	801414c <sys_mutex_lock>
        p = low_level_input( netif );
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f7ff ff36 	bl	8003960 <low_level_input>
 8003af4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	68f9      	ldr	r1, [r7, #12]
 8003b02:	68b8      	ldr	r0, [r7, #8]
 8003b04:	4798      	blx	r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003b0c:	68b8      	ldr	r0, [r7, #8]
 8003b0e:	f006 ff4b 	bl	800a9a8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003b12:	4804      	ldr	r0, [pc, #16]	; (8003b24 <ethernetif_input+0x5c>)
 8003b14:	f010 fb29 	bl	801416a <sys_mutex_unlock>
      } while(p!=NULL);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e4      	bne.n	8003ae8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003b1e:	e7d9      	b.n	8003ad4 <ethernetif_input+0xc>
 8003b20:	200004f8 	.word	0x200004f8
 8003b24:	200075a4 	.word	0x200075a4

08003b28 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <ethernetif_init+0x1c>
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <ethernetif_init+0x48>)
 8003b38:	f240 2229 	movw	r2, #553	; 0x229
 8003b3c:	490d      	ldr	r1, [pc, #52]	; (8003b74 <ethernetif_init+0x4c>)
 8003b3e:	480e      	ldr	r0, [pc, #56]	; (8003b78 <ethernetif_init+0x50>)
 8003b40:	f010 fbaa 	bl	8014298 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2273      	movs	r2, #115	; 0x73
 8003b48:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2274      	movs	r2, #116	; 0x74
 8003b50:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <ethernetif_init+0x54>)
 8003b58:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <ethernetif_init+0x58>)
 8003b5e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fd8f 	bl	8003684 <low_level_init>

  return ERR_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	080152b0 	.word	0x080152b0
 8003b74:	080152cc 	.word	0x080152cc
 8003b78:	080152dc 	.word	0x080152dc
 8003b7c:	0801216d 	.word	0x0801216d
 8003b80:	08003825 	.word	0x08003825

08003b84 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b88:	f7fd f852 	bl	8000c30 <HAL_GetTick>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003ba4:	f107 0308 	add.w	r3, r7, #8
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2101      	movs	r1, #1
 8003bac:	4816      	ldr	r0, [pc, #88]	; (8003c08 <ethernetif_set_link+0x74>)
 8003bae:	f7fd fdb0 	bl	8001712 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <ethernetif_set_link+0x48>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f006 fad9 	bl	800a18c <netif_set_link_up>
 8003bda:	e011      	b.n	8003c00 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <ethernetif_set_link+0x6c>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f006 fafa 	bl	800a1f4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003c00:	20c8      	movs	r0, #200	; 0xc8
 8003c02:	f000 f916 	bl	8003e32 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003c06:	e7cd      	b.n	8003ba4 <ethernetif_set_link+0x10>
 8003c08:	20005d4c 	.word	0x20005d4c

08003c0c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c22:	089b      	lsrs	r3, r3, #2
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d05d      	beq.n	8003cea <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003c2e:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d03f      	beq.n	8003cb6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003c36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4830      	ldr	r0, [pc, #192]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003c3e:	f7fd fdd0 	bl	80017e2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fc fff5 	bl	8000c30 <HAL_GetTick>
 8003c46:	4603      	mov	r3, r0
 8003c48:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2101      	movs	r1, #1
 8003c52:	482b      	ldr	r0, [pc, #172]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003c54:	f7fd fd5d 	bl	8001712 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003c58:	f7fc ffea 	bl	8000c30 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c66:	d828      	bhi.n	8003cba <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0eb      	beq.n	8003c4a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	461a      	mov	r2, r3
 8003c78:	211f      	movs	r1, #31
 8003c7a:	4821      	ldr	r0, [pc, #132]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003c7c:	f7fd fd49 	bl	8001712 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	e002      	b.n	8003c9a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003c94:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003ca4:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	e016      	b.n	8003cda <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	e011      	b.n	8003cda <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <ethernetif_update_config+0xb0>
          goto error;
 8003cba:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003cbc:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	480a      	ldr	r0, [pc, #40]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003cd6:	f7fd fd84 	bl	80017e2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4808      	ldr	r0, [pc, #32]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003cde:	f7fd fe45 	bl	800196c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003ce2:	4807      	ldr	r0, [pc, #28]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003ce4:	f7fd fde3 	bl	80018ae <HAL_ETH_Start>
 8003ce8:	e002      	b.n	8003cf0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003cea:	4805      	ldr	r0, [pc, #20]	; (8003d00 <ethernetif_update_config+0xf4>)
 8003cec:	f7fd fe0e 	bl	800190c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f807 	bl	8003d04 <ethernetif_notify_conn_changed>
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20005d4c 	.word	0x20005d4c

08003d04 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d2a:	2b84      	cmp	r3, #132	; 0x84
 8003d2c:	d005      	beq.n	8003d3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4413      	add	r3, r2
 8003d36:	3303      	adds	r3, #3
 8003d38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d4e:	f3ef 8305 	mrs	r3, IPSR
 8003d52:	607b      	str	r3, [r7, #4]
  return(result);
 8003d54:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d70:	f001 fd08 	bl	8005784 <vTaskStartScheduler>
  
  return osOK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003d7e:	f7ff ffe3 	bl	8003d48 <inHandlerMode>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003d88:	f001 fe14 	bl	80059b4 <xTaskGetTickCountFromISR>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	e002      	b.n	8003d96 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003d90:	f001 fe00 	bl	8005994 <xTaskGetTickCount>
 8003d94:	4603      	mov	r3, r0
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9c:	b089      	sub	sp, #36	; 0x24
 8003d9e:	af04      	add	r7, sp, #16
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <osThreadCreate+0x54>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01c      	beq.n	8003dee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685c      	ldr	r4, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681d      	ldr	r5, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691e      	ldr	r6, [r3, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ffa6 	bl	8003d18 <makeFreeRtosPriority>
 8003dcc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dd6:	9202      	str	r2, [sp, #8]
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	9100      	str	r1, [sp, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4632      	mov	r2, r6
 8003de0:	4629      	mov	r1, r5
 8003de2:	4620      	mov	r0, r4
 8003de4:	f001 fb0a 	bl	80053fc <xTaskCreateStatic>
 8003de8:	4603      	mov	r3, r0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e01c      	b.n	8003e28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685c      	ldr	r4, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dfa:	b29e      	uxth	r6, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff ff88 	bl	8003d18 <makeFreeRtosPriority>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	f107 030c 	add.w	r3, r7, #12
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	9200      	str	r2, [sp, #0]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	4632      	mov	r2, r6
 8003e16:	4629      	mov	r1, r5
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f001 fb49 	bl	80054b0 <xTaskCreate>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d001      	beq.n	8003e28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e28:	68fb      	ldr	r3, [r7, #12]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <osDelay+0x16>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	e000      	b.n	8003e4a <osDelay+0x18>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fc66 	bl	800571c <vTaskDelay>
  
  return osOK;
 8003e50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	2001      	movs	r0, #1
 8003e72:	f000 fc80 	bl	8004776 <xQueueCreateMutexStatic>
 8003e76:	4603      	mov	r3, r0
 8003e78:	e003      	b.n	8003e82 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f000 fc63 	bl	8004746 <xQueueCreateMutex>
 8003e80:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <osMutexWait+0x18>
    return osErrorParameter;
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	e03a      	b.n	8003f1a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d103      	bne.n	8003eb8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e009      	b.n	8003ecc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <osMutexWait+0x40>
      ticks = 1;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003ecc:	f7ff ff3c 	bl	8003d48 <inHandlerMode>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d017      	beq.n	8003f06 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003ed6:	f107 0308 	add.w	r3, r7, #8
 8003eda:	461a      	mov	r2, r3
 8003edc:	2100      	movs	r1, #0
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f001 f860 	bl	8004fa4 <xQueueReceiveFromISR>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <osMutexWait+0x62>
      return osErrorOS;
 8003eea:	23ff      	movs	r3, #255	; 0xff
 8003eec:	e015      	b.n	8003f1a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d011      	beq.n	8003f18 <osMutexWait+0x8c>
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <osMutexWait+0x98>)
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	e008      	b.n	8003f18 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003f06:	68f9      	ldr	r1, [r7, #12]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 ff43 	bl	8004d94 <xQueueSemaphoreTake>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d001      	beq.n	8003f18 <osMutexWait+0x8c>
    return osErrorOS;
 8003f14:	23ff      	movs	r3, #255	; 0xff
 8003f16:	e000      	b.n	8003f1a <osMutexWait+0x8e>
  }
  
  return osOK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003f38:	f7ff ff06 	bl	8003d48 <inHandlerMode>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003f42:	f107 0308 	add.w	r3, r7, #8
 8003f46:	4619      	mov	r1, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fdbd 	bl	8004ac8 <xQueueGiveFromISR>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d001      	beq.n	8003f58 <osMutexRelease+0x30>
      return osErrorOS;
 8003f54:	23ff      	movs	r3, #255	; 0xff
 8003f56:	e017      	b.n	8003f88 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d013      	beq.n	8003f86 <osMutexRelease+0x5e>
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <osMutexRelease+0x68>)
 8003f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	e00a      	b.n	8003f86 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003f70:	2300      	movs	r3, #0
 8003f72:	2200      	movs	r2, #0
 8003f74:	2100      	movs	r1, #0
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fc18 	bl	80047ac <xQueueGenericSend>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d001      	beq.n	8003f86 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003f82:	23ff      	movs	r3, #255	; 0xff
 8003f84:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003f86:	68fb      	ldr	r3, [r7, #12]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	e000ed04 	.word	0xe000ed04

08003f94 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d010      	beq.n	8003fc8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10b      	bne.n	8003fc4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2100      	movs	r1, #0
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f000 fad8 	bl	8004570 <xQueueGenericCreateStatic>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	e016      	b.n	8003ff2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e014      	b.n	8003ff2 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d110      	bne.n	8003ff0 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003fce:	2203      	movs	r2, #3
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f000 fb3f 	bl	8004656 <xQueueGenericCreate>
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <osSemaphoreCreate+0x58>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 fbe0 	bl	80047ac <xQueueGenericSend>
      return sema;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	e000      	b.n	8003ff2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003ff0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	e03a      	b.n	800408a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d103      	bne.n	8004028 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	e009      	b.n	800403c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <osSemaphoreWait+0x40>
      ticks = 1;
 8004038:	2301      	movs	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800403c:	f7ff fe84 	bl	8003d48 <inHandlerMode>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d017      	beq.n	8004076 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004046:	f107 0308 	add.w	r3, r7, #8
 800404a:	461a      	mov	r2, r3
 800404c:	2100      	movs	r1, #0
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 ffa8 	bl	8004fa4 <xQueueReceiveFromISR>
 8004054:	4603      	mov	r3, r0
 8004056:	2b01      	cmp	r3, #1
 8004058:	d001      	beq.n	800405e <osSemaphoreWait+0x62>
      return osErrorOS;
 800405a:	23ff      	movs	r3, #255	; 0xff
 800405c:	e015      	b.n	800408a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d011      	beq.n	8004088 <osSemaphoreWait+0x8c>
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <osSemaphoreWait+0x98>)
 8004066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	e008      	b.n	8004088 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004076:	68f9      	ldr	r1, [r7, #12]
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fe8b 	bl	8004d94 <xQueueSemaphoreTake>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d001      	beq.n	8004088 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004084:	23ff      	movs	r3, #255	; 0xff
 8004086:	e000      	b.n	800408a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	e000ed04 	.word	0xe000ed04

08004098 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80040a8:	f7ff fe4e 	bl	8003d48 <inHandlerMode>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80040b2:	f107 0308 	add.w	r3, r7, #8
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fd05 	bl	8004ac8 <xQueueGiveFromISR>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d001      	beq.n	80040c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80040c4:	23ff      	movs	r3, #255	; 0xff
 80040c6:	e017      	b.n	80040f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d013      	beq.n	80040f6 <osSemaphoreRelease+0x5e>
 80040ce:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <osSemaphoreRelease+0x68>)
 80040d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	e00a      	b.n	80040f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80040e0:	2300      	movs	r3, #0
 80040e2:	2200      	movs	r2, #0
 80040e4:	2100      	movs	r1, #0
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fb60 	bl	80047ac <xQueueGenericSend>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d001      	beq.n	80040f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80040f2:	23ff      	movs	r3, #255	; 0xff
 80040f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80040f6:	68fb      	ldr	r3, [r7, #12]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800410c:	f7ff fe1c 	bl	8003d48 <inHandlerMode>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004116:	2382      	movs	r3, #130	; 0x82
 8004118:	e003      	b.n	8004122 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fff9 	bl	8005112 <vQueueDelete>

  return osOK; 
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800412a:	b590      	push	{r4, r7, lr}
 800412c:	b085      	sub	sp, #20
 800412e:	af02      	add	r7, sp, #8
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <osMessageCreate+0x38>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00e      	beq.n	8004162 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68dc      	ldr	r4, [r3, #12]
 8004154:	2300      	movs	r3, #0
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	4623      	mov	r3, r4
 800415a:	f000 fa09 	bl	8004570 <xQueueGenericCreateStatic>
 800415e:	4603      	mov	r3, r0
 8004160:	e008      	b.n	8004174 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	4619      	mov	r1, r3
 800416e:	f000 fa72 	bl	8004656 <xQueueGenericCreate>
 8004172:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bd90      	pop	{r4, r7, pc}

0800417c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <osMessagePut+0x1e>
    ticks = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800419a:	f7ff fdd5 	bl	8003d48 <inHandlerMode>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d018      	beq.n	80041d6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80041a4:	f107 0210 	add.w	r2, r7, #16
 80041a8:	f107 0108 	add.w	r1, r7, #8
 80041ac:	2300      	movs	r3, #0
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fbf6 	bl	80049a0 <xQueueGenericSendFromISR>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d001      	beq.n	80041be <osMessagePut+0x42>
      return osErrorOS;
 80041ba:	23ff      	movs	r3, #255	; 0xff
 80041bc:	e018      	b.n	80041f0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d014      	beq.n	80041ee <osMessagePut+0x72>
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <osMessagePut+0x7c>)
 80041c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	e00b      	b.n	80041ee <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80041d6:	f107 0108 	add.w	r1, r7, #8
 80041da:	2300      	movs	r3, #0
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fae4 	bl	80047ac <xQueueGenericSend>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d001      	beq.n	80041ee <osMessagePut+0x72>
      return osErrorOS;
 80041ea:	23ff      	movs	r3, #255	; 0xff
 80041ec:	e000      	b.n	80041f0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b08b      	sub	sp, #44	; 0x2c
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	617b      	str	r3, [r7, #20]
    return event;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	461c      	mov	r4, r3
 800421e:	f107 0314 	add.w	r3, r7, #20
 8004222:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004226:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800422a:	e054      	b.n	80042d6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800422c:	2300      	movs	r3, #0
 800422e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d103      	bne.n	8004244 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
 8004242:	e009      	b.n	8004258 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <osMessageGet+0x5c>
      ticks = 1;
 8004254:	2301      	movs	r3, #1
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004258:	f7ff fd76 	bl	8003d48 <inHandlerMode>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01c      	beq.n	800429c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004262:	f107 0220 	add.w	r2, r7, #32
 8004266:	f107 0314 	add.w	r3, r7, #20
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	68b8      	ldr	r0, [r7, #8]
 8004270:	f000 fe98 	bl	8004fa4 <xQueueReceiveFromISR>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d102      	bne.n	8004280 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800427a:	2310      	movs	r3, #16
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e001      	b.n	8004284 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01d      	beq.n	80042c6 <osMessageGet+0xca>
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <osMessageGet+0xe4>)
 800428c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	e014      	b.n	80042c6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	3304      	adds	r3, #4
 80042a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a4:	4619      	mov	r1, r3
 80042a6:	68b8      	ldr	r0, [r7, #8]
 80042a8:	f000 fc98 	bl	8004bdc <xQueueReceive>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d102      	bne.n	80042b8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80042b2:	2310      	movs	r3, #16
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	e006      	b.n	80042c6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <osMessageGet+0xc6>
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <osMessageGet+0xc8>
 80042c2:	2340      	movs	r3, #64	; 0x40
 80042c4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	461c      	mov	r4, r3
 80042ca:	f107 0314 	add.w	r3, r7, #20
 80042ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	372c      	adds	r7, #44	; 0x2c
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd90      	pop	{r4, r7, pc}
 80042de:	bf00      	nop
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80042ec:	f7ff fd2c 	bl	8003d48 <inHandlerMode>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 feee 	bl	80050d8 <uxQueueMessagesWaitingFromISR>
 80042fc:	4603      	mov	r3, r0
 80042fe:	e003      	b.n	8004308 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fecc 	bl	800509e <uxQueueMessagesWaiting>
 8004306:	4603      	mov	r3, r0
  }
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004318:	f7ff fd16 	bl	8003d48 <inHandlerMode>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <osMessageDelete+0x16>
    return osErrorISR;
 8004322:	2382      	movs	r3, #130	; 0x82
 8004324:	e003      	b.n	800432e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fef3 	bl	8005112 <vQueueDelete>

  return osOK; 
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f103 0208 	add.w	r2, r3, #8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f04f 32ff 	mov.w	r2, #4294967295
 800434e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f103 0208 	add.w	r2, r3, #8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f103 0208 	add.w	r2, r3, #8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	601a      	str	r2, [r3, #0]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d103      	bne.n	80043f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e00c      	b.n	8004412 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3308      	adds	r3, #8
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	e002      	b.n	8004406 <vListInsert+0x2e>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d2f6      	bcs.n	8004400 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6892      	ldr	r2, [r2, #8]
 8004460:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6852      	ldr	r2, [r2, #4]
 800446a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	d103      	bne.n	800447e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	1e5a      	subs	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	e7fe      	b.n	80044c6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80044c8:	f002 f8d0 	bl	800666c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	441a      	add	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	3b01      	subs	r3, #1
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	441a      	add	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	22ff      	movs	r2, #255	; 0xff
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	22ff      	movs	r2, #255	; 0xff
 8004514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d114      	bne.n	8004548 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01a      	beq.n	800455c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3310      	adds	r3, #16
 800452a:	4618      	mov	r0, r3
 800452c:	f001 fb8a 	bl	8005c44 <xTaskRemoveFromEventList>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d012      	beq.n	800455c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <xQueueGenericReset+0xcc>)
 8004538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	e009      	b.n	800455c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3310      	adds	r3, #16
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fef2 	bl	8004336 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3324      	adds	r3, #36	; 0x24
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff feed 	bl	8004336 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800455c:	f002 f8b4 	bl	80066c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004560:	2301      	movs	r3, #1
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08e      	sub	sp, #56	; 0x38
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <xQueueGenericCreateStatic+0x28>
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
 8004596:	e7fe      	b.n	8004596 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <xQueueGenericCreateStatic+0x42>
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	e7fe      	b.n	80045b0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <xQueueGenericCreateStatic+0x4e>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <xQueueGenericCreateStatic+0x52>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <xQueueGenericCreateStatic+0x54>
 80045c2:	2300      	movs	r3, #0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <xQueueGenericCreateStatic+0x6c>
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	623b      	str	r3, [r7, #32]
 80045da:	e7fe      	b.n	80045da <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <xQueueGenericCreateStatic+0x78>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <xQueueGenericCreateStatic+0x7c>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <xQueueGenericCreateStatic+0x7e>
 80045ec:	2300      	movs	r3, #0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <xQueueGenericCreateStatic+0x96>
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e7fe      	b.n	8004604 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004606:	2348      	movs	r3, #72	; 0x48
 8004608:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b48      	cmp	r3, #72	; 0x48
 800460e:	d009      	beq.n	8004624 <xQueueGenericCreateStatic+0xb4>
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e7fe      	b.n	8004622 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004624:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004638:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f844 	bl	80046d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800464e:	4618      	mov	r0, r3
 8004650:	3730      	adds	r7, #48	; 0x30
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004656:	b580      	push	{r7, lr}
 8004658:	b08a      	sub	sp, #40	; 0x28
 800465a:	af02      	add	r7, sp, #8
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	4613      	mov	r3, r2
 8004662:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <xQueueGenericCreate+0x28>
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	e7fe      	b.n	800467c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	e004      	b.n	8004694 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	3348      	adds	r3, #72	; 0x48
 8004698:	4618      	mov	r0, r3
 800469a:	f002 f901 	bl	80068a0 <pvPortMalloc>
 800469e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d011      	beq.n	80046ca <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	3348      	adds	r3, #72	; 0x48
 80046ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046b8:	79fa      	ldrb	r2, [r7, #7]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	4613      	mov	r3, r2
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f805 	bl	80046d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046ca:	69bb      	ldr	r3, [r7, #24]
	}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e002      	b.n	80046f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004702:	2101      	movs	r1, #1
 8004704:	69b8      	ldr	r0, [r7, #24]
 8004706:	f7ff fecb 	bl	80044a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00e      	beq.n	800473e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004732:	2300      	movs	r3, #0
 8004734:	2200      	movs	r2, #0
 8004736:	2100      	movs	r1, #0
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f837 	bl	80047ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	4603      	mov	r3, r0
 800474e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004750:	2301      	movs	r3, #1
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	461a      	mov	r2, r3
 800475c:	6939      	ldr	r1, [r7, #16]
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff79 	bl	8004656 <xQueueGenericCreate>
 8004764:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff ffd3 	bl	8004712 <prvInitialiseMutex>

		return xNewQueue;
 800476c:	68fb      	ldr	r3, [r7, #12]
	}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004776:	b580      	push	{r7, lr}
 8004778:	b088      	sub	sp, #32
 800477a:	af02      	add	r7, sp, #8
 800477c:	4603      	mov	r3, r0
 800477e:	6039      	str	r1, [r7, #0]
 8004780:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004782:	2301      	movs	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	2300      	movs	r3, #0
 8004788:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2200      	movs	r2, #0
 8004792:	6939      	ldr	r1, [r7, #16]
 8004794:	6978      	ldr	r0, [r7, #20]
 8004796:	f7ff feeb 	bl	8004570 <xQueueGenericCreateStatic>
 800479a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff ffb8 	bl	8004712 <prvInitialiseMutex>

		return xNewQueue;
 80047a2:	68fb      	ldr	r3, [r7, #12]
	}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08e      	sub	sp, #56	; 0x38
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047ba:	2300      	movs	r3, #0
 80047bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <xQueueGenericSend+0x30>
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047da:	e7fe      	b.n	80047da <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <xQueueGenericSend+0x3e>
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <xQueueGenericSend+0x42>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <xQueueGenericSend+0x44>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <xQueueGenericSend+0x5c>
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
 8004806:	e7fe      	b.n	8004806 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d103      	bne.n	8004816 <xQueueGenericSend+0x6a>
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <xQueueGenericSend+0x6e>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <xQueueGenericSend+0x70>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <xQueueGenericSend+0x88>
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	e7fe      	b.n	8004832 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004834:	f001 fbbc 	bl	8005fb0 <xTaskGetSchedulerState>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <xQueueGenericSend+0x98>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <xQueueGenericSend+0x9c>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <xQueueGenericSend+0x9e>
 8004848:	2300      	movs	r3, #0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <xQueueGenericSend+0xb6>
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	e7fe      	b.n	8004860 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004862:	f001 ff03 	bl	800666c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <xQueueGenericSend+0xcc>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d129      	bne.n	80048cc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800487e:	f000 fc82 	bl	8005186 <prvCopyDataToQueue>
 8004882:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	d010      	beq.n	80048ae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	3324      	adds	r3, #36	; 0x24
 8004890:	4618      	mov	r0, r3
 8004892:	f001 f9d7 	bl	8005c44 <xTaskRemoveFromEventList>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800489c:	4b3f      	ldr	r3, [pc, #252]	; (800499c <xQueueGenericSend+0x1f0>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	e00a      	b.n	80048c4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048b4:	4b39      	ldr	r3, [pc, #228]	; (800499c <xQueueGenericSend+0x1f0>)
 80048b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048c4:	f001 ff00 	bl	80066c8 <vPortExitCritical>
				return pdPASS;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e063      	b.n	8004994 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048d2:	f001 fef9 	bl	80066c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e05c      	b.n	8004994 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 fa0f 	bl	8005d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048ea:	2301      	movs	r3, #1
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048ee:	f001 feeb 	bl	80066c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048f2:	f000 ffa5 	bl	8005840 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048f6:	f001 feb9 	bl	800666c <vPortEnterCritical>
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004900:	b25b      	sxtb	r3, r3
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d103      	bne.n	8004910 <xQueueGenericSend+0x164>
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004916:	b25b      	sxtb	r3, r3
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d103      	bne.n	8004926 <xQueueGenericSend+0x17a>
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004926:	f001 fecf 	bl	80066c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800492a:	1d3a      	adds	r2, r7, #4
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f001 f9fe 	bl	8005d34 <xTaskCheckForTimeOut>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d124      	bne.n	8004988 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800493e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004940:	f000 fd19 	bl	8005376 <prvIsQueueFull>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d018      	beq.n	800497c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	3310      	adds	r3, #16
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4611      	mov	r1, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f001 f952 	bl	8005bfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800495a:	f000 fca4 	bl	80052a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800495e:	f000 ff7d 	bl	800585c <xTaskResumeAll>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	f47f af7c 	bne.w	8004862 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800496a:	4b0c      	ldr	r3, [pc, #48]	; (800499c <xQueueGenericSend+0x1f0>)
 800496c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	e772      	b.n	8004862 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800497c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800497e:	f000 fc92 	bl	80052a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004982:	f000 ff6b 	bl	800585c <xTaskResumeAll>
 8004986:	e76c      	b.n	8004862 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800498a:	f000 fc8c 	bl	80052a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800498e:	f000 ff65 	bl	800585c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004992:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004994:	4618      	mov	r0, r3
 8004996:	3738      	adds	r7, #56	; 0x38
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	e000ed04 	.word	0xe000ed04

080049a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08e      	sub	sp, #56	; 0x38
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <xQueueGenericSendFromISR+0x2c>
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ca:	e7fe      	b.n	80049ca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <xQueueGenericSendFromISR+0x3a>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <xQueueGenericSendFromISR+0x3e>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueGenericSendFromISR+0x40>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <xQueueGenericSendFromISR+0x58>
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	623b      	str	r3, [r7, #32]
 80049f6:	e7fe      	b.n	80049f6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d103      	bne.n	8004a06 <xQueueGenericSendFromISR+0x66>
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <xQueueGenericSendFromISR+0x6a>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <xQueueGenericSendFromISR+0x6c>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <xQueueGenericSendFromISR+0x84>
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	e7fe      	b.n	8004a22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a24:	f001 fefe 	bl	8006824 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a28:	f3ef 8211 	mrs	r2, BASEPRI
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	61ba      	str	r2, [r7, #24]
 8004a3e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <xQueueGenericSendFromISR+0xb6>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d12c      	bne.n	8004ab0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a66:	f000 fb8e 	bl	8005186 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d112      	bne.n	8004a9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d016      	beq.n	8004aaa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	3324      	adds	r3, #36	; 0x24
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 f8df 	bl	8005c44 <xTaskRemoveFromEventList>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e007      	b.n	8004aaa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	b25a      	sxtb	r2, r3
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004aae:	e001      	b.n	8004ab4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3738      	adds	r7, #56	; 0x38
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08e      	sub	sp, #56	; 0x38
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <xQueueGiveFromISR+0x28>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	623b      	str	r3, [r7, #32]
 8004aee:	e7fe      	b.n	8004aee <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <xQueueGiveFromISR+0x44>
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e7fe      	b.n	8004b0a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d103      	bne.n	8004b1c <xQueueGiveFromISR+0x54>
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <xQueueGiveFromISR+0x58>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <xQueueGiveFromISR+0x5a>
 8004b20:	2300      	movs	r3, #0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <xQueueGiveFromISR+0x72>
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e7fe      	b.n	8004b38 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b3a:	f001 fe73 	bl	8006824 <vPortValidateInterruptPriority>
	__asm volatile
 8004b3e:	f3ef 8211 	mrs	r2, BASEPRI
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	617a      	str	r2, [r7, #20]
 8004b54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004b56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d22b      	bcs.n	8004bc2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d112      	bne.n	8004bac <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	3324      	adds	r3, #36	; 0x24
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 f856 	bl	8005c44 <xTaskRemoveFromEventList>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00e      	beq.n	8004bbc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e007      	b.n	8004bbc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	b25a      	sxtb	r2, r3
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc0:	e001      	b.n	8004bc6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3738      	adds	r7, #56	; 0x38
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <xQueueReceive+0x2e>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	623b      	str	r3, [r7, #32]
 8004c08:	e7fe      	b.n	8004c08 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d103      	bne.n	8004c18 <xQueueReceive+0x3c>
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <xQueueReceive+0x40>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <xQueueReceive+0x42>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <xQueueReceive+0x5a>
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e7fe      	b.n	8004c34 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c36:	f001 f9bb 	bl	8005fb0 <xTaskGetSchedulerState>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <xQueueReceive+0x6a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <xQueueReceive+0x6e>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <xQueueReceive+0x70>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <xQueueReceive+0x88>
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e7fe      	b.n	8004c62 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c64:	f001 fd02 	bl	800666c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01f      	beq.n	8004cb4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c78:	f000 faef 	bl	800525a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	1e5a      	subs	r2, r3, #1
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00f      	beq.n	8004cac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	3310      	adds	r3, #16
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 ffd7 	bl	8005c44 <xTaskRemoveFromEventList>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c9c:	4b3c      	ldr	r3, [pc, #240]	; (8004d90 <xQueueReceive+0x1b4>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cac:	f001 fd0c 	bl	80066c8 <vPortExitCritical>
				return pdPASS;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e069      	b.n	8004d88 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cba:	f001 fd05 	bl	80066c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e062      	b.n	8004d88 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cc8:	f107 0310 	add.w	r3, r7, #16
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 f81b 	bl	8005d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cd6:	f001 fcf7 	bl	80066c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cda:	f000 fdb1 	bl	8005840 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cde:	f001 fcc5 	bl	800666c <vPortEnterCritical>
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ce8:	b25b      	sxtb	r3, r3
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d103      	bne.n	8004cf8 <xQueueReceive+0x11c>
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cfe:	b25b      	sxtb	r3, r3
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d103      	bne.n	8004d0e <xQueueReceive+0x132>
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0e:	f001 fcdb 	bl	80066c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d12:	1d3a      	adds	r2, r7, #4
 8004d14:	f107 0310 	add.w	r3, r7, #16
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 f80a 	bl	8005d34 <xTaskCheckForTimeOut>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d123      	bne.n	8004d6e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d28:	f000 fb0f 	bl	800534a <prvIsQueueEmpty>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d017      	beq.n	8004d62 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	3324      	adds	r3, #36	; 0x24
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 ff5e 	bl	8005bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d42:	f000 fab0 	bl	80052a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d46:	f000 fd89 	bl	800585c <xTaskResumeAll>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d189      	bne.n	8004c64 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004d50:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <xQueueReceive+0x1b4>)
 8004d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	e780      	b.n	8004c64 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d64:	f000 fa9f 	bl	80052a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d68:	f000 fd78 	bl	800585c <xTaskResumeAll>
 8004d6c:	e77a      	b.n	8004c64 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d70:	f000 fa99 	bl	80052a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d74:	f000 fd72 	bl	800585c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d7a:	f000 fae6 	bl	800534a <prvIsQueueEmpty>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f43f af6f 	beq.w	8004c64 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3730      	adds	r7, #48	; 0x30
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	; 0x38
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <xQueueSemaphoreTake+0x30>
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	623b      	str	r3, [r7, #32]
 8004dc2:	e7fe      	b.n	8004dc2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <xQueueSemaphoreTake+0x4c>
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e7fe      	b.n	8004dde <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004de0:	f001 f8e6 	bl	8005fb0 <xTaskGetSchedulerState>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <xQueueSemaphoreTake+0x5c>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <xQueueSemaphoreTake+0x60>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <xQueueSemaphoreTake+0x62>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <xQueueSemaphoreTake+0x7a>
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	e7fe      	b.n	8004e0c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e0e:	f001 fc2d 	bl	800666c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d024      	beq.n	8004e68 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	1e5a      	subs	r2, r3, #1
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d104      	bne.n	8004e38 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004e2e:	f001 fa79 	bl	8006324 <pvTaskIncrementMutexHeldCount>
 8004e32:	4602      	mov	r2, r0
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00f      	beq.n	8004e60 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	3310      	adds	r3, #16
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fefd 	bl	8005c44 <xTaskRemoveFromEventList>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e50:	4b53      	ldr	r3, [pc, #332]	; (8004fa0 <xQueueSemaphoreTake+0x20c>)
 8004e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e60:	f001 fc32 	bl	80066c8 <vPortExitCritical>
				return pdPASS;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e096      	b.n	8004f96 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d110      	bne.n	8004e90 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <xQueueSemaphoreTake+0xf4>
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e7fe      	b.n	8004e86 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e88:	f001 fc1e 	bl	80066c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e082      	b.n	8004f96 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e96:	f107 030c 	add.w	r3, r7, #12
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 ff34 	bl	8005d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ea4:	f001 fc10 	bl	80066c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ea8:	f000 fcca 	bl	8005840 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eac:	f001 fbde 	bl	800666c <vPortEnterCritical>
 8004eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb6:	b25b      	sxtb	r3, r3
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d103      	bne.n	8004ec6 <xQueueSemaphoreTake+0x132>
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ecc:	b25b      	sxtb	r3, r3
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d103      	bne.n	8004edc <xQueueSemaphoreTake+0x148>
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004edc:	f001 fbf4 	bl	80066c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ee0:	463a      	mov	r2, r7
 8004ee2:	f107 030c 	add.w	r3, r7, #12
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 ff23 	bl	8005d34 <xTaskCheckForTimeOut>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d132      	bne.n	8004f5a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ef6:	f000 fa28 	bl	800534a <prvIsQueueEmpty>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d026      	beq.n	8004f4e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d109      	bne.n	8004f1c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004f08:	f001 fbb0 	bl	800666c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 f86b 	bl	8005fec <xTaskPriorityInherit>
 8004f16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004f18:	f001 fbd6 	bl	80066c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1e:	3324      	adds	r3, #36	; 0x24
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fe69 	bl	8005bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f2c:	f000 f9bb 	bl	80052a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f30:	f000 fc94 	bl	800585c <xTaskResumeAll>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f47f af69 	bne.w	8004e0e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004f3c:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <xQueueSemaphoreTake+0x20c>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	e75f      	b.n	8004e0e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f50:	f000 f9a9 	bl	80052a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f54:	f000 fc82 	bl	800585c <xTaskResumeAll>
 8004f58:	e759      	b.n	8004e0e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f5c:	f000 f9a3 	bl	80052a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f60:	f000 fc7c 	bl	800585c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f66:	f000 f9f0 	bl	800534a <prvIsQueueEmpty>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f43f af4e 	beq.w	8004e0e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00d      	beq.n	8004f94 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004f78:	f001 fb78 	bl	800666c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f7e:	f000 f8ea 	bl	8005156 <prvGetDisinheritPriorityAfterTimeout>
 8004f82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 f932 	bl	80061f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f90:	f001 fb9a 	bl	80066c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3738      	adds	r7, #56	; 0x38
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08e      	sub	sp, #56	; 0x38
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <xQueueReceiveFromISR+0x2a>
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	e7fe      	b.n	8004fcc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d103      	bne.n	8004fdc <xQueueReceiveFromISR+0x38>
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <xQueueReceiveFromISR+0x3c>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <xQueueReceiveFromISR+0x3e>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <xQueueReceiveFromISR+0x56>
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ffa:	f001 fc13 	bl	8006824 <vPortValidateInterruptPriority>
	__asm volatile
 8004ffe:	f3ef 8211 	mrs	r2, BASEPRI
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	61ba      	str	r2, [r7, #24]
 8005014:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005016:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02f      	beq.n	8005086 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800502c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005034:	f000 f911 	bl	800525a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005040:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d112      	bne.n	8005070 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	3310      	adds	r3, #16
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fdf4 	bl	8005c44 <xTaskRemoveFromEventList>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00e      	beq.n	8005080 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	e007      	b.n	8005080 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005074:	3301      	adds	r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	b25a      	sxtb	r2, r3
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005080:	2301      	movs	r3, #1
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
 8005084:	e001      	b.n	800508a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005086:	2300      	movs	r3, #0
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005096:	4618      	mov	r0, r3
 8005098:	3738      	adds	r7, #56	; 0x38
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	e7fe      	b.n	80050be <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80050c0:	f001 fad4 	bl	800666c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80050ca:	f001 fafd 	bl	80066c8 <vPortExitCritical>

	return uxReturn;
 80050ce:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <uxQueueMessagesWaitingFromISR+0x26>
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e7fe      	b.n	80050fc <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005104:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005106:	4618      	mov	r0, r3
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <vQueueDelete+0x26>
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	e7fe      	b.n	8005136 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f935 	bl	80053a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f001 fc6b 	bl	8006a24 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f1c3 0307 	rsb	r3, r3, #7
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	e001      	b.n	8005178 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005178:	68fb      	ldr	r3, [r7, #12]
	}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10d      	bne.n	80051c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d14d      	bne.n	8005248 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 ff9b 	bl	80060ec <xTaskPriorityDisinherit>
 80051b6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	609a      	str	r2, [r3, #8]
 80051be:	e043      	b.n	8005248 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d119      	bne.n	80051fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6858      	ldr	r0, [r3, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	461a      	mov	r2, r3
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	f00f f84e 	bl	8014272 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	441a      	add	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d32b      	bcc.n	8005248 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	605a      	str	r2, [r3, #4]
 80051f8:	e026      	b.n	8005248 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68d8      	ldr	r0, [r3, #12]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	461a      	mov	r2, r3
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	f00f f834 	bl	8014272 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	425b      	negs	r3, r3
 8005214:	441a      	add	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d207      	bcs.n	8005236 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	425b      	negs	r3, r3
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d105      	bne.n	8005248 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3b01      	subs	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005250:	697b      	ldr	r3, [r7, #20]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d018      	beq.n	800529e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	441a      	add	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	d303      	bcc.n	800528e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68d9      	ldr	r1, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	461a      	mov	r2, r3
 8005298:	6838      	ldr	r0, [r7, #0]
 800529a:	f00e ffea 	bl	8014272 <memcpy>
	}
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052ae:	f001 f9dd 	bl	800666c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052ba:	e011      	b.n	80052e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d012      	beq.n	80052ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3324      	adds	r3, #36	; 0x24
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fcbb 	bl	8005c44 <xTaskRemoveFromEventList>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052d4:	f000 fd8e 	bl	8005df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	3b01      	subs	r3, #1
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	dce9      	bgt.n	80052bc <prvUnlockQueue+0x16>
 80052e8:	e000      	b.n	80052ec <prvUnlockQueue+0x46>
					break;
 80052ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	22ff      	movs	r2, #255	; 0xff
 80052f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052f4:	f001 f9e8 	bl	80066c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052f8:	f001 f9b8 	bl	800666c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005302:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005304:	e011      	b.n	800532a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d012      	beq.n	8005334 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3310      	adds	r3, #16
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fc96 	bl	8005c44 <xTaskRemoveFromEventList>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800531e:	f000 fd69 	bl	8005df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005322:	7bbb      	ldrb	r3, [r7, #14]
 8005324:	3b01      	subs	r3, #1
 8005326:	b2db      	uxtb	r3, r3
 8005328:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800532a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800532e:	2b00      	cmp	r3, #0
 8005330:	dce9      	bgt.n	8005306 <prvUnlockQueue+0x60>
 8005332:	e000      	b.n	8005336 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005334:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	22ff      	movs	r2, #255	; 0xff
 800533a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800533e:	f001 f9c3 	bl	80066c8 <vPortExitCritical>
}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005352:	f001 f98b 	bl	800666c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800535e:	2301      	movs	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e001      	b.n	8005368 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005368:	f001 f9ae 	bl	80066c8 <vPortExitCritical>

	return xReturn;
 800536c:	68fb      	ldr	r3, [r7, #12]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800537e:	f001 f975 	bl	800666c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	429a      	cmp	r2, r3
 800538c:	d102      	bne.n	8005394 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800538e:	2301      	movs	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	e001      	b.n	8005398 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005398:	f001 f996 	bl	80066c8 <vPortExitCritical>

	return xReturn;
 800539c:	68fb      	ldr	r3, [r7, #12]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e016      	b.n	80053e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80053b6:	4a10      	ldr	r2, [pc, #64]	; (80053f8 <vQueueUnregisterQueue+0x50>)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4413      	add	r3, r2
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d10b      	bne.n	80053de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80053c6:	4a0c      	ldr	r2, [pc, #48]	; (80053f8 <vQueueUnregisterQueue+0x50>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2100      	movs	r1, #0
 80053cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80053d0:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <vQueueUnregisterQueue+0x50>)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4413      	add	r3, r2
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]
				break;
 80053dc:	e005      	b.n	80053ea <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3301      	adds	r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b07      	cmp	r3, #7
 80053e8:	d9e5      	bls.n	80053b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20007564 	.word	0x20007564

080053fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08e      	sub	sp, #56	; 0x38
 8005400:	af04      	add	r7, sp, #16
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800540a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <xTaskCreateStatic+0x28>
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	e7fe      	b.n	8005422 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <xTaskCreateStatic+0x42>
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	e7fe      	b.n	800543c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800543e:	2354      	movs	r3, #84	; 0x54
 8005440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b54      	cmp	r3, #84	; 0x54
 8005446:	d009      	beq.n	800545c <xTaskCreateStatic+0x60>
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e7fe      	b.n	800545a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800545c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01e      	beq.n	80054a2 <xTaskCreateStatic+0xa6>
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01b      	beq.n	80054a2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005472:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800547c:	2300      	movs	r3, #0
 800547e:	9303      	str	r3, [sp, #12]
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	9302      	str	r3, [sp, #8]
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f850 	bl	800553a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800549a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800549c:	f000 f8d4 	bl	8005648 <prvAddNewTaskToReadyList>
 80054a0:	e001      	b.n	80054a6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054a6:	697b      	ldr	r3, [r7, #20]
	}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3728      	adds	r7, #40	; 0x28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af04      	add	r7, sp, #16
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 f9eb 	bl	80068a0 <pvPortMalloc>
 80054ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00e      	beq.n	80054f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054d2:	2054      	movs	r0, #84	; 0x54
 80054d4:	f001 f9e4 	bl	80068a0 <pvPortMalloc>
 80054d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
 80054e6:	e005      	b.n	80054f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054e8:	6978      	ldr	r0, [r7, #20]
 80054ea:	f001 fa9b 	bl	8006a24 <vPortFree>
 80054ee:	e001      	b.n	80054f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	2300      	movs	r3, #0
 8005506:	9303      	str	r3, [sp, #12]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	9302      	str	r3, [sp, #8]
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f80e 	bl	800553a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800551e:	69f8      	ldr	r0, [r7, #28]
 8005520:	f000 f892 	bl	8005648 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005524:	2301      	movs	r3, #1
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e002      	b.n	8005530 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295
 800552e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005530:	69bb      	ldr	r3, [r7, #24]
	}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005552:	3b01      	subs	r3, #1
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f023 0307 	bic.w	r3, r3, #7
 8005560:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <prvInitialiseNewTask+0x46>
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	e7fe      	b.n	800557e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d01f      	beq.n	80055c6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005586:	2300      	movs	r3, #0
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	e012      	b.n	80055b2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	7819      	ldrb	r1, [r3, #0]
 8005594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	3334      	adds	r3, #52	; 0x34
 800559c:	460a      	mov	r2, r1
 800559e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d006      	beq.n	80055ba <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	3301      	adds	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	2b0f      	cmp	r3, #15
 80055b6:	d9e9      	bls.n	800558c <prvInitialiseNewTask+0x52>
 80055b8:	e000      	b.n	80055bc <prvInitialiseNewTask+0x82>
			{
				break;
 80055ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055c4:	e003      	b.n	80055ce <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	2b06      	cmp	r3, #6
 80055d2:	d901      	bls.n	80055d8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055d4:	2306      	movs	r3, #6
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	2200      	movs	r2, #0
 80055e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	3304      	adds	r3, #4
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe fec1 	bl	8004376 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	3318      	adds	r3, #24
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fe febc 	bl	8004376 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005602:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	f1c3 0207 	rsb	r2, r3, #7
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005612:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	2200      	movs	r2, #0
 8005618:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	68f9      	ldr	r1, [r7, #12]
 8005626:	69b8      	ldr	r0, [r7, #24]
 8005628:	f000 fef6 	bl	8006418 <pxPortInitialiseStack>
 800562c:	4602      	mov	r2, r0
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800563e:	bf00      	nop
 8005640:	3720      	adds	r7, #32
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005650:	f001 f80c 	bl	800666c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005654:	4b2a      	ldr	r3, [pc, #168]	; (8005700 <prvAddNewTaskToReadyList+0xb8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	4a29      	ldr	r2, [pc, #164]	; (8005700 <prvAddNewTaskToReadyList+0xb8>)
 800565c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800565e:	4b29      	ldr	r3, [pc, #164]	; (8005704 <prvAddNewTaskToReadyList+0xbc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005666:	4a27      	ldr	r2, [pc, #156]	; (8005704 <prvAddNewTaskToReadyList+0xbc>)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800566c:	4b24      	ldr	r3, [pc, #144]	; (8005700 <prvAddNewTaskToReadyList+0xb8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d110      	bne.n	8005696 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005674:	f000 fbe2 	bl	8005e3c <prvInitialiseTaskLists>
 8005678:	e00d      	b.n	8005696 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800567a:	4b23      	ldr	r3, [pc, #140]	; (8005708 <prvAddNewTaskToReadyList+0xc0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005682:	4b20      	ldr	r3, [pc, #128]	; (8005704 <prvAddNewTaskToReadyList+0xbc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	429a      	cmp	r2, r3
 800568e:	d802      	bhi.n	8005696 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005690:	4a1c      	ldr	r2, [pc, #112]	; (8005704 <prvAddNewTaskToReadyList+0xbc>)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005696:	4b1d      	ldr	r3, [pc, #116]	; (800570c <prvAddNewTaskToReadyList+0xc4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3301      	adds	r3, #1
 800569c:	4a1b      	ldr	r2, [pc, #108]	; (800570c <prvAddNewTaskToReadyList+0xc4>)
 800569e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	2201      	movs	r2, #1
 80056a6:	409a      	lsls	r2, r3
 80056a8:	4b19      	ldr	r3, [pc, #100]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	4a18      	ldr	r2, [pc, #96]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4a15      	ldr	r2, [pc, #84]	; (8005714 <prvAddNewTaskToReadyList+0xcc>)
 80056c0:	441a      	add	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4619      	mov	r1, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	f7fe fe61 	bl	8004390 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056ce:	f000 fffb 	bl	80066c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <prvAddNewTaskToReadyList+0xc0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00e      	beq.n	80056f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056da:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <prvAddNewTaskToReadyList+0xbc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d207      	bcs.n	80056f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056e8:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <prvAddNewTaskToReadyList+0xd0>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	200005fc 	.word	0x200005fc
 8005704:	200004fc 	.word	0x200004fc
 8005708:	20000608 	.word	0x20000608
 800570c:	20000618 	.word	0x20000618
 8005710:	20000604 	.word	0x20000604
 8005714:	20000500 	.word	0x20000500
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d016      	beq.n	800575c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <vTaskDelay+0x60>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <vTaskDelay+0x2e>
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	e7fe      	b.n	8005748 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800574a:	f000 f879 	bl	8005840 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800574e:	2100      	movs	r1, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fdfb 	bl	800634c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005756:	f000 f881 	bl	800585c <xTaskResumeAll>
 800575a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005762:	4b07      	ldr	r3, [pc, #28]	; (8005780 <vTaskDelay+0x64>)
 8005764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000624 	.word	0x20000624
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005792:	463a      	mov	r2, r7
 8005794:	1d39      	adds	r1, r7, #4
 8005796:	f107 0308 	add.w	r3, r7, #8
 800579a:	4618      	mov	r0, r3
 800579c:	f7fa fee8 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	9202      	str	r2, [sp, #8]
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	2300      	movs	r3, #0
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	2300      	movs	r3, #0
 80057b0:	460a      	mov	r2, r1
 80057b2:	491d      	ldr	r1, [pc, #116]	; (8005828 <vTaskStartScheduler+0xa4>)
 80057b4:	481d      	ldr	r0, [pc, #116]	; (800582c <vTaskStartScheduler+0xa8>)
 80057b6:	f7ff fe21 	bl	80053fc <xTaskCreateStatic>
 80057ba:	4602      	mov	r2, r0
 80057bc:	4b1c      	ldr	r3, [pc, #112]	; (8005830 <vTaskStartScheduler+0xac>)
 80057be:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057c0:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <vTaskStartScheduler+0xac>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057c8:	2301      	movs	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	e001      	b.n	80057d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d115      	bne.n	8005804 <vTaskStartScheduler+0x80>
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <vTaskStartScheduler+0xb0>)
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295
 80057f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057f2:	4b11      	ldr	r3, [pc, #68]	; (8005838 <vTaskStartScheduler+0xb4>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057f8:	4b10      	ldr	r3, [pc, #64]	; (800583c <vTaskStartScheduler+0xb8>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057fe:	f000 fe97 	bl	8006530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005802:	e00d      	b.n	8005820 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d109      	bne.n	8005820 <vTaskStartScheduler+0x9c>
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	e7fe      	b.n	800581e <vTaskStartScheduler+0x9a>
}
 8005820:	bf00      	nop
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	08015304 	.word	0x08015304
 800582c:	08005e0d 	.word	0x08005e0d
 8005830:	20000620 	.word	0x20000620
 8005834:	2000061c 	.word	0x2000061c
 8005838:	20000608 	.word	0x20000608
 800583c:	20000600 	.word	0x20000600

08005840 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005844:	4b04      	ldr	r3, [pc, #16]	; (8005858 <vTaskSuspendAll+0x18>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3301      	adds	r3, #1
 800584a:	4a03      	ldr	r2, [pc, #12]	; (8005858 <vTaskSuspendAll+0x18>)
 800584c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800584e:	bf00      	nop
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	20000624 	.word	0x20000624

0800585c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005866:	2300      	movs	r3, #0
 8005868:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800586a:	4b41      	ldr	r3, [pc, #260]	; (8005970 <xTaskResumeAll+0x114>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <xTaskResumeAll+0x2a>
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	e7fe      	b.n	8005884 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005886:	f000 fef1 	bl	800666c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800588a:	4b39      	ldr	r3, [pc, #228]	; (8005970 <xTaskResumeAll+0x114>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3b01      	subs	r3, #1
 8005890:	4a37      	ldr	r2, [pc, #220]	; (8005970 <xTaskResumeAll+0x114>)
 8005892:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005894:	4b36      	ldr	r3, [pc, #216]	; (8005970 <xTaskResumeAll+0x114>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d161      	bne.n	8005960 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800589c:	4b35      	ldr	r3, [pc, #212]	; (8005974 <xTaskResumeAll+0x118>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d05d      	beq.n	8005960 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058a4:	e02e      	b.n	8005904 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a6:	4b34      	ldr	r3, [pc, #208]	; (8005978 <xTaskResumeAll+0x11c>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3318      	adds	r3, #24
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fe fdc9 	bl	800444a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fe fdc4 	bl	800444a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	2201      	movs	r2, #1
 80058c8:	409a      	lsls	r2, r3
 80058ca:	4b2c      	ldr	r3, [pc, #176]	; (800597c <xTaskResumeAll+0x120>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	4a2a      	ldr	r2, [pc, #168]	; (800597c <xTaskResumeAll+0x120>)
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4a27      	ldr	r2, [pc, #156]	; (8005980 <xTaskResumeAll+0x124>)
 80058e2:	441a      	add	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f7fe fd50 	bl	8004390 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	4b23      	ldr	r3, [pc, #140]	; (8005984 <xTaskResumeAll+0x128>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80058fe:	4b22      	ldr	r3, [pc, #136]	; (8005988 <xTaskResumeAll+0x12c>)
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005904:	4b1c      	ldr	r3, [pc, #112]	; (8005978 <xTaskResumeAll+0x11c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1cc      	bne.n	80058a6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005912:	f000 fb2d 	bl	8005f70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005916:	4b1d      	ldr	r3, [pc, #116]	; (800598c <xTaskResumeAll+0x130>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d010      	beq.n	8005944 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005922:	f000 f859 	bl	80059d8 <xTaskIncrementTick>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800592c:	4b16      	ldr	r3, [pc, #88]	; (8005988 <xTaskResumeAll+0x12c>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3b01      	subs	r3, #1
 8005936:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f1      	bne.n	8005922 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800593e:	4b13      	ldr	r3, [pc, #76]	; (800598c <xTaskResumeAll+0x130>)
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005944:	4b10      	ldr	r3, [pc, #64]	; (8005988 <xTaskResumeAll+0x12c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d009      	beq.n	8005960 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800594c:	2301      	movs	r3, #1
 800594e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005950:	4b0f      	ldr	r3, [pc, #60]	; (8005990 <xTaskResumeAll+0x134>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005960:	f000 feb2 	bl	80066c8 <vPortExitCritical>

	return xAlreadyYielded;
 8005964:	68bb      	ldr	r3, [r7, #8]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000624 	.word	0x20000624
 8005974:	200005fc 	.word	0x200005fc
 8005978:	200005bc 	.word	0x200005bc
 800597c:	20000604 	.word	0x20000604
 8005980:	20000500 	.word	0x20000500
 8005984:	200004fc 	.word	0x200004fc
 8005988:	20000610 	.word	0x20000610
 800598c:	2000060c 	.word	0x2000060c
 8005990:	e000ed04 	.word	0xe000ed04

08005994 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <xTaskGetTickCount+0x1c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059a0:	687b      	ldr	r3, [r7, #4]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000600 	.word	0x20000600

080059b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059ba:	f000 ff33 	bl	8006824 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80059be:	2300      	movs	r3, #0
 80059c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80059c2:	4b04      	ldr	r3, [pc, #16]	; (80059d4 <xTaskGetTickCountFromISR+0x20>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059c8:	683b      	ldr	r3, [r7, #0]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000600 	.word	0x20000600

080059d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059e2:	4b4e      	ldr	r3, [pc, #312]	; (8005b1c <xTaskIncrementTick+0x144>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f040 8087 	bne.w	8005afa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059ec:	4b4c      	ldr	r3, [pc, #304]	; (8005b20 <xTaskIncrementTick+0x148>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059f4:	4a4a      	ldr	r2, [pc, #296]	; (8005b20 <xTaskIncrementTick+0x148>)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d11f      	bne.n	8005a40 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a00:	4b48      	ldr	r3, [pc, #288]	; (8005b24 <xTaskIncrementTick+0x14c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <xTaskIncrementTick+0x46>
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	e7fe      	b.n	8005a1c <xTaskIncrementTick+0x44>
 8005a1e:	4b41      	ldr	r3, [pc, #260]	; (8005b24 <xTaskIncrementTick+0x14c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	4b40      	ldr	r3, [pc, #256]	; (8005b28 <xTaskIncrementTick+0x150>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a3e      	ldr	r2, [pc, #248]	; (8005b24 <xTaskIncrementTick+0x14c>)
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	4a3e      	ldr	r2, [pc, #248]	; (8005b28 <xTaskIncrementTick+0x150>)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	4b3e      	ldr	r3, [pc, #248]	; (8005b2c <xTaskIncrementTick+0x154>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a3c      	ldr	r2, [pc, #240]	; (8005b2c <xTaskIncrementTick+0x154>)
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	f000 fa98 	bl	8005f70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a40:	4b3b      	ldr	r3, [pc, #236]	; (8005b30 <xTaskIncrementTick+0x158>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d348      	bcc.n	8005adc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a4a:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <xTaskIncrementTick+0x14c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a54:	4b36      	ldr	r3, [pc, #216]	; (8005b30 <xTaskIncrementTick+0x158>)
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	601a      	str	r2, [r3, #0]
					break;
 8005a5c:	e03e      	b.n	8005adc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a5e:	4b31      	ldr	r3, [pc, #196]	; (8005b24 <xTaskIncrementTick+0x14c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d203      	bcs.n	8005a7e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a76:	4a2e      	ldr	r2, [pc, #184]	; (8005b30 <xTaskIncrementTick+0x158>)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a7c:	e02e      	b.n	8005adc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fce1 	bl	800444a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	3318      	adds	r3, #24
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe fcd8 	bl	800444a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	409a      	lsls	r2, r3
 8005aa2:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <xTaskIncrementTick+0x15c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	4a22      	ldr	r2, [pc, #136]	; (8005b34 <xTaskIncrementTick+0x15c>)
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4a1f      	ldr	r2, [pc, #124]	; (8005b38 <xTaskIncrementTick+0x160>)
 8005aba:	441a      	add	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f7fe fc64 	bl	8004390 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	4b1b      	ldr	r3, [pc, #108]	; (8005b3c <xTaskIncrementTick+0x164>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d3b9      	bcc.n	8005a4a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ada:	e7b6      	b.n	8005a4a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005adc:	4b17      	ldr	r3, [pc, #92]	; (8005b3c <xTaskIncrementTick+0x164>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae2:	4915      	ldr	r1, [pc, #84]	; (8005b38 <xTaskIncrementTick+0x160>)
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d907      	bls.n	8005b04 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	e004      	b.n	8005b04 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005afa:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <xTaskIncrementTick+0x168>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3301      	adds	r3, #1
 8005b00:	4a0f      	ldr	r2, [pc, #60]	; (8005b40 <xTaskIncrementTick+0x168>)
 8005b02:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b04:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <xTaskIncrementTick+0x16c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b10:	697b      	ldr	r3, [r7, #20]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000624 	.word	0x20000624
 8005b20:	20000600 	.word	0x20000600
 8005b24:	200005b4 	.word	0x200005b4
 8005b28:	200005b8 	.word	0x200005b8
 8005b2c:	20000614 	.word	0x20000614
 8005b30:	2000061c 	.word	0x2000061c
 8005b34:	20000604 	.word	0x20000604
 8005b38:	20000500 	.word	0x20000500
 8005b3c:	200004fc 	.word	0x200004fc
 8005b40:	2000060c 	.word	0x2000060c
 8005b44:	20000610 	.word	0x20000610

08005b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b4e:	4b26      	ldr	r3, [pc, #152]	; (8005be8 <vTaskSwitchContext+0xa0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b56:	4b25      	ldr	r3, [pc, #148]	; (8005bec <vTaskSwitchContext+0xa4>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b5c:	e03e      	b.n	8005bdc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005b5e:	4b23      	ldr	r3, [pc, #140]	; (8005bec <vTaskSwitchContext+0xa4>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b64:	4b22      	ldr	r3, [pc, #136]	; (8005bf0 <vTaskSwitchContext+0xa8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	fab3 f383 	clz	r3, r3
 8005b70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b72:	7afb      	ldrb	r3, [r7, #11]
 8005b74:	f1c3 031f 	rsb	r3, r3, #31
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	491e      	ldr	r1, [pc, #120]	; (8005bf4 <vTaskSwitchContext+0xac>)
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d109      	bne.n	8005ba2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	607b      	str	r3, [r7, #4]
 8005ba0:	e7fe      	b.n	8005ba0 <vTaskSwitchContext+0x58>
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4a11      	ldr	r2, [pc, #68]	; (8005bf4 <vTaskSwitchContext+0xac>)
 8005bae:	4413      	add	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	605a      	str	r2, [r3, #4]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d104      	bne.n	8005bd2 <vTaskSwitchContext+0x8a>
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	4a07      	ldr	r2, [pc, #28]	; (8005bf8 <vTaskSwitchContext+0xb0>)
 8005bda:	6013      	str	r3, [r2, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	20000624 	.word	0x20000624
 8005bec:	20000610 	.word	0x20000610
 8005bf0:	20000604 	.word	0x20000604
 8005bf4:	20000500 	.word	0x20000500
 8005bf8:	200004fc 	.word	0x200004fc

08005bfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d109      	bne.n	8005c20 <vTaskPlaceOnEventList+0x24>
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e7fe      	b.n	8005c1e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <vTaskPlaceOnEventList+0x44>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3318      	adds	r3, #24
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7fe fbd5 	bl	80043d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c2e:	2101      	movs	r1, #1
 8005c30:	6838      	ldr	r0, [r7, #0]
 8005c32:	f000 fb8b 	bl	800634c <prvAddCurrentTaskToDelayedList>
}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	200004fc 	.word	0x200004fc

08005c44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <xTaskRemoveFromEventList+0x2a>
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	e7fe      	b.n	8005c6c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3318      	adds	r3, #24
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fe fbe9 	bl	800444a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c78:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <xTaskRemoveFromEventList+0xac>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d11c      	bne.n	8005cba <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	3304      	adds	r3, #4
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe fbe0 	bl	800444a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8e:	2201      	movs	r2, #1
 8005c90:	409a      	lsls	r2, r3
 8005c92:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <xTaskRemoveFromEventList+0xb0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	4a16      	ldr	r2, [pc, #88]	; (8005cf4 <xTaskRemoveFromEventList+0xb0>)
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <xTaskRemoveFromEventList+0xb4>)
 8005caa:	441a      	add	r2, r3
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f7fe fb6c 	bl	8004390 <vListInsertEnd>
 8005cb8:	e005      	b.n	8005cc6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	3318      	adds	r3, #24
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	480e      	ldr	r0, [pc, #56]	; (8005cfc <xTaskRemoveFromEventList+0xb8>)
 8005cc2:	f7fe fb65 	bl	8004390 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <xTaskRemoveFromEventList+0xbc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d905      	bls.n	8005ce0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <xTaskRemoveFromEventList+0xc0>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e001      	b.n	8005ce4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ce4:	697b      	ldr	r3, [r7, #20]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000624 	.word	0x20000624
 8005cf4:	20000604 	.word	0x20000604
 8005cf8:	20000500 	.word	0x20000500
 8005cfc:	200005bc 	.word	0x200005bc
 8005d00:	200004fc 	.word	0x200004fc
 8005d04:	20000610 	.word	0x20000610

08005d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d10:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <vTaskInternalSetTimeOutState+0x24>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d18:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <vTaskInternalSetTimeOutState+0x28>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	605a      	str	r2, [r3, #4]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	20000614 	.word	0x20000614
 8005d30:	20000600 	.word	0x20000600

08005d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d109      	bne.n	8005d58 <xTaskCheckForTimeOut+0x24>
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	e7fe      	b.n	8005d56 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d109      	bne.n	8005d72 <xTaskCheckForTimeOut+0x3e>
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	e7fe      	b.n	8005d70 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005d72:	f000 fc7b 	bl	800666c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d76:	4b1d      	ldr	r3, [pc, #116]	; (8005dec <xTaskCheckForTimeOut+0xb8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d102      	bne.n	8005d96 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	61fb      	str	r3, [r7, #28]
 8005d94:	e023      	b.n	8005dde <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <xTaskCheckForTimeOut+0xbc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d007      	beq.n	8005db2 <xTaskCheckForTimeOut+0x7e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d302      	bcc.n	8005db2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	e015      	b.n	8005dde <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d20b      	bcs.n	8005dd4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	1ad2      	subs	r2, r2, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff ff9d 	bl	8005d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	e004      	b.n	8005dde <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dde:	f000 fc73 	bl	80066c8 <vPortExitCritical>

	return xReturn;
 8005de2:	69fb      	ldr	r3, [r7, #28]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000600 	.word	0x20000600
 8005df0:	20000614 	.word	0x20000614

08005df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005df8:	4b03      	ldr	r3, [pc, #12]	; (8005e08 <vTaskMissedYield+0x14>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	20000610 	.word	0x20000610

08005e0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e14:	f000 f852 	bl	8005ebc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <prvIdleTask+0x28>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d9f9      	bls.n	8005e14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <prvIdleTask+0x2c>)
 8005e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e30:	e7f0      	b.n	8005e14 <prvIdleTask+0x8>
 8005e32:	bf00      	nop
 8005e34:	20000500 	.word	0x20000500
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e42:	2300      	movs	r3, #0
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	e00c      	b.n	8005e62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4a12      	ldr	r2, [pc, #72]	; (8005e9c <prvInitialiseTaskLists+0x60>)
 8005e54:	4413      	add	r3, r2
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fe fa6d 	bl	8004336 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b06      	cmp	r3, #6
 8005e66:	d9ef      	bls.n	8005e48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e68:	480d      	ldr	r0, [pc, #52]	; (8005ea0 <prvInitialiseTaskLists+0x64>)
 8005e6a:	f7fe fa64 	bl	8004336 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e6e:	480d      	ldr	r0, [pc, #52]	; (8005ea4 <prvInitialiseTaskLists+0x68>)
 8005e70:	f7fe fa61 	bl	8004336 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e74:	480c      	ldr	r0, [pc, #48]	; (8005ea8 <prvInitialiseTaskLists+0x6c>)
 8005e76:	f7fe fa5e 	bl	8004336 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e7a:	480c      	ldr	r0, [pc, #48]	; (8005eac <prvInitialiseTaskLists+0x70>)
 8005e7c:	f7fe fa5b 	bl	8004336 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e80:	480b      	ldr	r0, [pc, #44]	; (8005eb0 <prvInitialiseTaskLists+0x74>)
 8005e82:	f7fe fa58 	bl	8004336 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <prvInitialiseTaskLists+0x78>)
 8005e88:	4a05      	ldr	r2, [pc, #20]	; (8005ea0 <prvInitialiseTaskLists+0x64>)
 8005e8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <prvInitialiseTaskLists+0x7c>)
 8005e8e:	4a05      	ldr	r2, [pc, #20]	; (8005ea4 <prvInitialiseTaskLists+0x68>)
 8005e90:	601a      	str	r2, [r3, #0]
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20000500 	.word	0x20000500
 8005ea0:	2000058c 	.word	0x2000058c
 8005ea4:	200005a0 	.word	0x200005a0
 8005ea8:	200005bc 	.word	0x200005bc
 8005eac:	200005d0 	.word	0x200005d0
 8005eb0:	200005e8 	.word	0x200005e8
 8005eb4:	200005b4 	.word	0x200005b4
 8005eb8:	200005b8 	.word	0x200005b8

08005ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ec2:	e019      	b.n	8005ef8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ec4:	f000 fbd2 	bl	800666c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec8:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <prvCheckTasksWaitingTermination+0x4c>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe fab8 	bl	800444a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005eda:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <prvCheckTasksWaitingTermination+0x50>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <prvCheckTasksWaitingTermination+0x50>)
 8005ee2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <prvCheckTasksWaitingTermination+0x54>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <prvCheckTasksWaitingTermination+0x54>)
 8005eec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eee:	f000 fbeb 	bl	80066c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f80e 	bl	8005f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <prvCheckTasksWaitingTermination+0x54>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e1      	bne.n	8005ec4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	200005d0 	.word	0x200005d0
 8005f0c:	200005fc 	.word	0x200005fc
 8005f10:	200005e4 	.word	0x200005e4

08005f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d108      	bne.n	8005f38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fd7a 	bl	8006a24 <vPortFree>
				vPortFree( pxTCB );
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fd77 	bl	8006a24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f36:	e017      	b.n	8005f68 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d103      	bne.n	8005f4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fd6e 	bl	8006a24 <vPortFree>
	}
 8005f48:	e00e      	b.n	8005f68 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d009      	beq.n	8005f68 <prvDeleteTCB+0x54>
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e7fe      	b.n	8005f66 <prvDeleteTCB+0x52>
	}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <prvResetNextTaskUnblockTime+0x38>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f80:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <prvResetNextTaskUnblockTime+0x3c>)
 8005f82:	f04f 32ff 	mov.w	r2, #4294967295
 8005f86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f88:	e008      	b.n	8005f9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <prvResetNextTaskUnblockTime+0x38>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a04      	ldr	r2, [pc, #16]	; (8005fac <prvResetNextTaskUnblockTime+0x3c>)
 8005f9a:	6013      	str	r3, [r2, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	200005b4 	.word	0x200005b4
 8005fac:	2000061c 	.word	0x2000061c

08005fb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <xTaskGetSchedulerState+0x34>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	607b      	str	r3, [r7, #4]
 8005fc2:	e008      	b.n	8005fd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc4:	4b08      	ldr	r3, [pc, #32]	; (8005fe8 <xTaskGetSchedulerState+0x38>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	607b      	str	r3, [r7, #4]
 8005fd0:	e001      	b.n	8005fd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fd6:	687b      	ldr	r3, [r7, #4]
	}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	20000608 	.word	0x20000608
 8005fe8:	20000624 	.word	0x20000624

08005fec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d069      	beq.n	80060d6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	4b36      	ldr	r3, [pc, #216]	; (80060e0 <xTaskPriorityInherit+0xf4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	429a      	cmp	r2, r3
 800600e:	d259      	bcs.n	80060c4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	db06      	blt.n	8006026 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006018:	4b31      	ldr	r3, [pc, #196]	; (80060e0 <xTaskPriorityInherit+0xf4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	f1c3 0207 	rsb	r2, r3, #7
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6959      	ldr	r1, [r3, #20]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4a2b      	ldr	r2, [pc, #172]	; (80060e4 <xTaskPriorityInherit+0xf8>)
 8006038:	4413      	add	r3, r2
 800603a:	4299      	cmp	r1, r3
 800603c:	d13a      	bne.n	80060b4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	3304      	adds	r3, #4
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe fa01 	bl	800444a <uxListRemove>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d115      	bne.n	800607a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006052:	4924      	ldr	r1, [pc, #144]	; (80060e4 <xTaskPriorityInherit+0xf8>)
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <xTaskPriorityInherit+0x8e>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	2201      	movs	r2, #1
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	43da      	mvns	r2, r3
 8006070:	4b1d      	ldr	r3, [pc, #116]	; (80060e8 <xTaskPriorityInherit+0xfc>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4013      	ands	r3, r2
 8006076:	4a1c      	ldr	r2, [pc, #112]	; (80060e8 <xTaskPriorityInherit+0xfc>)
 8006078:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800607a:	4b19      	ldr	r3, [pc, #100]	; (80060e0 <xTaskPriorityInherit+0xf4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	2201      	movs	r2, #1
 800608a:	409a      	lsls	r2, r3
 800608c:	4b16      	ldr	r3, [pc, #88]	; (80060e8 <xTaskPriorityInherit+0xfc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4313      	orrs	r3, r2
 8006092:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <xTaskPriorityInherit+0xfc>)
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4a10      	ldr	r2, [pc, #64]	; (80060e4 <xTaskPriorityInherit+0xf8>)
 80060a4:	441a      	add	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f7fe f96f 	bl	8004390 <vListInsertEnd>
 80060b2:	e004      	b.n	80060be <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <xTaskPriorityInherit+0xf4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80060be:	2301      	movs	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	e008      	b.n	80060d6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <xTaskPriorityInherit+0xf4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d201      	bcs.n	80060d6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80060d2:	2301      	movs	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060d6:	68fb      	ldr	r3, [r7, #12]
	}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	200004fc 	.word	0x200004fc
 80060e4:	20000500 	.word	0x20000500
 80060e8:	20000604 	.word	0x20000604

080060ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d06c      	beq.n	80061dc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006102:	4b39      	ldr	r3, [pc, #228]	; (80061e8 <xTaskPriorityDisinherit+0xfc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	429a      	cmp	r2, r3
 800610a:	d009      	beq.n	8006120 <xTaskPriorityDisinherit+0x34>
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e7fe      	b.n	800611e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <xTaskPriorityDisinherit+0x50>
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60bb      	str	r3, [r7, #8]
 800613a:	e7fe      	b.n	800613a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006140:	1e5a      	subs	r2, r3, #1
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614e:	429a      	cmp	r2, r3
 8006150:	d044      	beq.n	80061dc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006156:	2b00      	cmp	r3, #0
 8006158:	d140      	bne.n	80061dc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3304      	adds	r3, #4
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe f973 	bl	800444a <uxListRemove>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d115      	bne.n	8006196 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616e:	491f      	ldr	r1, [pc, #124]	; (80061ec <xTaskPriorityDisinherit+0x100>)
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <xTaskPriorityDisinherit+0xaa>
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	2201      	movs	r2, #1
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	43da      	mvns	r2, r3
 800618c:	4b18      	ldr	r3, [pc, #96]	; (80061f0 <xTaskPriorityDisinherit+0x104>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4013      	ands	r3, r2
 8006192:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <xTaskPriorityDisinherit+0x104>)
 8006194:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	f1c3 0207 	rsb	r2, r3, #7
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	2201      	movs	r2, #1
 80061b0:	409a      	lsls	r2, r3
 80061b2:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <xTaskPriorityDisinherit+0x104>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	4a0d      	ldr	r2, [pc, #52]	; (80061f0 <xTaskPriorityDisinherit+0x104>)
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4a08      	ldr	r2, [pc, #32]	; (80061ec <xTaskPriorityDisinherit+0x100>)
 80061ca:	441a      	add	r2, r3
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4619      	mov	r1, r3
 80061d2:	4610      	mov	r0, r2
 80061d4:	f7fe f8dc 	bl	8004390 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061d8:	2301      	movs	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061dc:	697b      	ldr	r3, [r7, #20]
	}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	200004fc 	.word	0x200004fc
 80061ec:	20000500 	.word	0x20000500
 80061f0:	20000604 	.word	0x20000604

080061f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006202:	2301      	movs	r3, #1
 8006204:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8081 	beq.w	8006310 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e7fe      	b.n	8006228 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d902      	bls.n	800623a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	e002      	b.n	8006240 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	429a      	cmp	r2, r3
 8006248:	d062      	beq.n	8006310 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	429a      	cmp	r2, r3
 8006252:	d15d      	bne.n	8006310 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006254:	4b30      	ldr	r3, [pc, #192]	; (8006318 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	429a      	cmp	r2, r3
 800625c:	d109      	bne.n	8006272 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60bb      	str	r3, [r7, #8]
 8006270:	e7fe      	b.n	8006270 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	db04      	blt.n	8006290 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f1c3 0207 	rsb	r2, r3, #7
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	6959      	ldr	r1, [r3, #20]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4a1f      	ldr	r2, [pc, #124]	; (800631c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80062a0:	4413      	add	r3, r2
 80062a2:	4299      	cmp	r1, r3
 80062a4:	d134      	bne.n	8006310 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe f8cd 	bl	800444a <uxListRemove>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d115      	bne.n	80062e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ba:	4918      	ldr	r1, [pc, #96]	; (800631c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	2201      	movs	r2, #1
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	43da      	mvns	r2, r3
 80062d8:	4b11      	ldr	r3, [pc, #68]	; (8006320 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4013      	ands	r3, r2
 80062de:	4a10      	ldr	r2, [pc, #64]	; (8006320 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80062e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e6:	2201      	movs	r2, #1
 80062e8:	409a      	lsls	r2, r3
 80062ea:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	4a0b      	ldr	r2, [pc, #44]	; (8006320 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4a06      	ldr	r2, [pc, #24]	; (800631c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006302:	441a      	add	r2, r3
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	3304      	adds	r3, #4
 8006308:	4619      	mov	r1, r3
 800630a:	4610      	mov	r0, r2
 800630c:	f7fe f840 	bl	8004390 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006310:	bf00      	nop
 8006312:	3720      	adds	r7, #32
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	200004fc 	.word	0x200004fc
 800631c:	20000500 	.word	0x20000500
 8006320:	20000604 	.word	0x20000604

08006324 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <pvTaskIncrementMutexHeldCount+0x24>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <pvTaskIncrementMutexHeldCount+0x24>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006336:	3201      	adds	r2, #1
 8006338:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800633a:	4b03      	ldr	r3, [pc, #12]	; (8006348 <pvTaskIncrementMutexHeldCount+0x24>)
 800633c:	681b      	ldr	r3, [r3, #0]
	}
 800633e:	4618      	mov	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	200004fc 	.word	0x200004fc

0800634c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006356:	4b29      	ldr	r3, [pc, #164]	; (80063fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800635c:	4b28      	ldr	r3, [pc, #160]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3304      	adds	r3, #4
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe f871 	bl	800444a <uxListRemove>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800636e:	4b24      	ldr	r3, [pc, #144]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	2201      	movs	r2, #1
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	43da      	mvns	r2, r3
 800637c:	4b21      	ldr	r3, [pc, #132]	; (8006404 <prvAddCurrentTaskToDelayedList+0xb8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4013      	ands	r3, r2
 8006382:	4a20      	ldr	r2, [pc, #128]	; (8006404 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006384:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d10a      	bne.n	80063a4 <prvAddCurrentTaskToDelayedList+0x58>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006394:	4b1a      	ldr	r3, [pc, #104]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	481a      	ldr	r0, [pc, #104]	; (8006408 <prvAddCurrentTaskToDelayedList+0xbc>)
 800639e:	f7fd fff7 	bl	8004390 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063a2:	e026      	b.n	80063f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4413      	add	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063ac:	4b14      	ldr	r3, [pc, #80]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d209      	bcs.n	80063d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063bc:	4b13      	ldr	r3, [pc, #76]	; (800640c <prvAddCurrentTaskToDelayedList+0xc0>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f7fe f805 	bl	80043d8 <vListInsert>
}
 80063ce:	e010      	b.n	80063f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063d0:	4b0f      	ldr	r3, [pc, #60]	; (8006410 <prvAddCurrentTaskToDelayedList+0xc4>)
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3304      	adds	r3, #4
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f7fd fffb 	bl	80043d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063e2:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d202      	bcs.n	80063f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063ec:	4a09      	ldr	r2, [pc, #36]	; (8006414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6013      	str	r3, [r2, #0]
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000600 	.word	0x20000600
 8006400:	200004fc 	.word	0x200004fc
 8006404:	20000604 	.word	0x20000604
 8006408:	200005e8 	.word	0x200005e8
 800640c:	200005b8 	.word	0x200005b8
 8006410:	200005b4 	.word	0x200005b4
 8006414:	2000061c 	.word	0x2000061c

08006418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3b04      	subs	r3, #4
 8006428:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3b04      	subs	r3, #4
 8006436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f023 0201 	bic.w	r2, r3, #1
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3b04      	subs	r3, #4
 8006446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006448:	4a0c      	ldr	r2, [pc, #48]	; (800647c <pxPortInitialiseStack+0x64>)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3b14      	subs	r3, #20
 8006452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3b04      	subs	r3, #4
 800645e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f06f 0202 	mvn.w	r2, #2
 8006466:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3b20      	subs	r3, #32
 800646c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800646e:	68fb      	ldr	r3, [r7, #12]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	08006481 	.word	0x08006481

08006480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800648a:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <prvTaskExitError+0x50>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d009      	beq.n	80064a8 <prvTaskExitError+0x28>
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	e7fe      	b.n	80064a6 <prvTaskExitError+0x26>
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064ba:	bf00      	nop
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0fc      	beq.n	80064bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064c2:	bf00      	nop
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	2000000c 	.word	0x2000000c
	...

080064e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <pxCurrentTCBConst2>)
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	6808      	ldr	r0, [r1, #0]
 80064e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	f380 8809 	msr	PSP, r0
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f380 8811 	msr	BASEPRI, r0
 80064fa:	4770      	bx	lr
 80064fc:	f3af 8000 	nop.w

08006500 <pxCurrentTCBConst2>:
 8006500:	200004fc 	.word	0x200004fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006508:	4808      	ldr	r0, [pc, #32]	; (800652c <prvPortStartFirstTask+0x24>)
 800650a:	6800      	ldr	r0, [r0, #0]
 800650c:	6800      	ldr	r0, [r0, #0]
 800650e:	f380 8808 	msr	MSP, r0
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8814 	msr	CONTROL, r0
 800651a:	b662      	cpsie	i
 800651c:	b661      	cpsie	f
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	df00      	svc	0
 8006528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800652a:	bf00      	nop
 800652c:	e000ed08 	.word	0xe000ed08

08006530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006536:	4b44      	ldr	r3, [pc, #272]	; (8006648 <xPortStartScheduler+0x118>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a44      	ldr	r2, [pc, #272]	; (800664c <xPortStartScheduler+0x11c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d109      	bne.n	8006554 <xPortStartScheduler+0x24>
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	e7fe      	b.n	8006552 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006554:	4b3c      	ldr	r3, [pc, #240]	; (8006648 <xPortStartScheduler+0x118>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a3d      	ldr	r2, [pc, #244]	; (8006650 <xPortStartScheduler+0x120>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d109      	bne.n	8006572 <xPortStartScheduler+0x42>
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e7fe      	b.n	8006570 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006572:	4b38      	ldr	r3, [pc, #224]	; (8006654 <xPortStartScheduler+0x124>)
 8006574:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	22ff      	movs	r2, #255	; 0xff
 8006582:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006594:	b2da      	uxtb	r2, r3
 8006596:	4b30      	ldr	r3, [pc, #192]	; (8006658 <xPortStartScheduler+0x128>)
 8006598:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800659a:	4b30      	ldr	r3, [pc, #192]	; (800665c <xPortStartScheduler+0x12c>)
 800659c:	2207      	movs	r2, #7
 800659e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065a0:	e009      	b.n	80065b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80065a2:	4b2e      	ldr	r3, [pc, #184]	; (800665c <xPortStartScheduler+0x12c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	4a2c      	ldr	r2, [pc, #176]	; (800665c <xPortStartScheduler+0x12c>)
 80065aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	2b80      	cmp	r3, #128	; 0x80
 80065c0:	d0ef      	beq.n	80065a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065c2:	4b26      	ldr	r3, [pc, #152]	; (800665c <xPortStartScheduler+0x12c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f1c3 0307 	rsb	r3, r3, #7
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d009      	beq.n	80065e2 <xPortStartScheduler+0xb2>
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	60bb      	str	r3, [r7, #8]
 80065e0:	e7fe      	b.n	80065e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065e2:	4b1e      	ldr	r3, [pc, #120]	; (800665c <xPortStartScheduler+0x12c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	4a1c      	ldr	r2, [pc, #112]	; (800665c <xPortStartScheduler+0x12c>)
 80065ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065ec:	4b1b      	ldr	r3, [pc, #108]	; (800665c <xPortStartScheduler+0x12c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065f4:	4a19      	ldr	r2, [pc, #100]	; (800665c <xPortStartScheduler+0x12c>)
 80065f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006600:	4b17      	ldr	r3, [pc, #92]	; (8006660 <xPortStartScheduler+0x130>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a16      	ldr	r2, [pc, #88]	; (8006660 <xPortStartScheduler+0x130>)
 8006606:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800660a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800660c:	4b14      	ldr	r3, [pc, #80]	; (8006660 <xPortStartScheduler+0x130>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a13      	ldr	r2, [pc, #76]	; (8006660 <xPortStartScheduler+0x130>)
 8006612:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006616:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006618:	f000 f8d6 	bl	80067c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800661c:	4b11      	ldr	r3, [pc, #68]	; (8006664 <xPortStartScheduler+0x134>)
 800661e:	2200      	movs	r2, #0
 8006620:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006622:	f000 f8f5 	bl	8006810 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006626:	4b10      	ldr	r3, [pc, #64]	; (8006668 <xPortStartScheduler+0x138>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a0f      	ldr	r2, [pc, #60]	; (8006668 <xPortStartScheduler+0x138>)
 800662c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006630:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006632:	f7ff ff69 	bl	8006508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006636:	f7ff fa87 	bl	8005b48 <vTaskSwitchContext>
	prvTaskExitError();
 800663a:	f7ff ff21 	bl	8006480 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	e000ed00 	.word	0xe000ed00
 800664c:	410fc271 	.word	0x410fc271
 8006650:	410fc270 	.word	0x410fc270
 8006654:	e000e400 	.word	0xe000e400
 8006658:	20000628 	.word	0x20000628
 800665c:	2000062c 	.word	0x2000062c
 8006660:	e000ed20 	.word	0xe000ed20
 8006664:	2000000c 	.word	0x2000000c
 8006668:	e000ef34 	.word	0xe000ef34

0800666c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006684:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <vPortEnterCritical+0x54>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	4a0d      	ldr	r2, [pc, #52]	; (80066c0 <vPortEnterCritical+0x54>)
 800668c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800668e:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <vPortEnterCritical+0x54>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d10e      	bne.n	80066b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <vPortEnterCritical+0x58>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <vPortEnterCritical+0x48>
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	603b      	str	r3, [r7, #0]
 80066b2:	e7fe      	b.n	80066b2 <vPortEnterCritical+0x46>
	}
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	2000000c 	.word	0x2000000c
 80066c4:	e000ed04 	.word	0xe000ed04

080066c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <vPortExitCritical+0x4c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <vPortExitCritical+0x22>
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	e7fe      	b.n	80066e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <vPortExitCritical+0x4c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	4a08      	ldr	r2, [pc, #32]	; (8006714 <vPortExitCritical+0x4c>)
 80066f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066f4:	4b07      	ldr	r3, [pc, #28]	; (8006714 <vPortExitCritical+0x4c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <vPortExitCritical+0x3e>
 80066fc:	2300      	movs	r3, #0
 80066fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	2000000c 	.word	0x2000000c
	...

08006720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006720:	f3ef 8009 	mrs	r0, PSP
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	4b15      	ldr	r3, [pc, #84]	; (8006780 <pxCurrentTCBConst>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	f01e 0f10 	tst.w	lr, #16
 8006730:	bf08      	it	eq
 8006732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673a:	6010      	str	r0, [r2, #0]
 800673c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006744:	f380 8811 	msr	BASEPRI, r0
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f7ff f9fa 	bl	8005b48 <vTaskSwitchContext>
 8006754:	f04f 0000 	mov.w	r0, #0
 8006758:	f380 8811 	msr	BASEPRI, r0
 800675c:	bc09      	pop	{r0, r3}
 800675e:	6819      	ldr	r1, [r3, #0]
 8006760:	6808      	ldr	r0, [r1, #0]
 8006762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006766:	f01e 0f10 	tst.w	lr, #16
 800676a:	bf08      	it	eq
 800676c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006770:	f380 8809 	msr	PSP, r0
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	f3af 8000 	nop.w

08006780 <pxCurrentTCBConst>:
 8006780:	200004fc 	.word	0x200004fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop

08006788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067a0:	f7ff f91a 	bl	80059d8 <xTaskIncrementTick>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067aa:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <SysTick_Handler+0x3c>)
 80067ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067cc:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <vPortSetupTimerInterrupt+0x34>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <vPortSetupTimerInterrupt+0x38>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067d8:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <vPortSetupTimerInterrupt+0x3c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <vPortSetupTimerInterrupt+0x40>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	099b      	lsrs	r3, r3, #6
 80067e4:	4a09      	ldr	r2, [pc, #36]	; (800680c <vPortSetupTimerInterrupt+0x44>)
 80067e6:	3b01      	subs	r3, #1
 80067e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067ea:	4b04      	ldr	r3, [pc, #16]	; (80067fc <vPortSetupTimerInterrupt+0x34>)
 80067ec:	2207      	movs	r2, #7
 80067ee:	601a      	str	r2, [r3, #0]
}
 80067f0:	bf00      	nop
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	e000e010 	.word	0xe000e010
 8006800:	e000e018 	.word	0xe000e018
 8006804:	20000000 	.word	0x20000000
 8006808:	10624dd3 	.word	0x10624dd3
 800680c:	e000e014 	.word	0xe000e014

08006810 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006810:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006820 <vPortEnableVFP+0x10>
 8006814:	6801      	ldr	r1, [r0, #0]
 8006816:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800681a:	6001      	str	r1, [r0, #0]
 800681c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800681e:	bf00      	nop
 8006820:	e000ed88 	.word	0xe000ed88

08006824 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800682a:	f3ef 8305 	mrs	r3, IPSR
 800682e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b0f      	cmp	r3, #15
 8006834:	d913      	bls.n	800685e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006836:	4a16      	ldr	r2, [pc, #88]	; (8006890 <vPortValidateInterruptPriority+0x6c>)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006840:	4b14      	ldr	r3, [pc, #80]	; (8006894 <vPortValidateInterruptPriority+0x70>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	7afa      	ldrb	r2, [r7, #11]
 8006846:	429a      	cmp	r2, r3
 8006848:	d209      	bcs.n	800685e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	e7fe      	b.n	800685c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800685e:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <vPortValidateInterruptPriority+0x74>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006866:	4b0d      	ldr	r3, [pc, #52]	; (800689c <vPortValidateInterruptPriority+0x78>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d909      	bls.n	8006882 <vPortValidateInterruptPriority+0x5e>
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	e7fe      	b.n	8006880 <vPortValidateInterruptPriority+0x5c>
	}
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	e000e3f0 	.word	0xe000e3f0
 8006894:	20000628 	.word	0x20000628
 8006898:	e000ed0c 	.word	0xe000ed0c
 800689c:	2000062c 	.word	0x2000062c

080068a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	; 0x28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068ac:	f7fe ffc8 	bl	8005840 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068b0:	4b57      	ldr	r3, [pc, #348]	; (8006a10 <pvPortMalloc+0x170>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068b8:	f000 f90c 	bl	8006ad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068bc:	4b55      	ldr	r3, [pc, #340]	; (8006a14 <pvPortMalloc+0x174>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4013      	ands	r3, r2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f040 808c 	bne.w	80069e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01c      	beq.n	800690a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80068d0:	2208      	movs	r2, #8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4413      	add	r3, r2
 80068d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d013      	beq.n	800690a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f023 0307 	bic.w	r3, r3, #7
 80068e8:	3308      	adds	r3, #8
 80068ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <pvPortMalloc+0x6a>
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e7fe      	b.n	8006908 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d068      	beq.n	80069e2 <pvPortMalloc+0x142>
 8006910:	4b41      	ldr	r3, [pc, #260]	; (8006a18 <pvPortMalloc+0x178>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d863      	bhi.n	80069e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800691a:	4b40      	ldr	r3, [pc, #256]	; (8006a1c <pvPortMalloc+0x17c>)
 800691c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800691e:	4b3f      	ldr	r3, [pc, #252]	; (8006a1c <pvPortMalloc+0x17c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006924:	e004      	b.n	8006930 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	d903      	bls.n	8006942 <pvPortMalloc+0xa2>
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f1      	bne.n	8006926 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006942:	4b33      	ldr	r3, [pc, #204]	; (8006a10 <pvPortMalloc+0x170>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006948:	429a      	cmp	r2, r3
 800694a:	d04a      	beq.n	80069e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2208      	movs	r2, #8
 8006952:	4413      	add	r3, r2
 8006954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	1ad2      	subs	r2, r2, r3
 8006966:	2308      	movs	r3, #8
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	429a      	cmp	r2, r3
 800696c:	d91e      	bls.n	80069ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800696e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4413      	add	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <pvPortMalloc+0xf4>
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	e7fe      	b.n	8006992 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069a6:	69b8      	ldr	r0, [r7, #24]
 80069a8:	f000 f8f6 	bl	8006b98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069ac:	4b1a      	ldr	r3, [pc, #104]	; (8006a18 <pvPortMalloc+0x178>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <pvPortMalloc+0x178>)
 80069b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069ba:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <pvPortMalloc+0x178>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <pvPortMalloc+0x180>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d203      	bcs.n	80069ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069c6:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <pvPortMalloc+0x178>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <pvPortMalloc+0x180>)
 80069cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <pvPortMalloc+0x174>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069e2:	f7fe ff3b 	bl	800585c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d009      	beq.n	8006a04 <pvPortMalloc+0x164>
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e7fe      	b.n	8006a02 <pvPortMalloc+0x162>
	return pvReturn;
 8006a04:	69fb      	ldr	r3, [r7, #28]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3728      	adds	r7, #40	; 0x28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20004238 	.word	0x20004238
 8006a14:	20004244 	.word	0x20004244
 8006a18:	2000423c 	.word	0x2000423c
 8006a1c:	20004230 	.word	0x20004230
 8006a20:	20004240 	.word	0x20004240

08006a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d046      	beq.n	8006ac4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a36:	2308      	movs	r3, #8
 8006a38:	425b      	negs	r3, r3
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	4b20      	ldr	r3, [pc, #128]	; (8006acc <vPortFree+0xa8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <vPortFree+0x42>
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	e7fe      	b.n	8006a64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <vPortFree+0x5e>
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	60bb      	str	r3, [r7, #8]
 8006a80:	e7fe      	b.n	8006a80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	4b11      	ldr	r3, [pc, #68]	; (8006acc <vPortFree+0xa8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d019      	beq.n	8006ac4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d115      	bne.n	8006ac4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <vPortFree+0xa8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	401a      	ands	r2, r3
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006aa8:	f7fe feca 	bl	8005840 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <vPortFree+0xac>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	4a06      	ldr	r2, [pc, #24]	; (8006ad0 <vPortFree+0xac>)
 8006ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006aba:	6938      	ldr	r0, [r7, #16]
 8006abc:	f000 f86c 	bl	8006b98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ac0:	f7fe fecc 	bl	800585c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ac4:	bf00      	nop
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20004244 	.word	0x20004244
 8006ad0:	2000423c 	.word	0x2000423c

08006ad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ada:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ae0:	4b27      	ldr	r3, [pc, #156]	; (8006b80 <prvHeapInit+0xac>)
 8006ae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00c      	beq.n	8006b08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3307      	adds	r3, #7
 8006af2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0307 	bic.w	r3, r3, #7
 8006afa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	4a1f      	ldr	r2, [pc, #124]	; (8006b80 <prvHeapInit+0xac>)
 8006b04:	4413      	add	r3, r2
 8006b06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b0c:	4a1d      	ldr	r2, [pc, #116]	; (8006b84 <prvHeapInit+0xb0>)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b12:	4b1c      	ldr	r3, [pc, #112]	; (8006b84 <prvHeapInit+0xb0>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b20:	2208      	movs	r2, #8
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 0307 	bic.w	r3, r3, #7
 8006b2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4a15      	ldr	r2, [pc, #84]	; (8006b88 <prvHeapInit+0xb4>)
 8006b34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b36:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <prvHeapInit+0xb4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b3e:	4b12      	ldr	r3, [pc, #72]	; (8006b88 <prvHeapInit+0xb4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b54:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <prvHeapInit+0xb4>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	4a0a      	ldr	r2, [pc, #40]	; (8006b8c <prvHeapInit+0xb8>)
 8006b62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <prvHeapInit+0xbc>)
 8006b6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b6c:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <prvHeapInit+0xc0>)
 8006b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b72:	601a      	str	r2, [r3, #0]
}
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	20000630 	.word	0x20000630
 8006b84:	20004230 	.word	0x20004230
 8006b88:	20004238 	.word	0x20004238
 8006b8c:	20004240 	.word	0x20004240
 8006b90:	2000423c 	.word	0x2000423c
 8006b94:	20004244 	.word	0x20004244

08006b98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ba0:	4b28      	ldr	r3, [pc, #160]	; (8006c44 <prvInsertBlockIntoFreeList+0xac>)
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	e002      	b.n	8006bac <prvInsertBlockIntoFreeList+0x14>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d8f7      	bhi.n	8006ba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d108      	bne.n	8006bda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	441a      	add	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	441a      	add	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d118      	bne.n	8006c20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <prvInsertBlockIntoFreeList+0xb0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d00d      	beq.n	8006c16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	441a      	add	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e008      	b.n	8006c28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c16:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <prvInsertBlockIntoFreeList+0xb0>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e003      	b.n	8006c28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d002      	beq.n	8006c36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20004230 	.word	0x20004230
 8006c48:	20004238 	.word	0x20004238

08006c4c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	330c      	adds	r3, #12
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f002 fa99 	bl	8009198 <tcpip_send_msg_wait_sem>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8006c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <netconn_apimsg+0x2e>
    return apimsg->err;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006c78:	e001      	b.n	8006c7e <netconn_apimsg+0x32>
  }
  return err;
 8006c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08c      	sub	sp, #48	; 0x30
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	603a      	str	r2, [r7, #0]
 8006c92:	71fb      	strb	r3, [r7, #7]
 8006c94:	460b      	mov	r3, r1
 8006c96:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f91f 	bl	8007ee0 <netconn_alloc>
 8006ca2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d054      	beq.n	8006d54 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8006caa:	79bb      	ldrb	r3, [r7, #6]
 8006cac:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8006cb2:	f107 0308 	add.w	r3, r7, #8
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4829      	ldr	r0, [pc, #164]	; (8006d60 <netconn_new_with_proto_and_callback+0xd8>)
 8006cba:	f7ff ffc7 	bl	8006c4c <netconn_apimsg>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8006cc4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d043      	beq.n	8006d54 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <netconn_new_with_proto_and_callback+0x58>
 8006cd4:	4b23      	ldr	r3, [pc, #140]	; (8006d64 <netconn_new_with_proto_and_callback+0xdc>)
 8006cd6:	22a3      	movs	r2, #163	; 0xa3
 8006cd8:	4923      	ldr	r1, [pc, #140]	; (8006d68 <netconn_new_with_proto_and_callback+0xe0>)
 8006cda:	4824      	ldr	r0, [pc, #144]	; (8006d6c <netconn_new_with_proto_and_callback+0xe4>)
 8006cdc:	f00d fadc 	bl	8014298 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	3310      	adds	r3, #16
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f00d f958 	bl	8013f9a <sys_mbox_valid>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d105      	bne.n	8006cfc <netconn_new_with_proto_and_callback+0x74>
 8006cf0:	4b1c      	ldr	r3, [pc, #112]	; (8006d64 <netconn_new_with_proto_and_callback+0xdc>)
 8006cf2:	22a4      	movs	r2, #164	; 0xa4
 8006cf4:	491e      	ldr	r1, [pc, #120]	; (8006d70 <netconn_new_with_proto_and_callback+0xe8>)
 8006cf6:	481d      	ldr	r0, [pc, #116]	; (8006d6c <netconn_new_with_proto_and_callback+0xe4>)
 8006cf8:	f00d face 	bl	8014298 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	3314      	adds	r3, #20
 8006d00:	4618      	mov	r0, r3
 8006d02:	f00d f94a 	bl	8013f9a <sys_mbox_valid>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <netconn_new_with_proto_and_callback+0x90>
 8006d0c:	4b15      	ldr	r3, [pc, #84]	; (8006d64 <netconn_new_with_proto_and_callback+0xdc>)
 8006d0e:	22a6      	movs	r2, #166	; 0xa6
 8006d10:	4918      	ldr	r1, [pc, #96]	; (8006d74 <netconn_new_with_proto_and_callback+0xec>)
 8006d12:	4816      	ldr	r0, [pc, #88]	; (8006d6c <netconn_new_with_proto_and_callback+0xe4>)
 8006d14:	f00d fac0 	bl	8014298 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	330c      	adds	r3, #12
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f00d f9cd 	bl	80140bc <sys_sem_valid>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <netconn_new_with_proto_and_callback+0xac>
 8006d28:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <netconn_new_with_proto_and_callback+0xdc>)
 8006d2a:	22a9      	movs	r2, #169	; 0xa9
 8006d2c:	4912      	ldr	r1, [pc, #72]	; (8006d78 <netconn_new_with_proto_and_callback+0xf0>)
 8006d2e:	480f      	ldr	r0, [pc, #60]	; (8006d6c <netconn_new_with_proto_and_callback+0xe4>)
 8006d30:	f00d fab2 	bl	8014298 <iprintf>
      sys_sem_free(&conn->op_completed);
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	330c      	adds	r3, #12
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f00d f9b2 	bl	80140a2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	3310      	adds	r3, #16
 8006d42:	4618      	mov	r0, r3
 8006d44:	f00d f8a2 	bl	8013e8c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8006d48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d4a:	2007      	movs	r0, #7
 8006d4c:	f002 ff8c 	bl	8009c68 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e000      	b.n	8006d56 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3730      	adds	r7, #48	; 0x30
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	08007eb5 	.word	0x08007eb5
 8006d64:	0801530c 	.word	0x0801530c
 8006d68:	08015340 	.word	0x08015340
 8006d6c:	08015364 	.word	0x08015364
 8006d70:	0801538c 	.word	0x0801538c
 8006d74:	080153a4 	.word	0x080153a4
 8006d78:	080153c8 	.word	0x080153c8

08006d7c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08c      	sub	sp, #48	; 0x30
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e014      	b.n	8006db8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006d92:	2329      	movs	r3, #41	; 0x29
 8006d94:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8006d96:	f107 030c 	add.w	r3, r7, #12
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4808      	ldr	r0, [pc, #32]	; (8006dc0 <netconn_prepare_delete+0x44>)
 8006d9e:	f7ff ff55 	bl	8006c4c <netconn_apimsg>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8006da8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <netconn_prepare_delete+0x3a>
    return err;
 8006db0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006db4:	e000      	b.n	8006db8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3730      	adds	r7, #48	; 0x30
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	08008419 	.word	0x08008419

08006dc4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <netconn_delete+0x12>
    return ERR_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e00d      	b.n	8006df2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff ffd0 	bl	8006d7c <netconn_prepare_delete>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8006de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d102      	bne.n	8006dee <netconn_delete+0x2a>
    netconn_free(conn);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 f8e7 	bl	8007fbc <netconn_free>
  }
  return err;
 8006dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08e      	sub	sp, #56	; 0x38
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d109      	bne.n	8006e24 <netconn_bind+0x28>
 8006e10:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <netconn_bind+0x5c>)
 8006e12:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006e16:	4911      	ldr	r1, [pc, #68]	; (8006e5c <netconn_bind+0x60>)
 8006e18:	4811      	ldr	r0, [pc, #68]	; (8006e60 <netconn_bind+0x64>)
 8006e1a:	f00d fa3d 	bl	8014298 <iprintf>
 8006e1e:	f06f 030f 	mvn.w	r3, #15
 8006e22:	e015      	b.n	8006e50 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8006e2a:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <netconn_bind+0x68>)
 8006e2c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8006e3a:	f107 0314 	add.w	r3, r7, #20
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4809      	ldr	r0, [pc, #36]	; (8006e68 <netconn_bind+0x6c>)
 8006e42:	f7ff ff03 	bl	8006c4c <netconn_apimsg>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8006e4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3738      	adds	r7, #56	; 0x38
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	0801530c 	.word	0x0801530c
 8006e5c:	08015444 	.word	0x08015444
 8006e60:	08015364 	.word	0x08015364
 8006e64:	08018908 	.word	0x08018908
 8006e68:	080085e1 	.word	0x080085e1

08006e6c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08c      	sub	sp, #48	; 0x30
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <netconn_listen_with_backlog+0x26>
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <netconn_listen_with_backlog+0x48>)
 8006e80:	f240 12bb 	movw	r2, #443	; 0x1bb
 8006e84:	490c      	ldr	r1, [pc, #48]	; (8006eb8 <netconn_listen_with_backlog+0x4c>)
 8006e86:	480d      	ldr	r0, [pc, #52]	; (8006ebc <netconn_listen_with_backlog+0x50>)
 8006e88:	f00d fa06 	bl	8014298 <iprintf>
 8006e8c:	f06f 030f 	mvn.w	r3, #15
 8006e90:	e00c      	b.n	8006eac <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8006e96:	f107 030c 	add.w	r3, r7, #12
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4808      	ldr	r0, [pc, #32]	; (8006ec0 <netconn_listen_with_backlog+0x54>)
 8006e9e:	f7ff fed5 	bl	8006c4c <netconn_apimsg>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8006ea8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3730      	adds	r7, #48	; 0x30
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	0801530c 	.word	0x0801530c
 8006eb8:	080154c4 	.word	0x080154c4
 8006ebc:	08015364 	.word	0x08015364
 8006ec0:	08008659 	.word	0x08008659

08006ec4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d109      	bne.n	8006ee8 <netconn_accept+0x24>
 8006ed4:	4b3d      	ldr	r3, [pc, #244]	; (8006fcc <netconn_accept+0x108>)
 8006ed6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006eda:	493d      	ldr	r1, [pc, #244]	; (8006fd0 <netconn_accept+0x10c>)
 8006edc:	483d      	ldr	r0, [pc, #244]	; (8006fd4 <netconn_accept+0x110>)
 8006ede:	f00d f9db 	bl	8014298 <iprintf>
 8006ee2:	f06f 030f 	mvn.w	r3, #15
 8006ee6:	e06c      	b.n	8006fc2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d109      	bne.n	8006f08 <netconn_accept+0x44>
 8006ef4:	4b35      	ldr	r3, [pc, #212]	; (8006fcc <netconn_accept+0x108>)
 8006ef6:	f240 12e3 	movw	r2, #483	; 0x1e3
 8006efa:	4937      	ldr	r1, [pc, #220]	; (8006fd8 <netconn_accept+0x114>)
 8006efc:	4835      	ldr	r0, [pc, #212]	; (8006fd4 <netconn_accept+0x110>)
 8006efe:	f00d f9cb 	bl	8014298 <iprintf>
 8006f02:	f06f 030f 	mvn.w	r3, #15
 8006f06:	e05c      	b.n	8006fc2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fb6c 	bl	80075e6 <netconn_err>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8006f12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8006f1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006f1e:	e050      	b.n	8006fc2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3314      	adds	r3, #20
 8006f24:	4618      	mov	r0, r3
 8006f26:	f00d f838 	bl	8013f9a <sys_mbox_valid>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <netconn_accept+0x78>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	7f1b      	ldrb	r3, [r3, #28]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8006f3c:	f06f 030e 	mvn.w	r3, #14
 8006f40:	e03f      	b.n	8006fc2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	7f1b      	ldrb	r3, [r3, #28]
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00e      	beq.n	8006f6c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3314      	adds	r3, #20
 8006f52:	f107 020c 	add.w	r2, r7, #12
 8006f56:	4611      	mov	r1, r2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f00d f802 	bl	8013f62 <sys_arch_mbox_tryfetch>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d10a      	bne.n	8006f7c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8006f66:	f06f 0306 	mvn.w	r3, #6
 8006f6a:	e02a      	b.n	8006fc2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3314      	adds	r3, #20
 8006f70:	f107 010c 	add.w	r1, r7, #12
 8006f74:	2200      	movs	r2, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f00c ffb4 	bl	8013ee4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <netconn_accept+0xcc>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f107 0213 	add.w	r2, r7, #19
 8006f96:	4611      	mov	r1, r2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fb71 	bl	8007680 <lwip_netconn_is_err_msg>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8006fa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006fa8:	e00b      	b.n	8006fc2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8006fb0:	f06f 030e 	mvn.w	r3, #14
 8006fb4:	e005      	b.n	8006fc2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8006fc0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	0801530c 	.word	0x0801530c
 8006fd0:	080154e4 	.word	0x080154e4
 8006fd4:	08015364 	.word	0x08015364
 8006fd8:	08015504 	.word	0x08015504

08006fdc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <netconn_recv_data+0x2c>
 8006ff4:	4b58      	ldr	r3, [pc, #352]	; (8007158 <netconn_recv_data+0x17c>)
 8006ff6:	f44f 7212 	mov.w	r2, #584	; 0x248
 8006ffa:	4958      	ldr	r1, [pc, #352]	; (800715c <netconn_recv_data+0x180>)
 8006ffc:	4858      	ldr	r0, [pc, #352]	; (8007160 <netconn_recv_data+0x184>)
 8006ffe:	f00d f94b 	bl	8014298 <iprintf>
 8007002:	f06f 030f 	mvn.w	r3, #15
 8007006:	e0a2      	b.n	800714e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <netconn_recv_data+0x4c>
 8007014:	4b50      	ldr	r3, [pc, #320]	; (8007158 <netconn_recv_data+0x17c>)
 8007016:	f240 224a 	movw	r2, #586	; 0x24a
 800701a:	4952      	ldr	r1, [pc, #328]	; (8007164 <netconn_recv_data+0x188>)
 800701c:	4850      	ldr	r0, [pc, #320]	; (8007160 <netconn_recv_data+0x184>)
 800701e:	f00d f93b 	bl	8014298 <iprintf>
 8007022:	f06f 030f 	mvn.w	r3, #15
 8007026:	e092      	b.n	800714e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3310      	adds	r3, #16
 800702c:	4618      	mov	r0, r3
 800702e:	f00c ffb4 	bl	8013f9a <sys_mbox_valid>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10e      	bne.n	8007056 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fad4 	bl	80075e6 <netconn_err>
 800703e:	4603      	mov	r3, r0
 8007040:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007042:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800704a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800704e:	e07e      	b.n	800714e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007050:	f06f 030a 	mvn.w	r3, #10
 8007054:	e07b      	b.n	800714e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	7f1b      	ldrb	r3, [r3, #28]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10f      	bne.n	8007082 <netconn_recv_data+0xa6>
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	7f1b      	ldrb	r3, [r3, #28]
 8007070:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007074:	2b00      	cmp	r3, #0
 8007076:	d104      	bne.n	8007082 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d023      	beq.n	80070ca <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3310      	adds	r3, #16
 8007086:	f107 0218 	add.w	r2, r7, #24
 800708a:	4611      	mov	r1, r2
 800708c:	4618      	mov	r0, r3
 800708e:	f00c ff68 	bl	8013f62 <sys_arch_mbox_tryfetch>
 8007092:	4603      	mov	r3, r0
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d11f      	bne.n	80070da <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 faa3 	bl	80075e6 <netconn_err>
 80070a0:	4603      	mov	r3, r0
 80070a2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80070a4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80070ac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80070b0:	e04d      	b.n	800714e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	7f1b      	ldrb	r3, [r3, #28]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80070be:	f06f 030a 	mvn.w	r3, #10
 80070c2:	e044      	b.n	800714e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80070c4:	f06f 0306 	mvn.w	r3, #6
 80070c8:	e041      	b.n	800714e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3310      	adds	r3, #16
 80070ce:	f107 0118 	add.w	r1, r7, #24
 80070d2:	2200      	movs	r2, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f00c ff05 	bl	8013ee4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070e2:	2b10      	cmp	r3, #16
 80070e4:	d117      	bne.n	8007116 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	f107 0217 	add.w	r2, r7, #23
 80070ec:	4611      	mov	r1, r2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fac6 	bl	8007680 <lwip_netconn_is_err_msg>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80070fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070fe:	f113 0f0f 	cmn.w	r3, #15
 8007102:	d101      	bne.n	8007108 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	e022      	b.n	800714e <netconn_recv_data+0x172>
      }
      return err;
 8007108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800710c:	e01f      	b.n	800714e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	891b      	ldrh	r3, [r3, #8]
 8007112:	83fb      	strh	r3, [r7, #30]
 8007114:	e00d      	b.n	8007132 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d106      	bne.n	800712a <netconn_recv_data+0x14e>
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <netconn_recv_data+0x17c>)
 800711e:	f240 2291 	movw	r2, #657	; 0x291
 8007122:	4911      	ldr	r1, [pc, #68]	; (8007168 <netconn_recv_data+0x18c>)
 8007124:	480e      	ldr	r0, [pc, #56]	; (8007160 <netconn_recv_data+0x184>)
 8007126:	f00d f8b7 	bl	8014298 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	891b      	ldrh	r3, [r3, #8]
 8007130:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <netconn_recv_data+0x16a>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	8bfa      	ldrh	r2, [r7, #30]
 8007140:	2101      	movs	r1, #1
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3720      	adds	r7, #32
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	0801530c 	.word	0x0801530c
 800715c:	08015524 	.word	0x08015524
 8007160:	08015364 	.word	0x08015364
 8007164:	08015544 	.word	0x08015544
 8007168:	08015560 	.word	0x08015560

0800716c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d005      	beq.n	800718a <netconn_tcp_recvd_msg+0x1e>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007186:	2b10      	cmp	r3, #16
 8007188:	d009      	beq.n	800719e <netconn_tcp_recvd_msg+0x32>
 800718a:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <netconn_tcp_recvd_msg+0x50>)
 800718c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007190:	490b      	ldr	r1, [pc, #44]	; (80071c0 <netconn_tcp_recvd_msg+0x54>)
 8007192:	480c      	ldr	r0, [pc, #48]	; (80071c4 <netconn_tcp_recvd_msg+0x58>)
 8007194:	f00d f880 	bl	8014298 <iprintf>
 8007198:	f06f 030f 	mvn.w	r3, #15
 800719c:	e00a      	b.n	80071b4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	4806      	ldr	r0, [pc, #24]	; (80071c8 <netconn_tcp_recvd_msg+0x5c>)
 80071ae:	f7ff fd4d 	bl	8006c4c <netconn_apimsg>
 80071b2:	4603      	mov	r3, r0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	0801530c 	.word	0x0801530c
 80071c0:	0801556c 	.word	0x0801556c
 80071c4:	08015364 	.word	0x08015364
 80071c8:	08008789 	.word	0x08008789

080071cc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b090      	sub	sp, #64	; 0x40
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	4613      	mov	r3, r2
 80071d8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3310      	adds	r3, #16
 80071de:	4618      	mov	r0, r3
 80071e0:	f00c fedb 	bl	8013f9a <sys_mbox_valid>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80071ea:	f06f 030a 	mvn.w	r3, #10
 80071ee:	e06d      	b.n	80072cc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	7f1b      	ldrb	r3, [r3, #28]
 80071f4:	b25b      	sxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da07      	bge.n	800720a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	7f1b      	ldrb	r3, [r3, #28]
 80071fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007202:	b2da      	uxtb	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007208:	e039      	b.n	800727e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	461a      	mov	r2, r3
 800720e:	68b9      	ldr	r1, [r7, #8]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff fee3 	bl	8006fdc <netconn_recv_data>
 8007216:	4603      	mov	r3, r0
 8007218:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800721c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007224:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007228:	e050      	b.n	80072cc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10e      	bne.n	8007258 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <netconn_recv_data_tcp+0x7a>
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	891b      	ldrh	r3, [r3, #8]
 8007244:	e000      	b.n	8007248 <netconn_recv_data_tcp+0x7c>
 8007246:	2301      	movs	r3, #1
 8007248:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800724a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800724c:	f107 0214 	add.w	r2, r7, #20
 8007250:	4619      	mov	r1, r3
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff ff8a 	bl	800716c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	2b00      	cmp	r3, #0
 800725c:	d134      	bne.n	80072c8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	f003 0310 	and.w	r3, r3, #16
 8007264:	2b00      	cmp	r3, #0
 8007266:	d009      	beq.n	800727c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	7f1b      	ldrb	r3, [r3, #28]
 800726c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007270:	b2da      	uxtb	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007276:	f06f 0306 	mvn.w	r3, #6
 800727a:	e027      	b.n	80072cc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800727c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	2b00      	cmp	r3, #0
 8007284:	d005      	beq.n	8007292 <netconn_recv_data_tcp+0xc6>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	2200      	movs	r2, #0
 800728c:	2101      	movs	r1, #1
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10f      	bne.n	80072ba <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f9a3 	bl	80075e6 <netconn_err>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80072a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <netconn_recv_data_tcp+0xe8>
          return err;
 80072ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80072b2:	e00b      	b.n	80072cc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80072b4:	f06f 030d 	mvn.w	r3, #13
 80072b8:	e008      	b.n	80072cc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80072ba:	2101      	movs	r1, #1
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f955 	bl	800756c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80072c2:	f06f 030e 	mvn.w	r3, #14
 80072c6:	e001      	b.n	80072cc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80072c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3740      	adds	r7, #64	; 0x40
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d109      	bne.n	80072fc <netconn_recv+0x28>
 80072e8:	4b32      	ldr	r3, [pc, #200]	; (80073b4 <netconn_recv+0xe0>)
 80072ea:	f240 3263 	movw	r2, #867	; 0x363
 80072ee:	4932      	ldr	r1, [pc, #200]	; (80073b8 <netconn_recv+0xe4>)
 80072f0:	4832      	ldr	r0, [pc, #200]	; (80073bc <netconn_recv+0xe8>)
 80072f2:	f00c ffd1 	bl	8014298 <iprintf>
 80072f6:	f06f 030f 	mvn.w	r3, #15
 80072fa:	e056      	b.n	80073aa <netconn_recv+0xd6>
  *new_buf = NULL;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d109      	bne.n	800731c <netconn_recv+0x48>
 8007308:	4b2a      	ldr	r3, [pc, #168]	; (80073b4 <netconn_recv+0xe0>)
 800730a:	f240 3265 	movw	r2, #869	; 0x365
 800730e:	492c      	ldr	r1, [pc, #176]	; (80073c0 <netconn_recv+0xec>)
 8007310:	482a      	ldr	r0, [pc, #168]	; (80073bc <netconn_recv+0xe8>)
 8007312:	f00c ffc1 	bl	8014298 <iprintf>
 8007316:	f06f 030f 	mvn.w	r3, #15
 800731a:	e046      	b.n	80073aa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007324:	2b10      	cmp	r3, #16
 8007326:	d13a      	bne.n	800739e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800732c:	2006      	movs	r0, #6
 800732e:	f002 fc49 	bl	8009bc4 <memp_malloc>
 8007332:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <netconn_recv+0x6c>
      return ERR_MEM;
 800733a:	f04f 33ff 	mov.w	r3, #4294967295
 800733e:	e034      	b.n	80073aa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8007340:	f107 030c 	add.w	r3, r7, #12
 8007344:	2200      	movs	r2, #0
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ff3f 	bl	80071cc <netconn_recv_data_tcp>
 800734e:	4603      	mov	r3, r0
 8007350:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007352:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d006      	beq.n	8007368 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800735a:	6979      	ldr	r1, [r7, #20]
 800735c:	2006      	movs	r0, #6
 800735e:	f002 fc83 	bl	8009c68 <memp_free>
      return err;
 8007362:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007366:	e020      	b.n	80073aa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <netconn_recv+0xa8>
 800736e:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <netconn_recv+0xe0>)
 8007370:	f240 3279 	movw	r2, #889	; 0x379
 8007374:	4913      	ldr	r1, [pc, #76]	; (80073c4 <netconn_recv+0xf0>)
 8007376:	4811      	ldr	r0, [pc, #68]	; (80073bc <netconn_recv+0xe8>)
 8007378:	f00c ff8e 	bl	8014298 <iprintf>

    buf->p = p;
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2200      	movs	r2, #0
 800738c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2200      	movs	r2, #0
 8007392:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	e005      	b.n	80073aa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800739e:	2200      	movs	r2, #0
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff fe1a 	bl	8006fdc <netconn_recv_data>
 80073a8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	0801530c 	.word	0x0801530c
 80073b8:	08015524 	.word	0x08015524
 80073bc:	08015364 	.word	0x08015364
 80073c0:	08015544 	.word	0x08015544
 80073c4:	080155bc 	.word	0x080155bc

080073c8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80073de:	78fa      	ldrb	r2, [r7, #3]
 80073e0:	f107 0110 	add.w	r1, r7, #16
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	2201      	movs	r2, #1
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 f805 	bl	80073fc <netconn_write_vectors_partly>
 80073f2:	4603      	mov	r3, r0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b092      	sub	sp, #72	; 0x48
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	4611      	mov	r1, r2
 8007408:	461a      	mov	r2, r3
 800740a:	460b      	mov	r3, r1
 800740c:	80fb      	strh	r3, [r7, #6]
 800740e:	4613      	mov	r3, r2
 8007410:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d109      	bne.n	800742c <netconn_write_vectors_partly+0x30>
 8007418:	4b4e      	ldr	r3, [pc, #312]	; (8007554 <netconn_write_vectors_partly+0x158>)
 800741a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800741e:	494e      	ldr	r1, [pc, #312]	; (8007558 <netconn_write_vectors_partly+0x15c>)
 8007420:	484e      	ldr	r0, [pc, #312]	; (800755c <netconn_write_vectors_partly+0x160>)
 8007422:	f00c ff39 	bl	8014298 <iprintf>
 8007426:	f06f 030f 	mvn.w	r3, #15
 800742a:	e08e      	b.n	800754a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007434:	2b10      	cmp	r3, #16
 8007436:	d009      	beq.n	800744c <netconn_write_vectors_partly+0x50>
 8007438:	4b46      	ldr	r3, [pc, #280]	; (8007554 <netconn_write_vectors_partly+0x158>)
 800743a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800743e:	4948      	ldr	r1, [pc, #288]	; (8007560 <netconn_write_vectors_partly+0x164>)
 8007440:	4846      	ldr	r0, [pc, #280]	; (800755c <netconn_write_vectors_partly+0x160>)
 8007442:	f00c ff29 	bl	8014298 <iprintf>
 8007446:	f06f 0305 	mvn.w	r3, #5
 800744a:	e07e      	b.n	800754a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	7f1b      	ldrb	r3, [r3, #28]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d104      	bne.n	8007462 <netconn_write_vectors_partly+0x66>
 8007458:	797b      	ldrb	r3, [r7, #5]
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <netconn_write_vectors_partly+0x6a>
 8007462:	2301      	movs	r3, #1
 8007464:	e000      	b.n	8007468 <netconn_write_vectors_partly+0x6c>
 8007466:	2300      	movs	r3, #0
 8007468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800746c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <netconn_write_vectors_partly+0x84>
 8007474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007476:	2b00      	cmp	r3, #0
 8007478:	d102      	bne.n	8007480 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800747a:	f06f 0305 	mvn.w	r3, #5
 800747e:	e064      	b.n	800754a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8007484:	2300      	movs	r3, #0
 8007486:	643b      	str	r3, [r7, #64]	; 0x40
 8007488:	e015      	b.n	80074b6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800748a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	4413      	add	r3, r2
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007496:	4413      	add	r3, r2
 8007498:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800749a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	4413      	add	r3, r2
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d202      	bcs.n	80074b0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80074aa:	f06f 0305 	mvn.w	r3, #5
 80074ae:	e04c      	b.n	800754a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80074b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b2:	3301      	adds	r3, #1
 80074b4:	643b      	str	r3, [r7, #64]	; 0x40
 80074b6:	88fb      	ldrh	r3, [r7, #6]
 80074b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074ba:	429a      	cmp	r2, r3
 80074bc:	dbe5      	blt.n	800748a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80074be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	e040      	b.n	800754a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80074c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	da0a      	bge.n	80074e4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80074ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d102      	bne.n	80074da <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80074d4:	f06f 0305 	mvn.w	r3, #5
 80074d8:	e037      	b.n	800754a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80074da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80074de:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80074f4:	797b      	ldrb	r3, [r7, #5]
 80074f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80074fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074fc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8007502:	f107 0314 	add.w	r3, r7, #20
 8007506:	4619      	mov	r1, r3
 8007508:	4816      	ldr	r0, [pc, #88]	; (8007564 <netconn_write_vectors_partly+0x168>)
 800750a:	f7ff fb9f 	bl	8006c4c <netconn_apimsg>
 800750e:	4603      	mov	r3, r0
 8007510:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8007514:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007518:	2b00      	cmp	r3, #0
 800751a:	d114      	bne.n	8007546 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800751c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8007522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007526:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8007528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007534:	429a      	cmp	r2, r3
 8007536:	d006      	beq.n	8007546 <netconn_write_vectors_partly+0x14a>
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <netconn_write_vectors_partly+0x158>)
 800753a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800753e:	490a      	ldr	r1, [pc, #40]	; (8007568 <netconn_write_vectors_partly+0x16c>)
 8007540:	4806      	ldr	r0, [pc, #24]	; (800755c <netconn_write_vectors_partly+0x160>)
 8007542:	f00c fea9 	bl	8014298 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8007546:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800754a:	4618      	mov	r0, r3
 800754c:	3748      	adds	r7, #72	; 0x48
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	0801530c 	.word	0x0801530c
 8007558:	080155e4 	.word	0x080155e4
 800755c:	08015364 	.word	0x08015364
 8007560:	08015600 	.word	0x08015600
 8007564:	08008b8d 	.word	0x08008b8d
 8007568:	08015624 	.word	0x08015624

0800756c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08c      	sub	sp, #48	; 0x30
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <netconn_close_shutdown+0x26>
 800757e:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <netconn_close_shutdown+0x50>)
 8007580:	f240 4247 	movw	r2, #1095	; 0x447
 8007584:	490e      	ldr	r1, [pc, #56]	; (80075c0 <netconn_close_shutdown+0x54>)
 8007586:	480f      	ldr	r0, [pc, #60]	; (80075c4 <netconn_close_shutdown+0x58>)
 8007588:	f00c fe86 	bl	8014298 <iprintf>
 800758c:	f06f 030f 	mvn.w	r3, #15
 8007590:	e010      	b.n	80075b4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8007596:	78fb      	ldrb	r3, [r7, #3]
 8007598:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800759a:	2329      	movs	r3, #41	; 0x29
 800759c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800759e:	f107 030c 	add.w	r3, r7, #12
 80075a2:	4619      	mov	r1, r3
 80075a4:	4808      	ldr	r0, [pc, #32]	; (80075c8 <netconn_close_shutdown+0x5c>)
 80075a6:	f7ff fb51 	bl	8006c4c <netconn_apimsg>
 80075aa:	4603      	mov	r3, r0
 80075ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80075b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3730      	adds	r7, #48	; 0x30
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	0801530c 	.word	0x0801530c
 80075c0:	08015648 	.word	0x08015648
 80075c4:	08015364 	.word	0x08015364
 80075c8:	08008ca5 	.word	0x08008ca5

080075cc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80075d4:	2103      	movs	r1, #3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff ffc8 	bl	800756c <netconn_close_shutdown>
 80075dc:	4603      	mov	r3, r0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <netconn_err+0x12>
    return ERR_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e00d      	b.n	8007614 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80075f8:	f00c fdea 	bl	80141d0 <sys_arch_protect>
 80075fc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	7a1b      	ldrb	r3, [r3, #8]
 8007602:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f00c fdee 	bl	80141ec <sys_arch_unprotect>
  return err;
 8007610:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8007626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800762a:	f113 0f0e 	cmn.w	r3, #14
 800762e:	d008      	beq.n	8007642 <lwip_netconn_err_to_msg+0x26>
 8007630:	f113 0f0d 	cmn.w	r3, #13
 8007634:	d003      	beq.n	800763e <lwip_netconn_err_to_msg+0x22>
 8007636:	f113 0f0f 	cmn.w	r3, #15
 800763a:	d004      	beq.n	8007646 <lwip_netconn_err_to_msg+0x2a>
 800763c:	e005      	b.n	800764a <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800763e:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <lwip_netconn_err_to_msg+0x4c>)
 8007640:	e00e      	b.n	8007660 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8007642:	4b0a      	ldr	r3, [pc, #40]	; (800766c <lwip_netconn_err_to_msg+0x50>)
 8007644:	e00c      	b.n	8007660 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8007646:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <lwip_netconn_err_to_msg+0x54>)
 8007648:	e00a      	b.n	8007660 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800764a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d005      	beq.n	800765e <lwip_netconn_err_to_msg+0x42>
 8007652:	4b08      	ldr	r3, [pc, #32]	; (8007674 <lwip_netconn_err_to_msg+0x58>)
 8007654:	227d      	movs	r2, #125	; 0x7d
 8007656:	4908      	ldr	r1, [pc, #32]	; (8007678 <lwip_netconn_err_to_msg+0x5c>)
 8007658:	4808      	ldr	r0, [pc, #32]	; (800767c <lwip_netconn_err_to_msg+0x60>)
 800765a:	f00c fe1d 	bl	8014298 <iprintf>
      return NULL;
 800765e:	2300      	movs	r3, #0
  }
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	080187f4 	.word	0x080187f4
 800766c:	080187f5 	.word	0x080187f5
 8007670:	080187f6 	.word	0x080187f6
 8007674:	08015664 	.word	0x08015664
 8007678:	08015698 	.word	0x08015698
 800767c:	080156a8 	.word	0x080156a8

08007680 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <lwip_netconn_is_err_msg+0x1c>
 8007690:	4b12      	ldr	r3, [pc, #72]	; (80076dc <lwip_netconn_is_err_msg+0x5c>)
 8007692:	2285      	movs	r2, #133	; 0x85
 8007694:	4912      	ldr	r1, [pc, #72]	; (80076e0 <lwip_netconn_is_err_msg+0x60>)
 8007696:	4813      	ldr	r0, [pc, #76]	; (80076e4 <lwip_netconn_is_err_msg+0x64>)
 8007698:	f00c fdfe 	bl	8014298 <iprintf>

  if (msg == &netconn_aborted) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a12      	ldr	r2, [pc, #72]	; (80076e8 <lwip_netconn_is_err_msg+0x68>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d104      	bne.n	80076ae <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	22f3      	movs	r2, #243	; 0xf3
 80076a8:	701a      	strb	r2, [r3, #0]
    return 1;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e012      	b.n	80076d4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a0e      	ldr	r2, [pc, #56]	; (80076ec <lwip_netconn_is_err_msg+0x6c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d104      	bne.n	80076c0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	22f2      	movs	r2, #242	; 0xf2
 80076ba:	701a      	strb	r2, [r3, #0]
    return 1;
 80076bc:	2301      	movs	r3, #1
 80076be:	e009      	b.n	80076d4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a0b      	ldr	r2, [pc, #44]	; (80076f0 <lwip_netconn_is_err_msg+0x70>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d104      	bne.n	80076d2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	22f1      	movs	r2, #241	; 0xf1
 80076cc:	701a      	strb	r2, [r3, #0]
    return 1;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	08015664 	.word	0x08015664
 80076e0:	080156d0 	.word	0x080156d0
 80076e4:	080156a8 	.word	0x080156a8
 80076e8:	080187f4 	.word	0x080187f4
 80076ec:	080187f5 	.word	0x080187f5
 80076f0:	080187f6 	.word	0x080187f6

080076f4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d105      	bne.n	8007714 <recv_udp+0x20>
 8007708:	4b34      	ldr	r3, [pc, #208]	; (80077dc <recv_udp+0xe8>)
 800770a:	22e5      	movs	r2, #229	; 0xe5
 800770c:	4934      	ldr	r1, [pc, #208]	; (80077e0 <recv_udp+0xec>)
 800770e:	4835      	ldr	r0, [pc, #212]	; (80077e4 <recv_udp+0xf0>)
 8007710:	f00c fdc2 	bl	8014298 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d105      	bne.n	8007726 <recv_udp+0x32>
 800771a:	4b30      	ldr	r3, [pc, #192]	; (80077dc <recv_udp+0xe8>)
 800771c:	22e6      	movs	r2, #230	; 0xe6
 800771e:	4932      	ldr	r1, [pc, #200]	; (80077e8 <recv_udp+0xf4>)
 8007720:	4830      	ldr	r0, [pc, #192]	; (80077e4 <recv_udp+0xf0>)
 8007722:	f00c fdb9 	bl	8014298 <iprintf>
  conn = (struct netconn *)arg;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d103      	bne.n	8007738 <recv_udp+0x44>
    pbuf_free(p);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f003 f939 	bl	800a9a8 <pbuf_free>
    return;
 8007736:	e04d      	b.n	80077d4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	429a      	cmp	r2, r3
 8007740:	d005      	beq.n	800774e <recv_udp+0x5a>
 8007742:	4b26      	ldr	r3, [pc, #152]	; (80077dc <recv_udp+0xe8>)
 8007744:	22ee      	movs	r2, #238	; 0xee
 8007746:	4929      	ldr	r1, [pc, #164]	; (80077ec <recv_udp+0xf8>)
 8007748:	4826      	ldr	r0, [pc, #152]	; (80077e4 <recv_udp+0xf0>)
 800774a:	f00c fda5 	bl	8014298 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	3310      	adds	r3, #16
 8007752:	4618      	mov	r0, r3
 8007754:	f00c fc21 	bl	8013f9a <sys_mbox_valid>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f003 f922 	bl	800a9a8 <pbuf_free>
    return;
 8007764:	e036      	b.n	80077d4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007766:	2006      	movs	r0, #6
 8007768:	f002 fa2c 	bl	8009bc4 <memp_malloc>
 800776c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d103      	bne.n	800777c <recv_udp+0x88>
    pbuf_free(p);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f003 f917 	bl	800a9a8 <pbuf_free>
    return;
 800777a:	e02b      	b.n	80077d4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <recv_udp+0xa0>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	e000      	b.n	8007796 <recv_udp+0xa2>
 8007794:	2300      	movs	r3, #0
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800779e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	891b      	ldrh	r3, [r3, #8]
 80077a4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	3310      	adds	r3, #16
 80077aa:	69b9      	ldr	r1, [r7, #24]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f00c fb7f 	bl	8013eb0 <sys_mbox_trypost>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <recv_udp+0xcc>
    netbuf_delete(buf);
 80077b8:	69b8      	ldr	r0, [r7, #24]
 80077ba:	f001 faff 	bl	8008dbc <netbuf_delete>
    return;
 80077be:	e009      	b.n	80077d4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <recv_udp+0xe0>
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	8afa      	ldrh	r2, [r7, #22]
 80077ce:	2100      	movs	r1, #0
 80077d0:	69f8      	ldr	r0, [r7, #28]
 80077d2:	4798      	blx	r3
  }
}
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	08015664 	.word	0x08015664
 80077e0:	080156dc 	.word	0x080156dc
 80077e4:	080156a8 	.word	0x080156a8
 80077e8:	08015700 	.word	0x08015700
 80077ec:	08015720 	.word	0x08015720

080077f0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d106      	bne.n	8007812 <recv_tcp+0x22>
 8007804:	4b36      	ldr	r3, [pc, #216]	; (80078e0 <recv_tcp+0xf0>)
 8007806:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800780a:	4936      	ldr	r1, [pc, #216]	; (80078e4 <recv_tcp+0xf4>)
 800780c:	4836      	ldr	r0, [pc, #216]	; (80078e8 <recv_tcp+0xf8>)
 800780e:	f00c fd43 	bl	8014298 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d106      	bne.n	8007826 <recv_tcp+0x36>
 8007818:	4b31      	ldr	r3, [pc, #196]	; (80078e0 <recv_tcp+0xf0>)
 800781a:	f240 122d 	movw	r2, #301	; 0x12d
 800781e:	4933      	ldr	r1, [pc, #204]	; (80078ec <recv_tcp+0xfc>)
 8007820:	4831      	ldr	r0, [pc, #196]	; (80078e8 <recv_tcp+0xf8>)
 8007822:	f00c fd39 	bl	8014298 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d006      	beq.n	800783c <recv_tcp+0x4c>
 800782e:	4b2c      	ldr	r3, [pc, #176]	; (80078e0 <recv_tcp+0xf0>)
 8007830:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8007834:	492e      	ldr	r1, [pc, #184]	; (80078f0 <recv_tcp+0x100>)
 8007836:	482c      	ldr	r0, [pc, #176]	; (80078e8 <recv_tcp+0xf8>)
 8007838:	f00c fd2e 	bl	8014298 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <recv_tcp+0x5c>
    return ERR_VAL;
 8007846:	f06f 0305 	mvn.w	r3, #5
 800784a:	e045      	b.n	80078d8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	429a      	cmp	r2, r3
 8007854:	d006      	beq.n	8007864 <recv_tcp+0x74>
 8007856:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <recv_tcp+0xf0>)
 8007858:	f240 1235 	movw	r2, #309	; 0x135
 800785c:	4925      	ldr	r1, [pc, #148]	; (80078f4 <recv_tcp+0x104>)
 800785e:	4822      	ldr	r0, [pc, #136]	; (80078e8 <recv_tcp+0xf8>)
 8007860:	f00c fd1a 	bl	8014298 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	3310      	adds	r3, #16
 8007868:	4618      	mov	r0, r3
 800786a:	f00c fb96 	bl	8013f9a <sys_mbox_valid>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10d      	bne.n	8007890 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d008      	beq.n	800788c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	891b      	ldrh	r3, [r3, #8]
 800787e:	4619      	mov	r1, r3
 8007880:	68b8      	ldr	r0, [r7, #8]
 8007882:	f004 f83f 	bl	800b904 <tcp_recved>
      pbuf_free(p);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f003 f88e 	bl	800a9a8 <pbuf_free>
    }
    return ERR_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	e023      	b.n	80078d8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <recv_tcp+0xb2>
    msg = p;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	891b      	ldrh	r3, [r3, #8]
 800789e:	83fb      	strh	r3, [r7, #30]
 80078a0:	e003      	b.n	80078aa <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80078a2:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <recv_tcp+0x108>)
 80078a4:	61bb      	str	r3, [r7, #24]
    len = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	3310      	adds	r3, #16
 80078ae:	69b9      	ldr	r1, [r7, #24]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f00c fafd 	bl	8013eb0 <sys_mbox_trypost>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80078bc:	f04f 33ff 	mov.w	r3, #4294967295
 80078c0:	e00a      	b.n	80078d8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d005      	beq.n	80078d6 <recv_tcp+0xe6>
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	8bfa      	ldrh	r2, [r7, #30]
 80078d0:	2100      	movs	r1, #0
 80078d2:	6978      	ldr	r0, [r7, #20]
 80078d4:	4798      	blx	r3
  }

  return ERR_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3720      	adds	r7, #32
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	08015664 	.word	0x08015664
 80078e4:	08015740 	.word	0x08015740
 80078e8:	080156a8 	.word	0x080156a8
 80078ec:	08015764 	.word	0x08015764
 80078f0:	08015784 	.word	0x08015784
 80078f4:	0801579c 	.word	0x0801579c
 80078f8:	080187f6 	.word	0x080187f6

080078fc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d106      	bne.n	800791e <poll_tcp+0x22>
 8007910:	4b29      	ldr	r3, [pc, #164]	; (80079b8 <poll_tcp+0xbc>)
 8007912:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007916:	4929      	ldr	r1, [pc, #164]	; (80079bc <poll_tcp+0xc0>)
 8007918:	4829      	ldr	r0, [pc, #164]	; (80079c0 <poll_tcp+0xc4>)
 800791a:	f00c fcbd 	bl	8014298 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d104      	bne.n	8007930 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007926:	2101      	movs	r1, #1
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 ff63 	bl	80087f4 <lwip_netconn_do_writemore>
 800792e:	e016      	b.n	800795e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d112      	bne.n	800795e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <poll_tcp+0x5a>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	7a5b      	ldrb	r3, [r3, #9]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	7a5a      	ldrb	r2, [r3, #9]
 8007950:	3a01      	subs	r2, #1
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007956:	2101      	movs	r1, #1
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fbf7 	bl	800814c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	7f1b      	ldrb	r3, [r3, #28]
 8007962:	f003 0310 	and.w	r3, r3, #16
 8007966:	2b00      	cmp	r3, #0
 8007968:	d021      	beq.n	80079ae <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01d      	beq.n	80079ae <poll_tcp+0xb2>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800797a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800797e:	d316      	bcc.n	80079ae <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007988:	2b04      	cmp	r3, #4
 800798a:	d810      	bhi.n	80079ae <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	7f1b      	ldrb	r3, [r3, #28]
 8007990:	f023 0310 	bic.w	r3, r3, #16
 8007994:	b2da      	uxtb	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d005      	beq.n	80079ae <poll_tcp+0xb2>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	2200      	movs	r2, #0
 80079a8:	2102      	movs	r1, #2
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	08015664 	.word	0x08015664
 80079bc:	080157bc 	.word	0x080157bc
 80079c0:	080156a8 	.word	0x080156a8

080079c4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d106      	bne.n	80079ea <sent_tcp+0x26>
 80079dc:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <sent_tcp+0x9c>)
 80079de:	f240 1293 	movw	r2, #403	; 0x193
 80079e2:	4920      	ldr	r1, [pc, #128]	; (8007a64 <sent_tcp+0xa0>)
 80079e4:	4820      	ldr	r0, [pc, #128]	; (8007a68 <sent_tcp+0xa4>)
 80079e6:	f00c fc57 	bl	8014298 <iprintf>

  if (conn) {
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d032      	beq.n	8007a56 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	785b      	ldrb	r3, [r3, #1]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d104      	bne.n	8007a02 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80079f8:	2101      	movs	r1, #1
 80079fa:	6978      	ldr	r0, [r7, #20]
 80079fc:	f000 fefa 	bl	80087f4 <lwip_netconn_do_writemore>
 8007a00:	e007      	b.n	8007a12 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d103      	bne.n	8007a12 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	6978      	ldr	r0, [r7, #20]
 8007a0e:	f000 fb9d 	bl	800814c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d01d      	beq.n	8007a56 <sent_tcp+0x92>
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007a22:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007a26:	d316      	bcc.n	8007a56 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d810      	bhi.n	8007a56 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	7f1b      	ldrb	r3, [r3, #28]
 8007a38:	f023 0310 	bic.w	r3, r3, #16
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <sent_tcp+0x92>
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	88fa      	ldrh	r2, [r7, #6]
 8007a50:	2102      	movs	r1, #2
 8007a52:	6978      	ldr	r0, [r7, #20]
 8007a54:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	08015664 	.word	0x08015664
 8007a64:	080157bc 	.word	0x080157bc
 8007a68:	080156a8 	.word	0x080156a8

08007a6c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <err_tcp+0x24>
 8007a82:	4b5f      	ldr	r3, [pc, #380]	; (8007c00 <err_tcp+0x194>)
 8007a84:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8007a88:	495e      	ldr	r1, [pc, #376]	; (8007c04 <err_tcp+0x198>)
 8007a8a:	485f      	ldr	r0, [pc, #380]	; (8007c08 <err_tcp+0x19c>)
 8007a8c:	f00c fc04 	bl	8014298 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8007a90:	f00c fb9e 	bl	80141d0 <sys_arch_protect>
 8007a94:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	7f1b      	ldrb	r3, [r3, #28]
 8007aa6:	f043 0301 	orr.w	r3, r3, #1
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8007abc:	69b8      	ldr	r0, [r7, #24]
 8007abe:	f00c fb95 	bl	80141ec <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <err_tcp+0x6a>
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2104      	movs	r1, #4
 8007ad2:	69f8      	ldr	r0, [r7, #28]
 8007ad4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <err_tcp+0x7e>
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	69f8      	ldr	r0, [r7, #28]
 8007ae8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <err_tcp+0x92>
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2200      	movs	r2, #0
 8007af8:	2102      	movs	r1, #2
 8007afa:	69f8      	ldr	r0, [r7, #28]
 8007afc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8007afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fd8a 	bl	800761c <lwip_netconn_err_to_msg>
 8007b08:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f00c fa43 	bl	8013f9a <sys_mbox_valid>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	3310      	adds	r3, #16
 8007b1e:	6939      	ldr	r1, [r7, #16]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f00c f9c5 	bl	8013eb0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	3314      	adds	r3, #20
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f00c fa35 	bl	8013f9a <sys_mbox_valid>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	3314      	adds	r3, #20
 8007b3a:	6939      	ldr	r1, [r7, #16]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f00c f9b7 	bl	8013eb0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d005      	beq.n	8007b54 <err_tcp+0xe8>
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d002      	beq.n	8007b54 <err_tcp+0xe8>
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d143      	bne.n	8007bdc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	7f1b      	ldrb	r3, [r3, #28]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bf14      	ite	ne
 8007b60:	2301      	movne	r3, #1
 8007b62:	2300      	moveq	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	7f1b      	ldrb	r3, [r3, #28]
 8007b6c:	f023 0304 	bic.w	r3, r3, #4
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d13b      	bne.n	8007bf4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d106      	bne.n	8007b92 <err_tcp+0x126>
 8007b84:	4b1e      	ldr	r3, [pc, #120]	; (8007c00 <err_tcp+0x194>)
 8007b86:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007b8a:	4920      	ldr	r1, [pc, #128]	; (8007c0c <err_tcp+0x1a0>)
 8007b8c:	481e      	ldr	r0, [pc, #120]	; (8007c08 <err_tcp+0x19c>)
 8007b8e:	f00c fb83 	bl	8014298 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d104      	bne.n	8007ba2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	711a      	strb	r2, [r3, #4]
 8007ba0:	e003      	b.n	8007baa <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	330c      	adds	r3, #12
 8007bb2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007bb4:	68b8      	ldr	r0, [r7, #8]
 8007bb6:	f00c fa81 	bl	80140bc <sys_sem_valid>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d106      	bne.n	8007bce <err_tcp+0x162>
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <err_tcp+0x194>)
 8007bc2:	f240 12ef 	movw	r2, #495	; 0x1ef
 8007bc6:	4912      	ldr	r1, [pc, #72]	; (8007c10 <err_tcp+0x1a4>)
 8007bc8:	480f      	ldr	r0, [pc, #60]	; (8007c08 <err_tcp+0x19c>)
 8007bca:	f00c fb65 	bl	8014298 <iprintf>
      conn->current_msg = NULL;
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8007bd4:	68b8      	ldr	r0, [r7, #8]
 8007bd6:	f00c fa57 	bl	8014088 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8007bda:	e00b      	b.n	8007bf4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d008      	beq.n	8007bf6 <err_tcp+0x18a>
 8007be4:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <err_tcp+0x194>)
 8007be6:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007bea:	490a      	ldr	r1, [pc, #40]	; (8007c14 <err_tcp+0x1a8>)
 8007bec:	4806      	ldr	r0, [pc, #24]	; (8007c08 <err_tcp+0x19c>)
 8007bee:	f00c fb53 	bl	8014298 <iprintf>
  }
}
 8007bf2:	e000      	b.n	8007bf6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8007bf4:	bf00      	nop
}
 8007bf6:	bf00      	nop
 8007bf8:	3720      	adds	r7, #32
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	08015664 	.word	0x08015664
 8007c04:	080157bc 	.word	0x080157bc
 8007c08:	080156a8 	.word	0x080156a8
 8007c0c:	080157cc 	.word	0x080157cc
 8007c10:	080157e8 	.word	0x080157e8
 8007c14:	08015804 	.word	0x08015804

08007c18 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f004 fd2d 	bl	800c688 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8007c2e:	490a      	ldr	r1, [pc, #40]	; (8007c58 <setup_tcp+0x40>)
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f004 fd3b 	bl	800c6ac <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8007c36:	4909      	ldr	r1, [pc, #36]	; (8007c5c <setup_tcp+0x44>)
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f004 fd59 	bl	800c6f0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007c3e:	2202      	movs	r2, #2
 8007c40:	4907      	ldr	r1, [pc, #28]	; (8007c60 <setup_tcp+0x48>)
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f004 fdb0 	bl	800c7a8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8007c48:	4906      	ldr	r1, [pc, #24]	; (8007c64 <setup_tcp+0x4c>)
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f004 fd72 	bl	800c734 <tcp_err>
}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	080077f1 	.word	0x080077f1
 8007c5c:	080079c5 	.word	0x080079c5
 8007c60:	080078fd 	.word	0x080078fd
 8007c64:	08007a6d 	.word	0x08007a6d

08007c68 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8007c68:	b590      	push	{r4, r7, lr}
 8007c6a:	b089      	sub	sp, #36	; 0x24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <accept_function+0x1e>
    return ERR_VAL;
 8007c80:	f06f 0305 	mvn.w	r3, #5
 8007c84:	e0a1      	b.n	8007dca <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	3314      	adds	r3, #20
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f00c f985 	bl	8013f9a <sys_mbox_valid>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d102      	bne.n	8007c9c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8007c96:	f06f 0305 	mvn.w	r3, #5
 8007c9a:	e096      	b.n	8007dca <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d11b      	bne.n	8007cda <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	f103 0414 	add.w	r4, r3, #20
 8007ca8:	f06f 000c 	mvn.w	r0, #12
 8007cac:	f7ff fcb6 	bl	800761c <lwip_netconn_err_to_msg>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f00c f8fb 	bl	8013eb0 <sys_mbox_trypost>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <accept_function+0x6c>
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	69f8      	ldr	r0, [r7, #28]
 8007cd2:	4798      	blx	r3
    }
    return ERR_VAL;
 8007cd4:	f06f 0305 	mvn.w	r3, #5
 8007cd8:	e077      	b.n	8007dca <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8007cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d006      	beq.n	8007cf0 <accept_function+0x88>
 8007ce2:	4b3c      	ldr	r3, [pc, #240]	; (8007dd4 <accept_function+0x16c>)
 8007ce4:	f240 222a 	movw	r2, #554	; 0x22a
 8007ce8:	493b      	ldr	r1, [pc, #236]	; (8007dd8 <accept_function+0x170>)
 8007cea:	483c      	ldr	r0, [pc, #240]	; (8007ddc <accept_function+0x174>)
 8007cec:	f00c fad4 	bl	8014298 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	781a      	ldrb	r2, [r3, #0]
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f000 f8f0 	bl	8007ee0 <netconn_alloc>
 8007d00:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d11b      	bne.n	8007d40 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f103 0414 	add.w	r4, r3, #20
 8007d0e:	f06f 000c 	mvn.w	r0, #12
 8007d12:	f7ff fc83 	bl	800761c <lwip_netconn_err_to_msg>
 8007d16:	4603      	mov	r3, r0
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f00c f8c8 	bl	8013eb0 <sys_mbox_trypost>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d109      	bne.n	8007d3a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <accept_function+0xd2>
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	2200      	movs	r2, #0
 8007d34:	2100      	movs	r1, #0
 8007d36:	69f8      	ldr	r0, [r7, #28]
 8007d38:	4798      	blx	r3
    }
    return ERR_MEM;
 8007d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3e:	e044      	b.n	8007dca <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8007d46:	69b8      	ldr	r0, [r7, #24]
 8007d48:	f7ff ff66 	bl	8007c18 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	3314      	adds	r3, #20
 8007d50:	69b9      	ldr	r1, [r7, #24]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f00c f8ac 	bl	8013eb0 <sys_mbox_trypost>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d02a      	beq.n	8007db4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8007d64:	2100      	movs	r1, #0
 8007d66:	6978      	ldr	r0, [r7, #20]
 8007d68:	f004 fc8e 	bl	800c688 <tcp_arg>
    tcp_recv(pcb, NULL);
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f004 fc9c 	bl	800c6ac <tcp_recv>
    tcp_sent(pcb, NULL);
 8007d74:	2100      	movs	r1, #0
 8007d76:	6978      	ldr	r0, [r7, #20]
 8007d78:	f004 fcba 	bl	800c6f0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2100      	movs	r1, #0
 8007d80:	6978      	ldr	r0, [r7, #20]
 8007d82:	f004 fd11 	bl	800c7a8 <tcp_poll>
    tcp_err(pcb, NULL);
 8007d86:	2100      	movs	r1, #0
 8007d88:	6978      	ldr	r0, [r7, #20]
 8007d8a:	f004 fcd3 	bl	800c734 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	2200      	movs	r2, #0
 8007d92:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	3310      	adds	r3, #16
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f00c f877 	bl	8013e8c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	3310      	adds	r3, #16
 8007da2:	4618      	mov	r0, r3
 8007da4:	f00c f90a 	bl	8013fbc <sys_mbox_set_invalid>
    netconn_free(newconn);
 8007da8:	69b8      	ldr	r0, [r7, #24]
 8007daa:	f000 f907 	bl	8007fbc <netconn_free>
    return ERR_MEM;
 8007dae:	f04f 33ff 	mov.w	r3, #4294967295
 8007db2:	e00a      	b.n	8007dca <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <accept_function+0x160>
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	69f8      	ldr	r0, [r7, #28]
 8007dc6:	4798      	blx	r3
  }

  return ERR_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3724      	adds	r7, #36	; 0x24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd90      	pop	{r4, r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	08015664 	.word	0x08015664
 8007dd8:	08015820 	.word	0x08015820
 8007ddc:	080156a8 	.word	0x080156a8

08007de0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8007de0:	b590      	push	{r4, r7, lr}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d006      	beq.n	8007e04 <pcb_new+0x24>
 8007df6:	4b2b      	ldr	r3, [pc, #172]	; (8007ea4 <pcb_new+0xc4>)
 8007df8:	f240 2265 	movw	r2, #613	; 0x265
 8007dfc:	492a      	ldr	r1, [pc, #168]	; (8007ea8 <pcb_new+0xc8>)
 8007dfe:	482b      	ldr	r0, [pc, #172]	; (8007eac <pcb_new+0xcc>)
 8007e00:	f00c fa4a 	bl	8014298 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e0e:	2b10      	cmp	r3, #16
 8007e10:	d022      	beq.n	8007e58 <pcb_new+0x78>
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d133      	bne.n	8007e7e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681c      	ldr	r4, [r3, #0]
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f009 fd1c 	bl	801185a <udp_new_ip_type>
 8007e22:	4603      	mov	r3, r0
 8007e24:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d02a      	beq.n	8007e86 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	2b22      	cmp	r3, #34	; 0x22
 8007e38:	d104      	bne.n	8007e44 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6858      	ldr	r0, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	4917      	ldr	r1, [pc, #92]	; (8007eb0 <pcb_new+0xd0>)
 8007e52:	f009 fc89 	bl	8011768 <udp_recv>
      }
      break;
 8007e56:	e016      	b.n	8007e86 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681c      	ldr	r4, [r3, #0]
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f004 fc04 	bl	800c66c <tcp_new_ip_type>
 8007e64:	4603      	mov	r3, r0
 8007e66:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00b      	beq.n	8007e8a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff fece 	bl	8007c18 <setup_tcp>
      }
      break;
 8007e7c:	e005      	b.n	8007e8a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	22fa      	movs	r2, #250	; 0xfa
 8007e82:	711a      	strb	r2, [r3, #4]
      return;
 8007e84:	e00a      	b.n	8007e9c <pcb_new+0xbc>
      break;
 8007e86:	bf00      	nop
 8007e88:	e000      	b.n	8007e8c <pcb_new+0xac>
      break;
 8007e8a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d102      	bne.n	8007e9c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	22ff      	movs	r2, #255	; 0xff
 8007e9a:	711a      	strb	r2, [r3, #4]
  }
}
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd90      	pop	{r4, r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	08015664 	.word	0x08015664
 8007ea8:	08015848 	.word	0x08015848
 8007eac:	080156a8 	.word	0x080156a8
 8007eb0:	080076f5 	.word	0x080076f5

08007eb4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d102      	bne.n	8007ed6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff ff85 	bl	8007de0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8007ed6:	bf00      	nop
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	6039      	str	r1, [r7, #0]
 8007eea:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007ef0:	2007      	movs	r0, #7
 8007ef2:	f001 fe67 	bl	8009bc4 <memp_malloc>
 8007ef6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <netconn_alloc+0x22>
    return NULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	e052      	b.n	8007fa8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	79fa      	ldrb	r2, [r7, #7]
 8007f0c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f1a:	2b10      	cmp	r3, #16
 8007f1c:	d004      	beq.n	8007f28 <netconn_alloc+0x48>
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	d105      	bne.n	8007f2e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8007f22:	2306      	movs	r3, #6
 8007f24:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8007f26:	e00a      	b.n	8007f3e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8007f28:	2306      	movs	r3, #6
 8007f2a:	617b      	str	r3, [r7, #20]
      break;
 8007f2c:	e007      	b.n	8007f3e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8007f2e:	4b20      	ldr	r3, [pc, #128]	; (8007fb0 <netconn_alloc+0xd0>)
 8007f30:	f240 22e5 	movw	r2, #741	; 0x2e5
 8007f34:	491f      	ldr	r1, [pc, #124]	; (8007fb4 <netconn_alloc+0xd4>)
 8007f36:	4820      	ldr	r0, [pc, #128]	; (8007fb8 <netconn_alloc+0xd8>)
 8007f38:	f00c f9ae 	bl	8014298 <iprintf>
      goto free_and_return;
 8007f3c:	e02f      	b.n	8007f9e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3310      	adds	r3, #16
 8007f42:	6979      	ldr	r1, [r7, #20]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f00b ff7f 	bl	8013e48 <sys_mbox_new>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d125      	bne.n	8007f9c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	330c      	adds	r3, #12
 8007f54:	2100      	movs	r1, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f00c f83d 	bl	8013fd6 <sys_sem_new>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d005      	beq.n	8007f6e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3310      	adds	r3, #16
 8007f66:	4618      	mov	r0, r3
 8007f68:	f00b ff90 	bl	8013e8c <sys_mbox_free>
    goto free_and_return;
 8007f6c:	e017      	b.n	8007f9e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3314      	adds	r3, #20
 8007f72:	4618      	mov	r0, r3
 8007f74:	f00c f822 	bl	8013fbc <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f04f 32ff 	mov.w	r2, #4294967295
 8007f84:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	7cfa      	ldrb	r2, [r7, #19]
 8007f96:	771a      	strb	r2, [r3, #28]
  return conn;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	e005      	b.n	8007fa8 <netconn_alloc+0xc8>
    goto free_and_return;
 8007f9c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	2007      	movs	r0, #7
 8007fa2:	f001 fe61 	bl	8009c68 <memp_free>
  return NULL;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	08015664 	.word	0x08015664
 8007fb4:	08015868 	.word	0x08015868
 8007fb8:	080156a8 	.word	0x080156a8

08007fbc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d006      	beq.n	8007fda <netconn_free+0x1e>
 8007fcc:	4b1b      	ldr	r3, [pc, #108]	; (800803c <netconn_free+0x80>)
 8007fce:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007fd2:	491b      	ldr	r1, [pc, #108]	; (8008040 <netconn_free+0x84>)
 8007fd4:	481b      	ldr	r0, [pc, #108]	; (8008044 <netconn_free+0x88>)
 8007fd6:	f00c f95f 	bl	8014298 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3310      	adds	r3, #16
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f00b ffdb 	bl	8013f9a <sys_mbox_valid>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d006      	beq.n	8007ff8 <netconn_free+0x3c>
 8007fea:	4b14      	ldr	r3, [pc, #80]	; (800803c <netconn_free+0x80>)
 8007fec:	f44f 7249 	mov.w	r2, #804	; 0x324
 8007ff0:	4915      	ldr	r1, [pc, #84]	; (8008048 <netconn_free+0x8c>)
 8007ff2:	4814      	ldr	r0, [pc, #80]	; (8008044 <netconn_free+0x88>)
 8007ff4:	f00c f950 	bl	8014298 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3314      	adds	r3, #20
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f00b ffcc 	bl	8013f9a <sys_mbox_valid>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d006      	beq.n	8008016 <netconn_free+0x5a>
 8008008:	4b0c      	ldr	r3, [pc, #48]	; (800803c <netconn_free+0x80>)
 800800a:	f240 3227 	movw	r2, #807	; 0x327
 800800e:	490f      	ldr	r1, [pc, #60]	; (800804c <netconn_free+0x90>)
 8008010:	480c      	ldr	r0, [pc, #48]	; (8008044 <netconn_free+0x88>)
 8008012:	f00c f941 	bl	8014298 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	330c      	adds	r3, #12
 800801a:	4618      	mov	r0, r3
 800801c:	f00c f841 	bl	80140a2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	330c      	adds	r3, #12
 8008024:	4618      	mov	r0, r3
 8008026:	f00c f85a 	bl	80140de <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	2007      	movs	r0, #7
 800802e:	f001 fe1b 	bl	8009c68 <memp_free>
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	08015664 	.word	0x08015664
 8008040:	08015890 	.word	0x08015890
 8008044:	080156a8 	.word	0x080156a8
 8008048:	080158c0 	.word	0x080158c0
 800804c:	080158fc 	.word	0x080158fc

08008050 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3310      	adds	r3, #16
 800805c:	4618      	mov	r0, r3
 800805e:	f00b ff9c 	bl	8013f9a <sys_mbox_valid>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d02f      	beq.n	80080c8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008068:	e018      	b.n	800809c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008072:	2b10      	cmp	r3, #16
 8008074:	d10e      	bne.n	8008094 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f107 020f 	add.w	r2, r7, #15
 800807c:	4611      	mov	r1, r2
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff fafe 	bl	8007680 <lwip_netconn_is_err_msg>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d108      	bne.n	800809c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4618      	mov	r0, r3
 800808e:	f002 fc8b 	bl	800a9a8 <pbuf_free>
 8008092:	e003      	b.n	800809c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fe90 	bl	8008dbc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3310      	adds	r3, #16
 80080a0:	f107 0210 	add.w	r2, r7, #16
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f00b ff5b 	bl	8013f62 <sys_arch_mbox_tryfetch>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b2:	d1da      	bne.n	800806a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3310      	adds	r3, #16
 80080b8:	4618      	mov	r0, r3
 80080ba:	f00b fee7 	bl	8013e8c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3310      	adds	r3, #16
 80080c2:	4618      	mov	r0, r3
 80080c4:	f00b ff7a 	bl	8013fbc <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3314      	adds	r3, #20
 80080cc:	4618      	mov	r0, r3
 80080ce:	f00b ff64 	bl	8013f9a <sys_mbox_valid>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d034      	beq.n	8008142 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80080d8:	e01d      	b.n	8008116 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f107 020e 	add.w	r2, r7, #14
 80080e0:	4611      	mov	r1, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff facc 	bl	8007680 <lwip_netconn_is_err_msg>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d113      	bne.n	8008116 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80080f2:	6978      	ldr	r0, [r7, #20]
 80080f4:	f7ff ffac 	bl	8008050 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d007      	beq.n	8008110 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	4618      	mov	r0, r3
 8008106:	f003 fa35 	bl	800b574 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2200      	movs	r2, #0
 800810e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008110:	6978      	ldr	r0, [r7, #20]
 8008112:	f7ff ff53 	bl	8007fbc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3314      	adds	r3, #20
 800811a:	f107 0210 	add.w	r2, r7, #16
 800811e:	4611      	mov	r1, r2
 8008120:	4618      	mov	r0, r3
 8008122:	f00b ff1e 	bl	8013f62 <sys_arch_mbox_tryfetch>
 8008126:	4603      	mov	r3, r0
 8008128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812c:	d1d5      	bne.n	80080da <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	3314      	adds	r3, #20
 8008132:	4618      	mov	r0, r3
 8008134:	f00b feaa 	bl	8013e8c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3314      	adds	r3, #20
 800813c:	4618      	mov	r0, r3
 800813e:	f00b ff3d 	bl	8013fbc <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008142:	bf00      	nop
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d106      	bne.n	8008170 <lwip_netconn_do_close_internal+0x24>
 8008162:	4ba1      	ldr	r3, [pc, #644]	; (80083e8 <lwip_netconn_do_close_internal+0x29c>)
 8008164:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008168:	49a0      	ldr	r1, [pc, #640]	; (80083ec <lwip_netconn_do_close_internal+0x2a0>)
 800816a:	48a1      	ldr	r0, [pc, #644]	; (80083f0 <lwip_netconn_do_close_internal+0x2a4>)
 800816c:	f00c f894 	bl	8014298 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008178:	2b10      	cmp	r3, #16
 800817a:	d006      	beq.n	800818a <lwip_netconn_do_close_internal+0x3e>
 800817c:	4b9a      	ldr	r3, [pc, #616]	; (80083e8 <lwip_netconn_do_close_internal+0x29c>)
 800817e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008182:	499c      	ldr	r1, [pc, #624]	; (80083f4 <lwip_netconn_do_close_internal+0x2a8>)
 8008184:	489a      	ldr	r0, [pc, #616]	; (80083f0 <lwip_netconn_do_close_internal+0x2a4>)
 8008186:	f00c f887 	bl	8014298 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	2b04      	cmp	r3, #4
 8008190:	d006      	beq.n	80081a0 <lwip_netconn_do_close_internal+0x54>
 8008192:	4b95      	ldr	r3, [pc, #596]	; (80083e8 <lwip_netconn_do_close_internal+0x29c>)
 8008194:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008198:	4997      	ldr	r1, [pc, #604]	; (80083f8 <lwip_netconn_do_close_internal+0x2ac>)
 800819a:	4895      	ldr	r0, [pc, #596]	; (80083f0 <lwip_netconn_do_close_internal+0x2a4>)
 800819c:	f00c f87c 	bl	8014298 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d106      	bne.n	80081b6 <lwip_netconn_do_close_internal+0x6a>
 80081a8:	4b8f      	ldr	r3, [pc, #572]	; (80083e8 <lwip_netconn_do_close_internal+0x29c>)
 80081aa:	f240 32a5 	movw	r2, #933	; 0x3a5
 80081ae:	4993      	ldr	r1, [pc, #588]	; (80083fc <lwip_netconn_do_close_internal+0x2b0>)
 80081b0:	488f      	ldr	r0, [pc, #572]	; (80083f0 <lwip_netconn_do_close_internal+0x2a4>)
 80081b2:	f00c f871 	bl	8014298 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <lwip_netconn_do_close_internal+0x80>
 80081be:	4b8a      	ldr	r3, [pc, #552]	; (80083e8 <lwip_netconn_do_close_internal+0x29c>)
 80081c0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80081c4:	498e      	ldr	r1, [pc, #568]	; (8008400 <lwip_netconn_do_close_internal+0x2b4>)
 80081c6:	488a      	ldr	r0, [pc, #552]	; (80083f0 <lwip_netconn_do_close_internal+0x2a4>)
 80081c8:	f00c f866 	bl	8014298 <iprintf>

  tpcb = conn->pcb.tcp;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	7a1b      	ldrb	r3, [r3, #8]
 80081d8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d102      	bne.n	80081f6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80081f0:	2301      	movs	r3, #1
 80081f2:	75bb      	strb	r3, [r7, #22]
 80081f4:	e01f      	b.n	8008236 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00e      	beq.n	800821a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008200:	2b05      	cmp	r3, #5
 8008202:	d007      	beq.n	8008214 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008208:	2b06      	cmp	r3, #6
 800820a:	d003      	beq.n	8008214 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008210:	2b08      	cmp	r3, #8
 8008212:	d102      	bne.n	800821a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008214:	2301      	movs	r3, #1
 8008216:	75bb      	strb	r3, [r7, #22]
 8008218:	e00d      	b.n	8008236 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800821a:	7b7b      	ldrb	r3, [r7, #13]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d008      	beq.n	8008232 <lwip_netconn_do_close_internal+0xe6>
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	8b5b      	ldrh	r3, [r3, #26]
 8008224:	f003 0310 	and.w	r3, r3, #16
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800822c:	2301      	movs	r3, #1
 800822e:	75bb      	strb	r3, [r7, #22]
 8008230:	e001      	b.n	8008236 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008236:	7dbb      	ldrb	r3, [r7, #22]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800823c:	2100      	movs	r1, #0
 800823e:	6938      	ldr	r0, [r7, #16]
 8008240:	f004 fa22 	bl	800c688 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	7d1b      	ldrb	r3, [r3, #20]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d104      	bne.n	8008256 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800824c:	2100      	movs	r1, #0
 800824e:	6938      	ldr	r0, [r7, #16]
 8008250:	f004 fa92 	bl	800c778 <tcp_accept>
 8008254:	e01d      	b.n	8008292 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d007      	beq.n	800826c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800825c:	2100      	movs	r1, #0
 800825e:	6938      	ldr	r0, [r7, #16]
 8008260:	f004 fa24 	bl	800c6ac <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008264:	2100      	movs	r1, #0
 8008266:	6938      	ldr	r0, [r7, #16]
 8008268:	f004 fa86 	bl	800c778 <tcp_accept>
    }
    if (shut_tx) {
 800826c:	7b7b      	ldrb	r3, [r7, #13]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008272:	2100      	movs	r1, #0
 8008274:	6938      	ldr	r0, [r7, #16]
 8008276:	f004 fa3b 	bl	800c6f0 <tcp_sent>
    }
    if (shut_close) {
 800827a:	7dbb      	ldrb	r3, [r7, #22]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008280:	2200      	movs	r2, #0
 8008282:	2100      	movs	r1, #0
 8008284:	6938      	ldr	r0, [r7, #16]
 8008286:	f004 fa8f 	bl	800c7a8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800828a:	2100      	movs	r1, #0
 800828c:	6938      	ldr	r0, [r7, #16]
 800828e:	f004 fa51 	bl	800c734 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8008292:	7dbb      	ldrb	r3, [r7, #22]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008298:	6938      	ldr	r0, [r7, #16]
 800829a:	f003 f827 	bl	800b2ec <tcp_close>
 800829e:	4603      	mov	r3, r0
 80082a0:	75fb      	strb	r3, [r7, #23]
 80082a2:	e007      	b.n	80082b4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	7b7a      	ldrb	r2, [r7, #13]
 80082a8:	4619      	mov	r1, r3
 80082aa:	6938      	ldr	r0, [r7, #16]
 80082ac:	f003 f84a 	bl	800b344 <tcp_shutdown>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80082b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d102      	bne.n	80082c2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80082bc:	2301      	movs	r3, #1
 80082be:	757b      	strb	r3, [r7, #21]
 80082c0:	e016      	b.n	80082f0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80082c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ca:	d10f      	bne.n	80082ec <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	7a5b      	ldrb	r3, [r3, #9]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10c      	bne.n	80082f0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80082d6:	2301      	movs	r3, #1
 80082d8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80082da:	7dbb      	ldrb	r3, [r7, #22]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80082e0:	6938      	ldr	r0, [r7, #16]
 80082e2:	f003 f947 	bl	800b574 <tcp_abort>
          err = ERR_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	75fb      	strb	r3, [r7, #23]
 80082ea:	e001      	b.n	80082f0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80082ec:	2301      	movs	r3, #1
 80082ee:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80082f0:	7d7b      	ldrb	r3, [r7, #21]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d044      	beq.n	8008380 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	330c      	adds	r3, #12
 80082fe:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	7dfa      	ldrb	r2, [r7, #23]
 8008306:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d129      	bne.n	8008370 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800831c:	7dbb      	ldrb	r3, [r7, #22]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00c      	beq.n	800833c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	d005      	beq.n	800833c <lwip_netconn_do_close_internal+0x1f0>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	2200      	movs	r2, #0
 8008336:	2104      	movs	r1, #4
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
      }
      if (shut_rx) {
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d009      	beq.n	8008356 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <lwip_netconn_do_close_internal+0x20a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	2200      	movs	r2, #0
 8008350:	2100      	movs	r1, #0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	4798      	blx	r3
      }
      if (shut_tx) {
 8008356:	7b7b      	ldrb	r3, [r7, #13]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d009      	beq.n	8008370 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	2b00      	cmp	r3, #0
 8008362:	d005      	beq.n	8008370 <lwip_netconn_do_close_internal+0x224>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2200      	movs	r2, #0
 800836a:	2102      	movs	r1, #2
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008376:	68b8      	ldr	r0, [r7, #8]
 8008378:	f00b fe86 	bl	8014088 <sys_sem_signal>
    }
    return ERR_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	e02e      	b.n	80083de <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8008380:	7d7b      	ldrb	r3, [r7, #21]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d11e      	bne.n	80083c4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	7d1b      	ldrb	r3, [r3, #20]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d106      	bne.n	800839c <lwip_netconn_do_close_internal+0x250>
 800838e:	4b16      	ldr	r3, [pc, #88]	; (80083e8 <lwip_netconn_do_close_internal+0x29c>)
 8008390:	f240 4241 	movw	r2, #1089	; 0x441
 8008394:	491b      	ldr	r1, [pc, #108]	; (8008404 <lwip_netconn_do_close_internal+0x2b8>)
 8008396:	4816      	ldr	r0, [pc, #88]	; (80083f0 <lwip_netconn_do_close_internal+0x2a4>)
 8008398:	f00b ff7e 	bl	8014298 <iprintf>
    if (shut_tx) {
 800839c:	7b7b      	ldrb	r3, [r7, #13]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80083a2:	4919      	ldr	r1, [pc, #100]	; (8008408 <lwip_netconn_do_close_internal+0x2bc>)
 80083a4:	6938      	ldr	r0, [r7, #16]
 80083a6:	f004 f9a3 	bl	800c6f0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80083aa:	2201      	movs	r2, #1
 80083ac:	4917      	ldr	r1, [pc, #92]	; (800840c <lwip_netconn_do_close_internal+0x2c0>)
 80083ae:	6938      	ldr	r0, [r7, #16]
 80083b0:	f004 f9fa 	bl	800c7a8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80083b4:	4916      	ldr	r1, [pc, #88]	; (8008410 <lwip_netconn_do_close_internal+0x2c4>)
 80083b6:	6938      	ldr	r0, [r7, #16]
 80083b8:	f004 f9bc 	bl	800c734 <tcp_err>
    tcp_arg(tpcb, conn);
 80083bc:	6879      	ldr	r1, [r7, #4]
 80083be:	6938      	ldr	r0, [r7, #16]
 80083c0:	f004 f962 	bl	800c688 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80083c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d106      	bne.n	80083da <lwip_netconn_do_close_internal+0x28e>
 80083cc:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <lwip_netconn_do_close_internal+0x29c>)
 80083ce:	f240 424d 	movw	r2, #1101	; 0x44d
 80083d2:	4910      	ldr	r1, [pc, #64]	; (8008414 <lwip_netconn_do_close_internal+0x2c8>)
 80083d4:	4806      	ldr	r0, [pc, #24]	; (80083f0 <lwip_netconn_do_close_internal+0x2a4>)
 80083d6:	f00b ff5f 	bl	8014298 <iprintf>
  return err;
 80083da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	08015664 	.word	0x08015664
 80083ec:	08015938 	.word	0x08015938
 80083f0:	080156a8 	.word	0x080156a8
 80083f4:	08015948 	.word	0x08015948
 80083f8:	08015968 	.word	0x08015968
 80083fc:	0801598c 	.word	0x0801598c
 8008400:	080157cc 	.word	0x080157cc
 8008404:	080159a0 	.word	0x080159a0
 8008408:	080079c5 	.word	0x080079c5
 800840c:	080078fd 	.word	0x080078fd
 8008410:	08007a6d 	.word	0x08007a6d
 8008414:	080159c4 	.word	0x080159c4

08008418 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00d      	beq.n	800844e <lwip_netconn_do_delconn+0x36>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800843c:	2b10      	cmp	r3, #16
 800843e:	d006      	beq.n	800844e <lwip_netconn_do_delconn+0x36>
 8008440:	4b60      	ldr	r3, [pc, #384]	; (80085c4 <lwip_netconn_do_delconn+0x1ac>)
 8008442:	f240 425f 	movw	r2, #1119	; 0x45f
 8008446:	4960      	ldr	r1, [pc, #384]	; (80085c8 <lwip_netconn_do_delconn+0x1b0>)
 8008448:	4860      	ldr	r0, [pc, #384]	; (80085cc <lwip_netconn_do_delconn+0x1b4>)
 800844a:	f00b ff25 	bl	8014298 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <lwip_netconn_do_delconn+0x48>
 8008454:	7afb      	ldrb	r3, [r7, #11]
 8008456:	2b02      	cmp	r3, #2
 8008458:	d002      	beq.n	8008460 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800845a:	7afb      	ldrb	r3, [r7, #11]
 800845c:	2b03      	cmp	r3, #3
 800845e:	d109      	bne.n	8008474 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	2b03      	cmp	r3, #3
 8008464:	d10a      	bne.n	800847c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	7f1b      	ldrb	r3, [r3, #28]
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	22fb      	movs	r2, #251	; 0xfb
 8008478:	711a      	strb	r2, [r3, #4]
 800847a:	e097      	b.n	80085ac <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800847c:	7afb      	ldrb	r3, [r7, #11]
 800847e:	2b03      	cmp	r3, #3
 8008480:	d10d      	bne.n	800849e <lwip_netconn_do_delconn+0x86>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	7f1b      	ldrb	r3, [r3, #28]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d106      	bne.n	800849e <lwip_netconn_do_delconn+0x86>
 8008490:	4b4c      	ldr	r3, [pc, #304]	; (80085c4 <lwip_netconn_do_delconn+0x1ac>)
 8008492:	f240 427b 	movw	r2, #1147	; 0x47b
 8008496:	494e      	ldr	r1, [pc, #312]	; (80085d0 <lwip_netconn_do_delconn+0x1b8>)
 8008498:	484c      	ldr	r0, [pc, #304]	; (80085cc <lwip_netconn_do_delconn+0x1b4>)
 800849a:	f00b fefd 	bl	8014298 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff fdd1 	bl	8008050 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d05f      	beq.n	8008578 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084c2:	2b10      	cmp	r3, #16
 80084c4:	d00e      	beq.n	80084e4 <lwip_netconn_do_delconn+0xcc>
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d000      	beq.n	80084cc <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 80084ca:	e051      	b.n	8008570 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	4618      	mov	r0, r3
 80084de:	f009 f963 	bl	80117a8 <udp_remove>
          break;
 80084e2:	e045      	b.n	8008570 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d006      	beq.n	80084fc <lwip_netconn_do_delconn+0xe4>
 80084ee:	4b35      	ldr	r3, [pc, #212]	; (80085c4 <lwip_netconn_do_delconn+0x1ac>)
 80084f0:	f240 4294 	movw	r2, #1172	; 0x494
 80084f4:	4937      	ldr	r1, [pc, #220]	; (80085d4 <lwip_netconn_do_delconn+0x1bc>)
 80084f6:	4835      	ldr	r0, [pc, #212]	; (80085cc <lwip_netconn_do_delconn+0x1b4>)
 80084f8:	f00b fece 	bl	8014298 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2204      	movs	r2, #4
 8008502:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2203      	movs	r2, #3
 8008508:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2100      	movs	r1, #0
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff fe17 	bl	800814c <lwip_netconn_do_close_internal>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d04a      	beq.n	80085ba <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	2b04      	cmp	r3, #4
 800852c:	d006      	beq.n	800853c <lwip_netconn_do_delconn+0x124>
 800852e:	4b25      	ldr	r3, [pc, #148]	; (80085c4 <lwip_netconn_do_delconn+0x1ac>)
 8008530:	f240 429a 	movw	r2, #1178	; 0x49a
 8008534:	4928      	ldr	r1, [pc, #160]	; (80085d8 <lwip_netconn_do_delconn+0x1c0>)
 8008536:	4825      	ldr	r0, [pc, #148]	; (80085cc <lwip_netconn_do_delconn+0x1b4>)
 8008538:	f00b feae 	bl	8014298 <iprintf>
            UNLOCK_TCPIP_CORE();
 800853c:	4827      	ldr	r0, [pc, #156]	; (80085dc <lwip_netconn_do_delconn+0x1c4>)
 800853e:	f00b fe14 	bl	801416a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	330c      	adds	r3, #12
 8008548:	2100      	movs	r1, #0
 800854a:	4618      	mov	r0, r3
 800854c:	f00b fd6b 	bl	8014026 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8008550:	4822      	ldr	r0, [pc, #136]	; (80085dc <lwip_netconn_do_delconn+0x1c4>)
 8008552:	f00b fdfb 	bl	801414c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d02c      	beq.n	80085ba <lwip_netconn_do_delconn+0x1a2>
 8008560:	4b18      	ldr	r3, [pc, #96]	; (80085c4 <lwip_netconn_do_delconn+0x1ac>)
 8008562:	f240 429e 	movw	r2, #1182	; 0x49e
 8008566:	491c      	ldr	r1, [pc, #112]	; (80085d8 <lwip_netconn_do_delconn+0x1c0>)
 8008568:	4818      	ldr	r0, [pc, #96]	; (80085cc <lwip_netconn_do_delconn+0x1b4>)
 800856a:	f00b fe95 	bl	8014298 <iprintf>
          return;
 800856e:	e024      	b.n	80085ba <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2200      	movs	r2, #0
 8008576:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b00      	cmp	r3, #0
 8008580:	d007      	beq.n	8008592 <lwip_netconn_do_delconn+0x17a>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	6810      	ldr	r0, [r2, #0]
 800858c:	2200      	movs	r2, #0
 800858e:	2100      	movs	r1, #0
 8008590:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	d007      	beq.n	80085ac <lwip_netconn_do_delconn+0x194>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	6810      	ldr	r0, [r2, #0]
 80085a6:	2200      	movs	r2, #0
 80085a8:	2102      	movs	r1, #2
 80085aa:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	330c      	adds	r3, #12
 80085b2:	4618      	mov	r0, r3
 80085b4:	f00b fd82 	bl	80140bc <sys_sem_valid>
 80085b8:	e000      	b.n	80085bc <lwip_netconn_do_delconn+0x1a4>
          return;
 80085ba:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	08015664 	.word	0x08015664
 80085c8:	080159d4 	.word	0x080159d4
 80085cc:	080156a8 	.word	0x080156a8
 80085d0:	080159e8 	.word	0x080159e8
 80085d4:	08015a08 	.word	0x08015a08
 80085d8:	08015a24 	.word	0x08015a24
 80085dc:	200075a4 	.word	0x200075a4

080085e0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d026      	beq.n	8008644 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008600:	2b10      	cmp	r3, #16
 8008602:	d00e      	beq.n	8008622 <lwip_netconn_do_bind+0x42>
 8008604:	2b20      	cmp	r3, #32
 8008606:	d119      	bne.n	800863c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6858      	ldr	r0, [r3, #4]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	6899      	ldr	r1, [r3, #8]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	899b      	ldrh	r3, [r3, #12]
 8008616:	461a      	mov	r2, r3
 8008618:	f009 f81e 	bl	8011658 <udp_bind>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
        break;
 8008620:	e012      	b.n	8008648 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6858      	ldr	r0, [r3, #4]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	6899      	ldr	r1, [r3, #8]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	899b      	ldrh	r3, [r3, #12]
 8008630:	461a      	mov	r2, r3
 8008632:	f002 ffab 	bl	800b58c <tcp_bind>
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]
        break;
 800863a:	e005      	b.n	8008648 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800863c:	23fa      	movs	r3, #250	; 0xfa
 800863e:	73fb      	strb	r3, [r7, #15]
        break;
 8008640:	bf00      	nop
 8008642:	e001      	b.n	8008648 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 8008644:	23fa      	movs	r3, #250	; 0xfa
 8008646:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	7bfa      	ldrb	r2, [r7, #15]
 800864c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800864e:	bf00      	nop
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d07f      	beq.n	800876e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008678:	2b10      	cmp	r3, #16
 800867a:	d175      	bne.n	8008768 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d165      	bne.n	8008752 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	7d1b      	ldrb	r3, [r3, #20]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8008692:	23fa      	movs	r3, #250	; 0xfa
 8008694:	72fb      	strb	r3, [r7, #11]
 8008696:	e06c      	b.n	8008772 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8008698:	23ff      	movs	r3, #255	; 0xff
 800869a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f107 020b 	add.w	r2, r7, #11
 80086a6:	7cf9      	ldrb	r1, [r7, #19]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f003 f827 	bl	800b6fc <tcp_listen_with_backlog_and_err>
 80086ae:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d05d      	beq.n	8008772 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3310      	adds	r3, #16
 80086bc:	4618      	mov	r0, r3
 80086be:	f00b fc6c 	bl	8013f9a <sys_mbox_valid>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	3310      	adds	r3, #16
 80086ce:	4618      	mov	r0, r3
 80086d0:	f00b fbdc 	bl	8013e8c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3310      	adds	r3, #16
 80086da:	4618      	mov	r0, r3
 80086dc:	f00b fc6e 	bl	8013fbc <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3314      	adds	r3, #20
 80086ea:	4618      	mov	r0, r3
 80086ec:	f00b fc55 	bl	8013f9a <sys_mbox_valid>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d108      	bne.n	8008708 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3314      	adds	r3, #20
 80086fc:	2106      	movs	r1, #6
 80086fe:	4618      	mov	r0, r3
 8008700:	f00b fba2 	bl	8013e48 <sys_mbox_new>
 8008704:	4603      	mov	r3, r0
 8008706:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8008708:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d118      	bne.n	8008742 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2202      	movs	r2, #2
 8008716:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4619      	mov	r1, r3
 800872c:	4610      	mov	r0, r2
 800872e:	f003 ffab 	bl	800c688 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	4912      	ldr	r1, [pc, #72]	; (8008784 <lwip_netconn_do_listen+0x12c>)
 800873a:	4618      	mov	r0, r3
 800873c:	f004 f81c 	bl	800c778 <tcp_accept>
 8008740:	e017      	b.n	8008772 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f002 fdd2 	bl	800b2ec <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2200      	movs	r2, #0
 800874e:	605a      	str	r2, [r3, #4]
 8008750:	e00f      	b.n	8008772 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	785b      	ldrb	r3, [r3, #1]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d102      	bne.n	8008762 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	72fb      	strb	r3, [r7, #11]
 8008760:	e007      	b.n	8008772 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8008762:	23f5      	movs	r3, #245	; 0xf5
 8008764:	72fb      	strb	r3, [r7, #11]
 8008766:	e004      	b.n	8008772 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8008768:	23f0      	movs	r3, #240	; 0xf0
 800876a:	72fb      	strb	r3, [r7, #11]
 800876c:	e001      	b.n	8008772 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800876e:	23f5      	movs	r3, #245	; 0xf5
 8008770:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8008772:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800877a:	bf00      	nop
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	08007c69 	.word	0x08007c69

08008788 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2200      	movs	r2, #0
 8008798:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d022      	beq.n	80087ea <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087ae:	2b10      	cmp	r3, #16
 80087b0:	d11b      	bne.n	80087ea <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087be:	d202      	bcs.n	80087c6 <lwip_netconn_do_recv+0x3e>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	e001      	b.n	80087ca <lwip_netconn_do_recv+0x42>
 80087c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087ca:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	89fa      	ldrh	r2, [r7, #14]
 80087d4:	4611      	mov	r1, r2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f003 f894 	bl	800b904 <tcp_recved>
        remaining -= recved;
 80087dc:	89fb      	ldrh	r3, [r7, #14]
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e6      	bne.n	80087b8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80087ea:	bf00      	nop
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d106      	bne.n	8008818 <lwip_netconn_do_writemore+0x24>
 800880a:	4b96      	ldr	r3, [pc, #600]	; (8008a64 <lwip_netconn_do_writemore+0x270>)
 800880c:	f240 6273 	movw	r2, #1651	; 0x673
 8008810:	4995      	ldr	r1, [pc, #596]	; (8008a68 <lwip_netconn_do_writemore+0x274>)
 8008812:	4896      	ldr	r0, [pc, #600]	; (8008a6c <lwip_netconn_do_writemore+0x278>)
 8008814:	f00b fd40 	bl	8014298 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	785b      	ldrb	r3, [r3, #1]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d006      	beq.n	800882e <lwip_netconn_do_writemore+0x3a>
 8008820:	4b90      	ldr	r3, [pc, #576]	; (8008a64 <lwip_netconn_do_writemore+0x270>)
 8008822:	f240 6274 	movw	r2, #1652	; 0x674
 8008826:	4992      	ldr	r1, [pc, #584]	; (8008a70 <lwip_netconn_do_writemore+0x27c>)
 8008828:	4890      	ldr	r0, [pc, #576]	; (8008a6c <lwip_netconn_do_writemore+0x278>)
 800882a:	f00b fd35 	bl	8014298 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <lwip_netconn_do_writemore+0x50>
 8008836:	4b8b      	ldr	r3, [pc, #556]	; (8008a64 <lwip_netconn_do_writemore+0x270>)
 8008838:	f240 6275 	movw	r2, #1653	; 0x675
 800883c:	498d      	ldr	r1, [pc, #564]	; (8008a74 <lwip_netconn_do_writemore+0x280>)
 800883e:	488b      	ldr	r0, [pc, #556]	; (8008a6c <lwip_netconn_do_writemore+0x278>)
 8008840:	f00b fd2a 	bl	8014298 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <lwip_netconn_do_writemore+0x66>
 800884c:	4b85      	ldr	r3, [pc, #532]	; (8008a64 <lwip_netconn_do_writemore+0x270>)
 800884e:	f240 6276 	movw	r2, #1654	; 0x676
 8008852:	4989      	ldr	r1, [pc, #548]	; (8008a78 <lwip_netconn_do_writemore+0x284>)
 8008854:	4885      	ldr	r0, [pc, #532]	; (8008a6c <lwip_netconn_do_writemore+0x278>)
 8008856:	f00b fd1f 	bl	8014298 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	699a      	ldr	r2, [r3, #24]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	429a      	cmp	r2, r3
 8008868:	d306      	bcc.n	8008878 <lwip_netconn_do_writemore+0x84>
 800886a:	4b7e      	ldr	r3, [pc, #504]	; (8008a64 <lwip_netconn_do_writemore+0x270>)
 800886c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8008870:	4982      	ldr	r1, [pc, #520]	; (8008a7c <lwip_netconn_do_writemore+0x288>)
 8008872:	487e      	ldr	r0, [pc, #504]	; (8008a6c <lwip_netconn_do_writemore+0x278>)
 8008874:	f00b fd10 	bl	8014298 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a1b      	ldr	r3, [r3, #32]
 800887c:	899b      	ldrh	r3, [r3, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d106      	bne.n	8008890 <lwip_netconn_do_writemore+0x9c>
 8008882:	4b78      	ldr	r3, [pc, #480]	; (8008a64 <lwip_netconn_do_writemore+0x270>)
 8008884:	f240 6279 	movw	r2, #1657	; 0x679
 8008888:	497d      	ldr	r1, [pc, #500]	; (8008a80 <lwip_netconn_do_writemore+0x28c>)
 800888a:	4878      	ldr	r0, [pc, #480]	; (8008a6c <lwip_netconn_do_writemore+0x278>)
 800888c:	f00b fd04 	bl	8014298 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	7f1b      	ldrb	r3, [r3, #28]
 8008896:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	7f1b      	ldrb	r3, [r3, #28]
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <lwip_netconn_do_writemore+0xba>
 80088a4:	7ebb      	ldrb	r3, [r7, #26]
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <lwip_netconn_do_writemore+0xbe>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <lwip_netconn_do_writemore+0xc0>
 80088b2:	2300      	movs	r3, #0
 80088b4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	4413      	add	r3, r2
 80088c6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e0:	d307      	bcc.n	80088f2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80088e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088e6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80088e8:	7ebb      	ldrb	r3, [r7, #26]
 80088ea:	f043 0302 	orr.w	r3, r3, #2
 80088ee:	76bb      	strb	r3, [r7, #26]
 80088f0:	e001      	b.n	80088f6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80088fe:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8008900:	89fa      	ldrh	r2, [r7, #14]
 8008902:	8bbb      	ldrh	r3, [r7, #28]
 8008904:	429a      	cmp	r2, r3
 8008906:	d216      	bcs.n	8008936 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8008908:	89fb      	ldrh	r3, [r7, #14]
 800890a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800890c:	7e3b      	ldrb	r3, [r7, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00d      	beq.n	800892e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8008912:	8bbb      	ldrh	r3, [r7, #28]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10e      	bne.n	8008936 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <lwip_netconn_do_writemore+0x134>
 8008922:	f06f 0306 	mvn.w	r3, #6
 8008926:	e000      	b.n	800892a <lwip_netconn_do_writemore+0x136>
 8008928:	2300      	movs	r3, #0
 800892a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800892c:	e07d      	b.n	8008a2a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800892e:	7ebb      	ldrb	r3, [r7, #26]
 8008930:	f043 0302 	orr.w	r3, r3, #2
 8008934:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	691a      	ldr	r2, [r3, #16]
 800893c:	8bbb      	ldrh	r3, [r7, #28]
 800893e:	441a      	add	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	429a      	cmp	r2, r3
 800894a:	d906      	bls.n	800895a <lwip_netconn_do_writemore+0x166>
 800894c:	4b45      	ldr	r3, [pc, #276]	; (8008a64 <lwip_netconn_do_writemore+0x270>)
 800894e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8008952:	494c      	ldr	r1, [pc, #304]	; (8008a84 <lwip_netconn_do_writemore+0x290>)
 8008954:	4845      	ldr	r0, [pc, #276]	; (8008a6c <lwip_netconn_do_writemore+0x278>)
 8008956:	f00b fc9f 	bl	8014298 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800895a:	8bbb      	ldrh	r3, [r7, #28]
 800895c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008960:	4293      	cmp	r3, r2
 8008962:	d103      	bne.n	800896c <lwip_netconn_do_writemore+0x178>
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800896a:	d209      	bcs.n	8008980 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8008970:	8bba      	ldrh	r2, [r7, #28]
 8008972:	429a      	cmp	r2, r3
 8008974:	d10b      	bne.n	800898e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	899b      	ldrh	r3, [r3, #12]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d906      	bls.n	800898e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8008980:	2301      	movs	r3, #1
 8008982:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008984:	7ebb      	ldrb	r3, [r7, #26]
 8008986:	f043 0302 	orr.w	r3, r3, #2
 800898a:	76bb      	strb	r3, [r7, #26]
 800898c:	e001      	b.n	8008992 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6858      	ldr	r0, [r3, #4]
 8008996:	7ebb      	ldrb	r3, [r7, #26]
 8008998:	8bba      	ldrh	r2, [r7, #28]
 800899a:	6979      	ldr	r1, [r7, #20]
 800899c:	f006 fdb0 	bl	800f500 <tcp_write>
 80089a0:	4603      	mov	r3, r0
 80089a2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80089a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d12c      	bne.n	8008a06 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	6999      	ldr	r1, [r3, #24]
 80089b2:	8bba      	ldrh	r2, [r7, #28]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	440a      	add	r2, r1
 80089ba:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	6919      	ldr	r1, [r3, #16]
 80089c2:	8bba      	ldrh	r2, [r7, #28]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	440a      	add	r2, r1
 80089ca:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	691a      	ldr	r2, [r3, #16]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d113      	bne.n	8008a06 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	899a      	ldrh	r2, [r3, #12]
 80089e4:	3a01      	subs	r2, #1
 80089e6:	b292      	uxth	r2, r2
 80089e8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	899b      	ldrh	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d008      	beq.n	8008a06 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	3208      	adds	r2, #8
 80089fc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	2200      	movs	r2, #0
 8008a04:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8008a06:	7e7b      	ldrb	r3, [r7, #25]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d004      	beq.n	8008a16 <lwip_netconn_do_writemore+0x222>
 8008a0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f43f af50 	beq.w	80088b6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008a16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d004      	beq.n	8008a28 <lwip_netconn_do_writemore+0x234>
 8008a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	d146      	bne.n	8008ab6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8008a28:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8008a2a:	7e3b      	ldrb	r3, [r7, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d02b      	beq.n	8008a88 <lwip_netconn_do_writemore+0x294>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d223      	bcs.n	8008a88 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <lwip_netconn_do_writemore+0x260>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2103      	movs	r1, #3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	7f1b      	ldrb	r3, [r3, #28]
 8008a58:	f043 0310 	orr.w	r3, r3, #16
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	771a      	strb	r2, [r3, #28]
 8008a62:	e028      	b.n	8008ab6 <lwip_netconn_do_writemore+0x2c2>
 8008a64:	08015664 	.word	0x08015664
 8008a68:	080157bc 	.word	0x080157bc
 8008a6c:	080156a8 	.word	0x080156a8
 8008a70:	08015ac4 	.word	0x08015ac4
 8008a74:	080157cc 	.word	0x080157cc
 8008a78:	08015ae4 	.word	0x08015ae4
 8008a7c:	08015afc 	.word	0x08015afc
 8008a80:	08015b3c 	.word	0x08015b3c
 8008a84:	08015b64 	.word	0x08015b64
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008a90:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008a94:	d305      	bcc.n	8008aa2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d909      	bls.n	8008ab6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <lwip_netconn_do_writemore+0x2c2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2103      	movs	r1, #3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8008ab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d11d      	bne.n	8008afa <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	699a      	ldr	r2, [r3, #24]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d002      	beq.n	8008ad4 <lwip_netconn_do_writemore+0x2e0>
 8008ace:	7e3b      	ldrb	r3, [r7, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f007 fafb 	bl	80100d8 <tcp_output>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8008ae6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008aea:	f113 0f04 	cmn.w	r3, #4
 8008aee:	d12c      	bne.n	8008b4a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008af0:	7b3b      	ldrb	r3, [r7, #12]
 8008af2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008af4:	2301      	movs	r3, #1
 8008af6:	76fb      	strb	r3, [r7, #27]
 8008af8:	e027      	b.n	8008b4a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8008afa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b02:	d120      	bne.n	8008b46 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f007 fae5 	bl	80100d8 <tcp_output>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8008b12:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008b16:	f113 0f04 	cmn.w	r3, #4
 8008b1a:	d104      	bne.n	8008b26 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008b1c:	7b7b      	ldrb	r3, [r7, #13]
 8008b1e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008b20:	2301      	movs	r3, #1
 8008b22:	76fb      	strb	r3, [r7, #27]
 8008b24:	e011      	b.n	8008b4a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8008b26:	7e3b      	ldrb	r3, [r7, #24]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00e      	beq.n	8008b4a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <lwip_netconn_do_writemore+0x348>
 8008b36:	f06f 0306 	mvn.w	r3, #6
 8008b3a:	e000      	b.n	8008b3e <lwip_netconn_do_writemore+0x34a>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008b40:	2301      	movs	r3, #1
 8008b42:	76fb      	strb	r3, [r7, #27]
 8008b44:	e001      	b.n	8008b4a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8008b46:	2301      	movs	r3, #1
 8008b48:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8008b4a:	7efb      	ldrb	r3, [r7, #27]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d015      	beq.n	8008b7c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	330c      	adds	r3, #12
 8008b58:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	7ffa      	ldrb	r2, [r7, #31]
 8008b60:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008b6e:	78fb      	ldrb	r3, [r7, #3]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d006      	beq.n	8008b82 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8008b74:	68b8      	ldr	r0, [r7, #8]
 8008b76:	f00b fa87 	bl	8014088 <sys_sem_signal>
 8008b7a:	e002      	b.n	8008b82 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8008b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b80:	e000      	b.n	8008b84 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fd22 	bl	80075e6 <netconn_err>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d166      	bne.n	8008c7c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d15d      	bne.n	8008c78 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8008bc6:	23fb      	movs	r3, #251	; 0xfb
 8008bc8:	73fb      	strb	r3, [r7, #15]
 8008bca:	e057      	b.n	8008c7c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d04d      	beq.n	8008c72 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d006      	beq.n	8008bf6 <lwip_netconn_do_write+0x6a>
 8008be8:	4b28      	ldr	r3, [pc, #160]	; (8008c8c <lwip_netconn_do_write+0x100>)
 8008bea:	f240 7223 	movw	r2, #1827	; 0x723
 8008bee:	4928      	ldr	r1, [pc, #160]	; (8008c90 <lwip_netconn_do_write+0x104>)
 8008bf0:	4828      	ldr	r0, [pc, #160]	; (8008c94 <lwip_netconn_do_write+0x108>)
 8008bf2:	f00b fb51 	bl	8014298 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <lwip_netconn_do_write+0x80>
 8008bfe:	4b23      	ldr	r3, [pc, #140]	; (8008c8c <lwip_netconn_do_write+0x100>)
 8008c00:	f240 7224 	movw	r2, #1828	; 0x724
 8008c04:	4924      	ldr	r1, [pc, #144]	; (8008c98 <lwip_netconn_do_write+0x10c>)
 8008c06:	4823      	ldr	r0, [pc, #140]	; (8008c94 <lwip_netconn_do_write+0x108>)
 8008c08:	f00b fb46 	bl	8014298 <iprintf>
        msg->conn->current_msg = msg;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff fdea 	bl	80087f4 <lwip_netconn_do_writemore>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d02e      	beq.n	8008c84 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d006      	beq.n	8008c3e <lwip_netconn_do_write+0xb2>
 8008c30:	4b16      	ldr	r3, [pc, #88]	; (8008c8c <lwip_netconn_do_write+0x100>)
 8008c32:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8008c36:	4919      	ldr	r1, [pc, #100]	; (8008c9c <lwip_netconn_do_write+0x110>)
 8008c38:	4816      	ldr	r0, [pc, #88]	; (8008c94 <lwip_netconn_do_write+0x108>)
 8008c3a:	f00b fb2d 	bl	8014298 <iprintf>
          UNLOCK_TCPIP_CORE();
 8008c3e:	4818      	ldr	r0, [pc, #96]	; (8008ca0 <lwip_netconn_do_write+0x114>)
 8008c40:	f00b fa93 	bl	801416a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	330c      	adds	r3, #12
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f00b f9ea 	bl	8014026 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008c52:	4813      	ldr	r0, [pc, #76]	; (8008ca0 <lwip_netconn_do_write+0x114>)
 8008c54:	f00b fa7a 	bl	801414c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	785b      	ldrb	r3, [r3, #1]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d110      	bne.n	8008c84 <lwip_netconn_do_write+0xf8>
 8008c62:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <lwip_netconn_do_write+0x100>)
 8008c64:	f240 722c 	movw	r2, #1836	; 0x72c
 8008c68:	490c      	ldr	r1, [pc, #48]	; (8008c9c <lwip_netconn_do_write+0x110>)
 8008c6a:	480a      	ldr	r0, [pc, #40]	; (8008c94 <lwip_netconn_do_write+0x108>)
 8008c6c:	f00b fb14 	bl	8014298 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8008c70:	e008      	b.n	8008c84 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8008c72:	23f5      	movs	r3, #245	; 0xf5
 8008c74:	73fb      	strb	r3, [r7, #15]
 8008c76:	e001      	b.n	8008c7c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8008c78:	23fa      	movs	r3, #250	; 0xfa
 8008c7a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	7bfa      	ldrb	r2, [r7, #15]
 8008c80:	711a      	strb	r2, [r3, #4]
 8008c82:	e000      	b.n	8008c86 <lwip_netconn_do_write+0xfa>
        return;
 8008c84:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	08015664 	.word	0x08015664
 8008c90:	08015a08 	.word	0x08015a08
 8008c94:	080156a8 	.word	0x080156a8
 8008c98:	08015b90 	.word	0x08015b90
 8008c9c:	08015a24 	.word	0x08015a24
 8008ca0:	200075a4 	.word	0x200075a4

08008ca4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	785b      	ldrb	r3, [r3, #1]
 8008cb6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d069      	beq.n	8008d96 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8008ccc:	2b10      	cmp	r3, #16
 8008cce:	d162      	bne.n	8008d96 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d002      	beq.n	8008cde <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008cd8:	7afb      	ldrb	r3, [r7, #11]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d05b      	beq.n	8008d96 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8008cde:	7afb      	ldrb	r3, [r7, #11]
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d103      	bne.n	8008cec <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	22f5      	movs	r2, #245	; 0xf5
 8008ce8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008cea:	e059      	b.n	8008da0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8008cec:	7afb      	ldrb	r3, [r7, #11]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d103      	bne.n	8008cfa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	22fb      	movs	r2, #251	; 0xfb
 8008cf6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008cf8:	e052      	b.n	8008da0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	7a1b      	ldrb	r3, [r3, #8]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d004      	beq.n	8008d10 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff f9a0 	bl	8008050 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d006      	beq.n	8008d28 <lwip_netconn_do_close+0x84>
 8008d1a:	4b23      	ldr	r3, [pc, #140]	; (8008da8 <lwip_netconn_do_close+0x104>)
 8008d1c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8008d20:	4922      	ldr	r1, [pc, #136]	; (8008dac <lwip_netconn_do_close+0x108>)
 8008d22:	4823      	ldr	r0, [pc, #140]	; (8008db0 <lwip_netconn_do_close+0x10c>)
 8008d24:	f00b fab8 	bl	8014298 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fa04 	bl	800814c <lwip_netconn_do_close_internal>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d029      	beq.n	8008d9e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	d006      	beq.n	8008d62 <lwip_netconn_do_close+0xbe>
 8008d54:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <lwip_netconn_do_close+0x104>)
 8008d56:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8008d5a:	4916      	ldr	r1, [pc, #88]	; (8008db4 <lwip_netconn_do_close+0x110>)
 8008d5c:	4814      	ldr	r0, [pc, #80]	; (8008db0 <lwip_netconn_do_close+0x10c>)
 8008d5e:	f00b fa9b 	bl	8014298 <iprintf>
        UNLOCK_TCPIP_CORE();
 8008d62:	4815      	ldr	r0, [pc, #84]	; (8008db8 <lwip_netconn_do_close+0x114>)
 8008d64:	f00b fa01 	bl	801416a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	330c      	adds	r3, #12
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f00b f958 	bl	8014026 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8008d76:	4810      	ldr	r0, [pc, #64]	; (8008db8 <lwip_netconn_do_close+0x114>)
 8008d78:	f00b f9e8 	bl	801414c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	785b      	ldrb	r3, [r3, #1]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00b      	beq.n	8008d9e <lwip_netconn_do_close+0xfa>
 8008d86:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <lwip_netconn_do_close+0x104>)
 8008d88:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8008d8c:	4909      	ldr	r1, [pc, #36]	; (8008db4 <lwip_netconn_do_close+0x110>)
 8008d8e:	4808      	ldr	r0, [pc, #32]	; (8008db0 <lwip_netconn_do_close+0x10c>)
 8008d90:	f00b fa82 	bl	8014298 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8008d94:	e003      	b.n	8008d9e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	22f5      	movs	r2, #245	; 0xf5
 8008d9a:	711a      	strb	r2, [r3, #4]
 8008d9c:	e000      	b.n	8008da0 <lwip_netconn_do_close+0xfc>
      return;
 8008d9e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	08015664 	.word	0x08015664
 8008dac:	08015a08 	.word	0x08015a08
 8008db0:	080156a8 	.word	0x080156a8
 8008db4:	08015a24 	.word	0x08015a24
 8008db8:	200075a4 	.word	0x200075a4

08008dbc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d013      	beq.n	8008df2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00b      	beq.n	8008dea <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 fde6 	bl	800a9a8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	605a      	str	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	2006      	movs	r0, #6
 8008dee:	f000 ff3b 	bl	8009c68 <memp_free>
  }
}
 8008df2:	bf00      	nop
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d108      	bne.n	8008e20 <netbuf_data+0x24>
 8008e0e:	4b1b      	ldr	r3, [pc, #108]	; (8008e7c <netbuf_data+0x80>)
 8008e10:	22c6      	movs	r2, #198	; 0xc6
 8008e12:	491b      	ldr	r1, [pc, #108]	; (8008e80 <netbuf_data+0x84>)
 8008e14:	481b      	ldr	r0, [pc, #108]	; (8008e84 <netbuf_data+0x88>)
 8008e16:	f00b fa3f 	bl	8014298 <iprintf>
 8008e1a:	f06f 030f 	mvn.w	r3, #15
 8008e1e:	e029      	b.n	8008e74 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d108      	bne.n	8008e38 <netbuf_data+0x3c>
 8008e26:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <netbuf_data+0x80>)
 8008e28:	22c7      	movs	r2, #199	; 0xc7
 8008e2a:	4917      	ldr	r1, [pc, #92]	; (8008e88 <netbuf_data+0x8c>)
 8008e2c:	4815      	ldr	r0, [pc, #84]	; (8008e84 <netbuf_data+0x88>)
 8008e2e:	f00b fa33 	bl	8014298 <iprintf>
 8008e32:	f06f 030f 	mvn.w	r3, #15
 8008e36:	e01d      	b.n	8008e74 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d108      	bne.n	8008e50 <netbuf_data+0x54>
 8008e3e:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <netbuf_data+0x80>)
 8008e40:	22c8      	movs	r2, #200	; 0xc8
 8008e42:	4912      	ldr	r1, [pc, #72]	; (8008e8c <netbuf_data+0x90>)
 8008e44:	480f      	ldr	r0, [pc, #60]	; (8008e84 <netbuf_data+0x88>)
 8008e46:	f00b fa27 	bl	8014298 <iprintf>
 8008e4a:	f06f 030f 	mvn.w	r3, #15
 8008e4e:	e011      	b.n	8008e74 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d102      	bne.n	8008e5e <netbuf_data+0x62>
    return ERR_BUF;
 8008e58:	f06f 0301 	mvn.w	r3, #1
 8008e5c:	e00a      	b.n	8008e74 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	895a      	ldrh	r2, [r3, #10]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	08015bbc 	.word	0x08015bbc
 8008e80:	08015cc4 	.word	0x08015cc4
 8008e84:	08015c0c 	.word	0x08015c0c
 8008e88:	08015ce0 	.word	0x08015ce0
 8008e8c:	08015d00 	.word	0x08015d00

08008e90 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d108      	bne.n	8008eb0 <netbuf_next+0x20>
 8008e9e:	4b11      	ldr	r3, [pc, #68]	; (8008ee4 <netbuf_next+0x54>)
 8008ea0:	22e0      	movs	r2, #224	; 0xe0
 8008ea2:	4911      	ldr	r1, [pc, #68]	; (8008ee8 <netbuf_next+0x58>)
 8008ea4:	4811      	ldr	r0, [pc, #68]	; (8008eec <netbuf_next+0x5c>)
 8008ea6:	f00b f9f7 	bl	8014298 <iprintf>
 8008eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8008eae:	e014      	b.n	8008eda <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d102      	bne.n	8008ec0 <netbuf_next+0x30>
    return -1;
 8008eba:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebe:	e00c      	b.n	8008eda <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <netbuf_next+0x48>
    return 1;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e000      	b.n	8008eda <netbuf_next+0x4a>
  }
  return 0;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	08015bbc 	.word	0x08015bbc
 8008ee8:	08015d1c 	.word	0x08015d1c
 8008eec:	08015c0c 	.word	0x08015c0c

08008ef0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008efa:	f008 f9b3 	bl	8011264 <sys_timeouts_sleeptime>
 8008efe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f06:	d10b      	bne.n	8008f20 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008f08:	4813      	ldr	r0, [pc, #76]	; (8008f58 <tcpip_timeouts_mbox_fetch+0x68>)
 8008f0a:	f00b f92e 	bl	801416a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008f0e:	2200      	movs	r2, #0
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f00a ffe6 	bl	8013ee4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008f18:	480f      	ldr	r0, [pc, #60]	; (8008f58 <tcpip_timeouts_mbox_fetch+0x68>)
 8008f1a:	f00b f917 	bl	801414c <sys_mutex_lock>
    return;
 8008f1e:	e018      	b.n	8008f52 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008f26:	f008 f963 	bl	80111f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008f2a:	e7e6      	b.n	8008efa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008f2c:	480a      	ldr	r0, [pc, #40]	; (8008f58 <tcpip_timeouts_mbox_fetch+0x68>)
 8008f2e:	f00b f91c 	bl	801416a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f00a ffd4 	bl	8013ee4 <sys_arch_mbox_fetch>
 8008f3c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8008f3e:	4806      	ldr	r0, [pc, #24]	; (8008f58 <tcpip_timeouts_mbox_fetch+0x68>)
 8008f40:	f00b f904 	bl	801414c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4a:	d102      	bne.n	8008f52 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008f4c:	f008 f950 	bl	80111f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008f50:	e7d3      	b.n	8008efa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	200075a4 	.word	0x200075a4

08008f5c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008f64:	4810      	ldr	r0, [pc, #64]	; (8008fa8 <tcpip_thread+0x4c>)
 8008f66:	f00b f8f1 	bl	801414c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008f6a:	4b10      	ldr	r3, [pc, #64]	; (8008fac <tcpip_thread+0x50>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d005      	beq.n	8008f7e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8008f72:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <tcpip_thread+0x50>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a0e      	ldr	r2, [pc, #56]	; (8008fb0 <tcpip_thread+0x54>)
 8008f78:	6812      	ldr	r2, [r2, #0]
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008f7e:	f107 030c 	add.w	r3, r7, #12
 8008f82:	4619      	mov	r1, r3
 8008f84:	480b      	ldr	r0, [pc, #44]	; (8008fb4 <tcpip_thread+0x58>)
 8008f86:	f7ff ffb3 	bl	8008ef0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008f90:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <tcpip_thread+0x5c>)
 8008f92:	2291      	movs	r2, #145	; 0x91
 8008f94:	4909      	ldr	r1, [pc, #36]	; (8008fbc <tcpip_thread+0x60>)
 8008f96:	480a      	ldr	r0, [pc, #40]	; (8008fc0 <tcpip_thread+0x64>)
 8008f98:	f00b f97e 	bl	8014298 <iprintf>
      continue;
 8008f9c:	e003      	b.n	8008fa6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 f80f 	bl	8008fc4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008fa6:	e7ea      	b.n	8008f7e <tcpip_thread+0x22>
 8008fa8:	200075a4 	.word	0x200075a4
 8008fac:	20004248 	.word	0x20004248
 8008fb0:	2000424c 	.word	0x2000424c
 8008fb4:	20004250 	.word	0x20004250
 8008fb8:	08015d54 	.word	0x08015d54
 8008fbc:	08015d84 	.word	0x08015d84
 8008fc0:	08015da4 	.word	0x08015da4

08008fc4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d018      	beq.n	8009006 <tcpip_thread_handle_msg+0x42>
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d021      	beq.n	800901c <tcpip_thread_handle_msg+0x58>
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d126      	bne.n	800902a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	6850      	ldr	r0, [r2, #4]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6892      	ldr	r2, [r2, #8]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4798      	blx	r3
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d004      	beq.n	8008ffc <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 fcd6 	bl	800a9a8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008ffc:	6879      	ldr	r1, [r7, #4]
 8008ffe:	2009      	movs	r0, #9
 8009000:	f000 fe32 	bl	8009c68 <memp_free>
      break;
 8009004:	e018      	b.n	8009038 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6892      	ldr	r2, [r2, #8]
 800900e:	4610      	mov	r0, r2
 8009010:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	2008      	movs	r0, #8
 8009016:	f000 fe27 	bl	8009c68 <memp_free>
      break;
 800901a:	e00d      	b.n	8009038 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	6892      	ldr	r2, [r2, #8]
 8009024:	4610      	mov	r0, r2
 8009026:	4798      	blx	r3
      break;
 8009028:	e006      	b.n	8009038 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <tcpip_thread_handle_msg+0x7c>)
 800902c:	22cf      	movs	r2, #207	; 0xcf
 800902e:	4905      	ldr	r1, [pc, #20]	; (8009044 <tcpip_thread_handle_msg+0x80>)
 8009030:	4805      	ldr	r0, [pc, #20]	; (8009048 <tcpip_thread_handle_msg+0x84>)
 8009032:	f00b f931 	bl	8014298 <iprintf>
      break;
 8009036:	bf00      	nop
  }
}
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	08015d54 	.word	0x08015d54
 8009044:	08015d84 	.word	0x08015d84
 8009048:	08015da4 	.word	0x08015da4

0800904c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009058:	481a      	ldr	r0, [pc, #104]	; (80090c4 <tcpip_inpkt+0x78>)
 800905a:	f00a ff9e 	bl	8013f9a <sys_mbox_valid>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d105      	bne.n	8009070 <tcpip_inpkt+0x24>
 8009064:	4b18      	ldr	r3, [pc, #96]	; (80090c8 <tcpip_inpkt+0x7c>)
 8009066:	22fc      	movs	r2, #252	; 0xfc
 8009068:	4918      	ldr	r1, [pc, #96]	; (80090cc <tcpip_inpkt+0x80>)
 800906a:	4819      	ldr	r0, [pc, #100]	; (80090d0 <tcpip_inpkt+0x84>)
 800906c:	f00b f914 	bl	8014298 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009070:	2009      	movs	r0, #9
 8009072:	f000 fda7 	bl	8009bc4 <memp_malloc>
 8009076:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800907e:	f04f 33ff 	mov.w	r3, #4294967295
 8009082:	e01a      	b.n	80090ba <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800909c:	6979      	ldr	r1, [r7, #20]
 800909e:	4809      	ldr	r0, [pc, #36]	; (80090c4 <tcpip_inpkt+0x78>)
 80090a0:	f00a ff06 	bl	8013eb0 <sys_mbox_trypost>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d006      	beq.n	80090b8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80090aa:	6979      	ldr	r1, [r7, #20]
 80090ac:	2009      	movs	r0, #9
 80090ae:	f000 fddb 	bl	8009c68 <memp_free>
    return ERR_MEM;
 80090b2:	f04f 33ff 	mov.w	r3, #4294967295
 80090b6:	e000      	b.n	80090ba <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80090b8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20004250 	.word	0x20004250
 80090c8:	08015d54 	.word	0x08015d54
 80090cc:	08015dcc 	.word	0x08015dcc
 80090d0:	08015da4 	.word	0x08015da4

080090d4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090e4:	f003 0318 	and.w	r3, r3, #24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d006      	beq.n	80090fa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80090ec:	4a08      	ldr	r2, [pc, #32]	; (8009110 <tcpip_input+0x3c>)
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff ffab 	bl	800904c <tcpip_inpkt>
 80090f6:	4603      	mov	r3, r0
 80090f8:	e005      	b.n	8009106 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80090fa:	4a06      	ldr	r2, [pc, #24]	; (8009114 <tcpip_input+0x40>)
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff ffa4 	bl	800904c <tcpip_inpkt>
 8009104:	4603      	mov	r3, r0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	08013c9d 	.word	0x08013c9d
 8009114:	08012bbd 	.word	0x08012bbd

08009118 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009122:	4819      	ldr	r0, [pc, #100]	; (8009188 <tcpip_try_callback+0x70>)
 8009124:	f00a ff39 	bl	8013f9a <sys_mbox_valid>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d106      	bne.n	800913c <tcpip_try_callback+0x24>
 800912e:	4b17      	ldr	r3, [pc, #92]	; (800918c <tcpip_try_callback+0x74>)
 8009130:	f240 125d 	movw	r2, #349	; 0x15d
 8009134:	4916      	ldr	r1, [pc, #88]	; (8009190 <tcpip_try_callback+0x78>)
 8009136:	4817      	ldr	r0, [pc, #92]	; (8009194 <tcpip_try_callback+0x7c>)
 8009138:	f00b f8ae 	bl	8014298 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800913c:	2008      	movs	r0, #8
 800913e:	f000 fd41 	bl	8009bc4 <memp_malloc>
 8009142:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d102      	bne.n	8009150 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800914a:	f04f 33ff 	mov.w	r3, #4294967295
 800914e:	e017      	b.n	8009180 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009162:	68f9      	ldr	r1, [r7, #12]
 8009164:	4808      	ldr	r0, [pc, #32]	; (8009188 <tcpip_try_callback+0x70>)
 8009166:	f00a fea3 	bl	8013eb0 <sys_mbox_trypost>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d006      	beq.n	800917e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009170:	68f9      	ldr	r1, [r7, #12]
 8009172:	2008      	movs	r0, #8
 8009174:	f000 fd78 	bl	8009c68 <memp_free>
    return ERR_MEM;
 8009178:	f04f 33ff 	mov.w	r3, #4294967295
 800917c:	e000      	b.n	8009180 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20004250 	.word	0x20004250
 800918c:	08015d54 	.word	0x08015d54
 8009190:	08015dcc 	.word	0x08015dcc
 8009194:	08015da4 	.word	0x08015da4

08009198 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80091a4:	4806      	ldr	r0, [pc, #24]	; (80091c0 <tcpip_send_msg_wait_sem+0x28>)
 80091a6:	f00a ffd1 	bl	801414c <sys_mutex_lock>
  fn(apimsg);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68b8      	ldr	r0, [r7, #8]
 80091ae:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80091b0:	4803      	ldr	r0, [pc, #12]	; (80091c0 <tcpip_send_msg_wait_sem+0x28>)
 80091b2:	f00a ffda 	bl	801416a <sys_mutex_unlock>
  return ERR_OK;
 80091b6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	200075a4 	.word	0x200075a4

080091c4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af02      	add	r7, sp, #8
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80091ce:	f000 f871 	bl	80092b4 <lwip_init>

  tcpip_init_done = initfunc;
 80091d2:	4a17      	ldr	r2, [pc, #92]	; (8009230 <tcpip_init+0x6c>)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80091d8:	4a16      	ldr	r2, [pc, #88]	; (8009234 <tcpip_init+0x70>)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80091de:	2106      	movs	r1, #6
 80091e0:	4815      	ldr	r0, [pc, #84]	; (8009238 <tcpip_init+0x74>)
 80091e2:	f00a fe31 	bl	8013e48 <sys_mbox_new>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d006      	beq.n	80091fa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80091ec:	4b13      	ldr	r3, [pc, #76]	; (800923c <tcpip_init+0x78>)
 80091ee:	f240 2261 	movw	r2, #609	; 0x261
 80091f2:	4913      	ldr	r1, [pc, #76]	; (8009240 <tcpip_init+0x7c>)
 80091f4:	4813      	ldr	r0, [pc, #76]	; (8009244 <tcpip_init+0x80>)
 80091f6:	f00b f84f 	bl	8014298 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80091fa:	4813      	ldr	r0, [pc, #76]	; (8009248 <tcpip_init+0x84>)
 80091fc:	f00a ff8a 	bl	8014114 <sys_mutex_new>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d006      	beq.n	8009214 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009206:	4b0d      	ldr	r3, [pc, #52]	; (800923c <tcpip_init+0x78>)
 8009208:	f240 2265 	movw	r2, #613	; 0x265
 800920c:	490f      	ldr	r1, [pc, #60]	; (800924c <tcpip_init+0x88>)
 800920e:	480d      	ldr	r0, [pc, #52]	; (8009244 <tcpip_init+0x80>)
 8009210:	f00b f842 	bl	8014298 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009214:	2300      	movs	r3, #0
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800921c:	2200      	movs	r2, #0
 800921e:	490c      	ldr	r1, [pc, #48]	; (8009250 <tcpip_init+0x8c>)
 8009220:	480c      	ldr	r0, [pc, #48]	; (8009254 <tcpip_init+0x90>)
 8009222:	f00a ffaf 	bl	8014184 <sys_thread_new>
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	20004248 	.word	0x20004248
 8009234:	2000424c 	.word	0x2000424c
 8009238:	20004250 	.word	0x20004250
 800923c:	08015d54 	.word	0x08015d54
 8009240:	08015ddc 	.word	0x08015ddc
 8009244:	08015da4 	.word	0x08015da4
 8009248:	200075a4 	.word	0x200075a4
 800924c:	08015e00 	.word	0x08015e00
 8009250:	08008f5d 	.word	0x08008f5d
 8009254:	08015e24 	.word	0x08015e24

08009258 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009262:	88fb      	ldrh	r3, [r7, #6]
 8009264:	021b      	lsls	r3, r3, #8
 8009266:	b21a      	sxth	r2, r3
 8009268:	88fb      	ldrh	r3, [r7, #6]
 800926a:	0a1b      	lsrs	r3, r3, #8
 800926c:	b29b      	uxth	r3, r3
 800926e:	b21b      	sxth	r3, r3
 8009270:	4313      	orrs	r3, r2
 8009272:	b21b      	sxth	r3, r3
 8009274:	b29b      	uxth	r3, r3
}
 8009276:	4618      	mov	r0, r3
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	061a      	lsls	r2, r3, #24
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	021b      	lsls	r3, r3, #8
 8009292:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009296:	431a      	orrs	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	0a1b      	lsrs	r3, r3, #8
 800929c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80092a0:	431a      	orrs	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	0e1b      	lsrs	r3, r3, #24
 80092a6:	4313      	orrs	r3, r2
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80092be:	f00a ff1b 	bl	80140f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80092c2:	f000 f8d5 	bl	8009470 <mem_init>
  memp_init();
 80092c6:	f000 fc31 	bl	8009b2c <memp_init>
  pbuf_init();
  netif_init();
 80092ca:	f000 fcf7 	bl	8009cbc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80092ce:	f008 f801 	bl	80112d4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80092d2:	f001 fe03 	bl	800aedc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80092d6:	f007 ff45 	bl	8011164 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <ptr_to_mem+0x20>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	88fb      	ldrh	r3, [r7, #6]
 80092f4:	4413      	add	r3, r2
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20004254 	.word	0x20004254

08009308 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a05      	ldr	r2, [pc, #20]	; (8009328 <mem_to_ptr+0x20>)
 8009314:	6812      	ldr	r2, [r2, #0]
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	b29b      	uxth	r3, r3
}
 800931a:	4618      	mov	r0, r3
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	20004254 	.word	0x20004254

0800932c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800932c:	b590      	push	{r4, r7, lr}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009334:	4b45      	ldr	r3, [pc, #276]	; (800944c <plug_holes+0x120>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	429a      	cmp	r2, r3
 800933c:	d206      	bcs.n	800934c <plug_holes+0x20>
 800933e:	4b44      	ldr	r3, [pc, #272]	; (8009450 <plug_holes+0x124>)
 8009340:	f240 12df 	movw	r2, #479	; 0x1df
 8009344:	4943      	ldr	r1, [pc, #268]	; (8009454 <plug_holes+0x128>)
 8009346:	4844      	ldr	r0, [pc, #272]	; (8009458 <plug_holes+0x12c>)
 8009348:	f00a ffa6 	bl	8014298 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800934c:	4b43      	ldr	r3, [pc, #268]	; (800945c <plug_holes+0x130>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	429a      	cmp	r2, r3
 8009354:	d306      	bcc.n	8009364 <plug_holes+0x38>
 8009356:	4b3e      	ldr	r3, [pc, #248]	; (8009450 <plug_holes+0x124>)
 8009358:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800935c:	4940      	ldr	r1, [pc, #256]	; (8009460 <plug_holes+0x134>)
 800935e:	483e      	ldr	r0, [pc, #248]	; (8009458 <plug_holes+0x12c>)
 8009360:	f00a ff9a 	bl	8014298 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	791b      	ldrb	r3, [r3, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d006      	beq.n	800937a <plug_holes+0x4e>
 800936c:	4b38      	ldr	r3, [pc, #224]	; (8009450 <plug_holes+0x124>)
 800936e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009372:	493c      	ldr	r1, [pc, #240]	; (8009464 <plug_holes+0x138>)
 8009374:	4838      	ldr	r0, [pc, #224]	; (8009458 <plug_holes+0x12c>)
 8009376:	f00a ff8f 	bl	8014298 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009382:	d906      	bls.n	8009392 <plug_holes+0x66>
 8009384:	4b32      	ldr	r3, [pc, #200]	; (8009450 <plug_holes+0x124>)
 8009386:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800938a:	4937      	ldr	r1, [pc, #220]	; (8009468 <plug_holes+0x13c>)
 800938c:	4832      	ldr	r0, [pc, #200]	; (8009458 <plug_holes+0x12c>)
 800938e:	f00a ff83 	bl	8014298 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff ffa4 	bl	80092e4 <ptr_to_mem>
 800939c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d024      	beq.n	80093f0 <plug_holes+0xc4>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	791b      	ldrb	r3, [r3, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d120      	bne.n	80093f0 <plug_holes+0xc4>
 80093ae:	4b2b      	ldr	r3, [pc, #172]	; (800945c <plug_holes+0x130>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d01b      	beq.n	80093f0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80093b8:	4b2c      	ldr	r3, [pc, #176]	; (800946c <plug_holes+0x140>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d102      	bne.n	80093c8 <plug_holes+0x9c>
      lfree = mem;
 80093c2:	4a2a      	ldr	r2, [pc, #168]	; (800946c <plug_holes+0x140>)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	881a      	ldrh	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	881b      	ldrh	r3, [r3, #0]
 80093d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80093d8:	d00a      	beq.n	80093f0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	4618      	mov	r0, r3
 80093e0:	f7ff ff80 	bl	80092e4 <ptr_to_mem>
 80093e4:	4604      	mov	r4, r0
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7ff ff8e 	bl	8009308 <mem_to_ptr>
 80093ec:	4603      	mov	r3, r0
 80093ee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	885b      	ldrh	r3, [r3, #2]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff ff75 	bl	80092e4 <ptr_to_mem>
 80093fa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	429a      	cmp	r2, r3
 8009402:	d01f      	beq.n	8009444 <plug_holes+0x118>
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	791b      	ldrb	r3, [r3, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d11b      	bne.n	8009444 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800940c:	4b17      	ldr	r3, [pc, #92]	; (800946c <plug_holes+0x140>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	429a      	cmp	r2, r3
 8009414:	d102      	bne.n	800941c <plug_holes+0xf0>
      lfree = pmem;
 8009416:	4a15      	ldr	r2, [pc, #84]	; (800946c <plug_holes+0x140>)
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	881a      	ldrh	r2, [r3, #0]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800942c:	d00a      	beq.n	8009444 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff ff56 	bl	80092e4 <ptr_to_mem>
 8009438:	4604      	mov	r4, r0
 800943a:	68b8      	ldr	r0, [r7, #8]
 800943c:	f7ff ff64 	bl	8009308 <mem_to_ptr>
 8009440:	4603      	mov	r3, r0
 8009442:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009444:	bf00      	nop
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	bd90      	pop	{r4, r7, pc}
 800944c:	20004254 	.word	0x20004254
 8009450:	08015e34 	.word	0x08015e34
 8009454:	08015e64 	.word	0x08015e64
 8009458:	08015e7c 	.word	0x08015e7c
 800945c:	20004258 	.word	0x20004258
 8009460:	08015ea4 	.word	0x08015ea4
 8009464:	08015ec0 	.word	0x08015ec0
 8009468:	08015edc 	.word	0x08015edc
 800946c:	20004260 	.word	0x20004260

08009470 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009476:	4b1f      	ldr	r3, [pc, #124]	; (80094f4 <mem_init+0x84>)
 8009478:	3303      	adds	r3, #3
 800947a:	f023 0303 	bic.w	r3, r3, #3
 800947e:	461a      	mov	r2, r3
 8009480:	4b1d      	ldr	r3, [pc, #116]	; (80094f8 <mem_init+0x88>)
 8009482:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009484:	4b1c      	ldr	r3, [pc, #112]	; (80094f8 <mem_init+0x88>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009490:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800949e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80094a2:	f7ff ff1f 	bl	80092e4 <ptr_to_mem>
 80094a6:	4602      	mov	r2, r0
 80094a8:	4b14      	ldr	r3, [pc, #80]	; (80094fc <mem_init+0x8c>)
 80094aa:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80094ac:	4b13      	ldr	r3, [pc, #76]	; (80094fc <mem_init+0x8c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2201      	movs	r2, #1
 80094b2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80094b4:	4b11      	ldr	r3, [pc, #68]	; (80094fc <mem_init+0x8c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80094bc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80094be:	4b0f      	ldr	r3, [pc, #60]	; (80094fc <mem_init+0x8c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80094c6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80094c8:	4b0b      	ldr	r3, [pc, #44]	; (80094f8 <mem_init+0x88>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a0c      	ldr	r2, [pc, #48]	; (8009500 <mem_init+0x90>)
 80094ce:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80094d0:	480c      	ldr	r0, [pc, #48]	; (8009504 <mem_init+0x94>)
 80094d2:	f00a fe1f 	bl	8014114 <sys_mutex_new>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d006      	beq.n	80094ea <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80094dc:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <mem_init+0x98>)
 80094de:	f240 221f 	movw	r2, #543	; 0x21f
 80094e2:	490a      	ldr	r1, [pc, #40]	; (800950c <mem_init+0x9c>)
 80094e4:	480a      	ldr	r0, [pc, #40]	; (8009510 <mem_init+0xa0>)
 80094e6:	f00a fed7 	bl	8014298 <iprintf>
  }
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	200075c0 	.word	0x200075c0
 80094f8:	20004254 	.word	0x20004254
 80094fc:	20004258 	.word	0x20004258
 8009500:	20004260 	.word	0x20004260
 8009504:	2000425c 	.word	0x2000425c
 8009508:	08015e34 	.word	0x08015e34
 800950c:	08015f08 	.word	0x08015f08
 8009510:	08015e7c 	.word	0x08015e7c

08009514 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff fef3 	bl	8009308 <mem_to_ptr>
 8009522:	4603      	mov	r3, r0
 8009524:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff feda 	bl	80092e4 <ptr_to_mem>
 8009530:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	885b      	ldrh	r3, [r3, #2]
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff fed4 	bl	80092e4 <ptr_to_mem>
 800953c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009546:	d818      	bhi.n	800957a <mem_link_valid+0x66>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	885b      	ldrh	r3, [r3, #2]
 800954c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009550:	d813      	bhi.n	800957a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009556:	8afa      	ldrh	r2, [r7, #22]
 8009558:	429a      	cmp	r2, r3
 800955a:	d004      	beq.n	8009566 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	8afa      	ldrh	r2, [r7, #22]
 8009562:	429a      	cmp	r2, r3
 8009564:	d109      	bne.n	800957a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009566:	4b08      	ldr	r3, [pc, #32]	; (8009588 <mem_link_valid+0x74>)
 8009568:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	429a      	cmp	r2, r3
 800956e:	d006      	beq.n	800957e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	885b      	ldrh	r3, [r3, #2]
 8009574:	8afa      	ldrh	r2, [r7, #22]
 8009576:	429a      	cmp	r2, r3
 8009578:	d001      	beq.n	800957e <mem_link_valid+0x6a>
    return 0;
 800957a:	2300      	movs	r3, #0
 800957c:	e000      	b.n	8009580 <mem_link_valid+0x6c>
  }
  return 1;
 800957e:	2301      	movs	r3, #1
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20004258 	.word	0x20004258

0800958c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d070      	beq.n	800967c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f003 0303 	and.w	r3, r3, #3
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00d      	beq.n	80095c0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80095a4:	4b37      	ldr	r3, [pc, #220]	; (8009684 <mem_free+0xf8>)
 80095a6:	f240 2273 	movw	r2, #627	; 0x273
 80095aa:	4937      	ldr	r1, [pc, #220]	; (8009688 <mem_free+0xfc>)
 80095ac:	4837      	ldr	r0, [pc, #220]	; (800968c <mem_free+0x100>)
 80095ae:	f00a fe73 	bl	8014298 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80095b2:	f00a fe0d 	bl	80141d0 <sys_arch_protect>
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f00a fe17 	bl	80141ec <sys_arch_unprotect>
    return;
 80095be:	e05e      	b.n	800967e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3b08      	subs	r3, #8
 80095c4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80095c6:	4b32      	ldr	r3, [pc, #200]	; (8009690 <mem_free+0x104>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69fa      	ldr	r2, [r7, #28]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d306      	bcc.n	80095de <mem_free+0x52>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f103 020c 	add.w	r2, r3, #12
 80095d6:	4b2f      	ldr	r3, [pc, #188]	; (8009694 <mem_free+0x108>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d90d      	bls.n	80095fa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80095de:	4b29      	ldr	r3, [pc, #164]	; (8009684 <mem_free+0xf8>)
 80095e0:	f240 227f 	movw	r2, #639	; 0x27f
 80095e4:	492c      	ldr	r1, [pc, #176]	; (8009698 <mem_free+0x10c>)
 80095e6:	4829      	ldr	r0, [pc, #164]	; (800968c <mem_free+0x100>)
 80095e8:	f00a fe56 	bl	8014298 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80095ec:	f00a fdf0 	bl	80141d0 <sys_arch_protect>
 80095f0:	6138      	str	r0, [r7, #16]
 80095f2:	6938      	ldr	r0, [r7, #16]
 80095f4:	f00a fdfa 	bl	80141ec <sys_arch_unprotect>
    return;
 80095f8:	e041      	b.n	800967e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80095fa:	4828      	ldr	r0, [pc, #160]	; (800969c <mem_free+0x110>)
 80095fc:	f00a fda6 	bl	801414c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	791b      	ldrb	r3, [r3, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d110      	bne.n	800962a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009608:	4b1e      	ldr	r3, [pc, #120]	; (8009684 <mem_free+0xf8>)
 800960a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800960e:	4924      	ldr	r1, [pc, #144]	; (80096a0 <mem_free+0x114>)
 8009610:	481e      	ldr	r0, [pc, #120]	; (800968c <mem_free+0x100>)
 8009612:	f00a fe41 	bl	8014298 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009616:	4821      	ldr	r0, [pc, #132]	; (800969c <mem_free+0x110>)
 8009618:	f00a fda7 	bl	801416a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800961c:	f00a fdd8 	bl	80141d0 <sys_arch_protect>
 8009620:	6178      	str	r0, [r7, #20]
 8009622:	6978      	ldr	r0, [r7, #20]
 8009624:	f00a fde2 	bl	80141ec <sys_arch_unprotect>
    return;
 8009628:	e029      	b.n	800967e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800962a:	69f8      	ldr	r0, [r7, #28]
 800962c:	f7ff ff72 	bl	8009514 <mem_link_valid>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d110      	bne.n	8009658 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009636:	4b13      	ldr	r3, [pc, #76]	; (8009684 <mem_free+0xf8>)
 8009638:	f240 2295 	movw	r2, #661	; 0x295
 800963c:	4919      	ldr	r1, [pc, #100]	; (80096a4 <mem_free+0x118>)
 800963e:	4813      	ldr	r0, [pc, #76]	; (800968c <mem_free+0x100>)
 8009640:	f00a fe2a 	bl	8014298 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009644:	4815      	ldr	r0, [pc, #84]	; (800969c <mem_free+0x110>)
 8009646:	f00a fd90 	bl	801416a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800964a:	f00a fdc1 	bl	80141d0 <sys_arch_protect>
 800964e:	61b8      	str	r0, [r7, #24]
 8009650:	69b8      	ldr	r0, [r7, #24]
 8009652:	f00a fdcb 	bl	80141ec <sys_arch_unprotect>
    return;
 8009656:	e012      	b.n	800967e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	2200      	movs	r2, #0
 800965c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800965e:	4b12      	ldr	r3, [pc, #72]	; (80096a8 <mem_free+0x11c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	69fa      	ldr	r2, [r7, #28]
 8009664:	429a      	cmp	r2, r3
 8009666:	d202      	bcs.n	800966e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009668:	4a0f      	ldr	r2, [pc, #60]	; (80096a8 <mem_free+0x11c>)
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800966e:	69f8      	ldr	r0, [r7, #28]
 8009670:	f7ff fe5c 	bl	800932c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009674:	4809      	ldr	r0, [pc, #36]	; (800969c <mem_free+0x110>)
 8009676:	f00a fd78 	bl	801416a <sys_mutex_unlock>
 800967a:	e000      	b.n	800967e <mem_free+0xf2>
    return;
 800967c:	bf00      	nop
}
 800967e:	3720      	adds	r7, #32
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	08015e34 	.word	0x08015e34
 8009688:	08015f24 	.word	0x08015f24
 800968c:	08015e7c 	.word	0x08015e7c
 8009690:	20004254 	.word	0x20004254
 8009694:	20004258 	.word	0x20004258
 8009698:	08015f48 	.word	0x08015f48
 800969c:	2000425c 	.word	0x2000425c
 80096a0:	08015f64 	.word	0x08015f64
 80096a4:	08015f8c 	.word	0x08015f8c
 80096a8:	20004260 	.word	0x20004260

080096ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80096b8:	887b      	ldrh	r3, [r7, #2]
 80096ba:	3303      	adds	r3, #3
 80096bc:	b29b      	uxth	r3, r3
 80096be:	f023 0303 	bic.w	r3, r3, #3
 80096c2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80096c4:	8bfb      	ldrh	r3, [r7, #30]
 80096c6:	2b0b      	cmp	r3, #11
 80096c8:	d801      	bhi.n	80096ce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80096ca:	230c      	movs	r3, #12
 80096cc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80096ce:	8bfb      	ldrh	r3, [r7, #30]
 80096d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80096d4:	d803      	bhi.n	80096de <mem_trim+0x32>
 80096d6:	8bfa      	ldrh	r2, [r7, #30]
 80096d8:	887b      	ldrh	r3, [r7, #2]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d201      	bcs.n	80096e2 <mem_trim+0x36>
    return NULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	e0d8      	b.n	8009894 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80096e2:	4b6e      	ldr	r3, [pc, #440]	; (800989c <mem_trim+0x1f0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d304      	bcc.n	80096f6 <mem_trim+0x4a>
 80096ec:	4b6c      	ldr	r3, [pc, #432]	; (80098a0 <mem_trim+0x1f4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d306      	bcc.n	8009704 <mem_trim+0x58>
 80096f6:	4b6b      	ldr	r3, [pc, #428]	; (80098a4 <mem_trim+0x1f8>)
 80096f8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80096fc:	496a      	ldr	r1, [pc, #424]	; (80098a8 <mem_trim+0x1fc>)
 80096fe:	486b      	ldr	r0, [pc, #428]	; (80098ac <mem_trim+0x200>)
 8009700:	f00a fdca 	bl	8014298 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009704:	4b65      	ldr	r3, [pc, #404]	; (800989c <mem_trim+0x1f0>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	429a      	cmp	r2, r3
 800970c:	d304      	bcc.n	8009718 <mem_trim+0x6c>
 800970e:	4b64      	ldr	r3, [pc, #400]	; (80098a0 <mem_trim+0x1f4>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	429a      	cmp	r2, r3
 8009716:	d307      	bcc.n	8009728 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009718:	f00a fd5a 	bl	80141d0 <sys_arch_protect>
 800971c:	60b8      	str	r0, [r7, #8]
 800971e:	68b8      	ldr	r0, [r7, #8]
 8009720:	f00a fd64 	bl	80141ec <sys_arch_unprotect>
    return rmem;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	e0b5      	b.n	8009894 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3b08      	subs	r3, #8
 800972c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800972e:	69b8      	ldr	r0, [r7, #24]
 8009730:	f7ff fdea 	bl	8009308 <mem_to_ptr>
 8009734:	4603      	mov	r3, r0
 8009736:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	881a      	ldrh	r2, [r3, #0]
 800973c:	8afb      	ldrh	r3, [r7, #22]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	b29b      	uxth	r3, r3
 8009742:	3b08      	subs	r3, #8
 8009744:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009746:	8bfa      	ldrh	r2, [r7, #30]
 8009748:	8abb      	ldrh	r3, [r7, #20]
 800974a:	429a      	cmp	r2, r3
 800974c:	d906      	bls.n	800975c <mem_trim+0xb0>
 800974e:	4b55      	ldr	r3, [pc, #340]	; (80098a4 <mem_trim+0x1f8>)
 8009750:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009754:	4956      	ldr	r1, [pc, #344]	; (80098b0 <mem_trim+0x204>)
 8009756:	4855      	ldr	r0, [pc, #340]	; (80098ac <mem_trim+0x200>)
 8009758:	f00a fd9e 	bl	8014298 <iprintf>
  if (newsize > size) {
 800975c:	8bfa      	ldrh	r2, [r7, #30]
 800975e:	8abb      	ldrh	r3, [r7, #20]
 8009760:	429a      	cmp	r2, r3
 8009762:	d901      	bls.n	8009768 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009764:	2300      	movs	r3, #0
 8009766:	e095      	b.n	8009894 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009768:	8bfa      	ldrh	r2, [r7, #30]
 800976a:	8abb      	ldrh	r3, [r7, #20]
 800976c:	429a      	cmp	r2, r3
 800976e:	d101      	bne.n	8009774 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	e08f      	b.n	8009894 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009774:	484f      	ldr	r0, [pc, #316]	; (80098b4 <mem_trim+0x208>)
 8009776:	f00a fce9 	bl	801414c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff fdb0 	bl	80092e4 <ptr_to_mem>
 8009784:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	791b      	ldrb	r3, [r3, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d13f      	bne.n	800980e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009796:	d106      	bne.n	80097a6 <mem_trim+0xfa>
 8009798:	4b42      	ldr	r3, [pc, #264]	; (80098a4 <mem_trim+0x1f8>)
 800979a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800979e:	4946      	ldr	r1, [pc, #280]	; (80098b8 <mem_trim+0x20c>)
 80097a0:	4842      	ldr	r0, [pc, #264]	; (80098ac <mem_trim+0x200>)
 80097a2:	f00a fd79 	bl	8014298 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80097ac:	8afa      	ldrh	r2, [r7, #22]
 80097ae:	8bfb      	ldrh	r3, [r7, #30]
 80097b0:	4413      	add	r3, r2
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	3308      	adds	r3, #8
 80097b6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80097b8:	4b40      	ldr	r3, [pc, #256]	; (80098bc <mem_trim+0x210>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d106      	bne.n	80097d0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80097c2:	89fb      	ldrh	r3, [r7, #14]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fd8d 	bl	80092e4 <ptr_to_mem>
 80097ca:	4602      	mov	r2, r0
 80097cc:	4b3b      	ldr	r3, [pc, #236]	; (80098bc <mem_trim+0x210>)
 80097ce:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80097d0:	89fb      	ldrh	r3, [r7, #14]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff fd86 	bl	80092e4 <ptr_to_mem>
 80097d8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2200      	movs	r2, #0
 80097de:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	89ba      	ldrh	r2, [r7, #12]
 80097e4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	8afa      	ldrh	r2, [r7, #22]
 80097ea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	89fa      	ldrh	r2, [r7, #14]
 80097f0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80097fa:	d047      	beq.n	800988c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff fd6f 	bl	80092e4 <ptr_to_mem>
 8009806:	4602      	mov	r2, r0
 8009808:	89fb      	ldrh	r3, [r7, #14]
 800980a:	8053      	strh	r3, [r2, #2]
 800980c:	e03e      	b.n	800988c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800980e:	8bfb      	ldrh	r3, [r7, #30]
 8009810:	f103 0214 	add.w	r2, r3, #20
 8009814:	8abb      	ldrh	r3, [r7, #20]
 8009816:	429a      	cmp	r2, r3
 8009818:	d838      	bhi.n	800988c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800981a:	8afa      	ldrh	r2, [r7, #22]
 800981c:	8bfb      	ldrh	r3, [r7, #30]
 800981e:	4413      	add	r3, r2
 8009820:	b29b      	uxth	r3, r3
 8009822:	3308      	adds	r3, #8
 8009824:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	881b      	ldrh	r3, [r3, #0]
 800982a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800982e:	d106      	bne.n	800983e <mem_trim+0x192>
 8009830:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <mem_trim+0x1f8>)
 8009832:	f240 3216 	movw	r2, #790	; 0x316
 8009836:	4920      	ldr	r1, [pc, #128]	; (80098b8 <mem_trim+0x20c>)
 8009838:	481c      	ldr	r0, [pc, #112]	; (80098ac <mem_trim+0x200>)
 800983a:	f00a fd2d 	bl	8014298 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800983e:	89fb      	ldrh	r3, [r7, #14]
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff fd4f 	bl	80092e4 <ptr_to_mem>
 8009846:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009848:	4b1c      	ldr	r3, [pc, #112]	; (80098bc <mem_trim+0x210>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	429a      	cmp	r2, r3
 8009850:	d202      	bcs.n	8009858 <mem_trim+0x1ac>
      lfree = mem2;
 8009852:	4a1a      	ldr	r2, [pc, #104]	; (80098bc <mem_trim+0x210>)
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	2200      	movs	r2, #0
 800985c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	881a      	ldrh	r2, [r3, #0]
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	8afa      	ldrh	r2, [r7, #22]
 800986a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	89fa      	ldrh	r2, [r7, #14]
 8009870:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800987a:	d007      	beq.n	800988c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff fd2f 	bl	80092e4 <ptr_to_mem>
 8009886:	4602      	mov	r2, r0
 8009888:	89fb      	ldrh	r3, [r7, #14]
 800988a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800988c:	4809      	ldr	r0, [pc, #36]	; (80098b4 <mem_trim+0x208>)
 800988e:	f00a fc6c 	bl	801416a <sys_mutex_unlock>
  return rmem;
 8009892:	687b      	ldr	r3, [r7, #4]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20004254 	.word	0x20004254
 80098a0:	20004258 	.word	0x20004258
 80098a4:	08015e34 	.word	0x08015e34
 80098a8:	08015fc0 	.word	0x08015fc0
 80098ac:	08015e7c 	.word	0x08015e7c
 80098b0:	08015fd8 	.word	0x08015fd8
 80098b4:	2000425c 	.word	0x2000425c
 80098b8:	08015ff8 	.word	0x08015ff8
 80098bc:	20004260 	.word	0x20004260

080098c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80098ca:	88fb      	ldrh	r3, [r7, #6]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <mem_malloc+0x14>
    return NULL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	e0e2      	b.n	8009a9a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	3303      	adds	r3, #3
 80098d8:	b29b      	uxth	r3, r3
 80098da:	f023 0303 	bic.w	r3, r3, #3
 80098de:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80098e0:	8bbb      	ldrh	r3, [r7, #28]
 80098e2:	2b0b      	cmp	r3, #11
 80098e4:	d801      	bhi.n	80098ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80098e6:	230c      	movs	r3, #12
 80098e8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80098ea:	8bbb      	ldrh	r3, [r7, #28]
 80098ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80098f0:	d803      	bhi.n	80098fa <mem_malloc+0x3a>
 80098f2:	8bba      	ldrh	r2, [r7, #28]
 80098f4:	88fb      	ldrh	r3, [r7, #6]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d201      	bcs.n	80098fe <mem_malloc+0x3e>
    return NULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	e0cd      	b.n	8009a9a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80098fe:	4869      	ldr	r0, [pc, #420]	; (8009aa4 <mem_malloc+0x1e4>)
 8009900:	f00a fc24 	bl	801414c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009904:	4b68      	ldr	r3, [pc, #416]	; (8009aa8 <mem_malloc+0x1e8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fcfd 	bl	8009308 <mem_to_ptr>
 800990e:	4603      	mov	r3, r0
 8009910:	83fb      	strh	r3, [r7, #30]
 8009912:	e0b7      	b.n	8009a84 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009914:	8bfb      	ldrh	r3, [r7, #30]
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff fce4 	bl	80092e4 <ptr_to_mem>
 800991c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	791b      	ldrb	r3, [r3, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	f040 80a7 	bne.w	8009a76 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	461a      	mov	r2, r3
 800992e:	8bfb      	ldrh	r3, [r7, #30]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	f1a3 0208 	sub.w	r2, r3, #8
 8009936:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009938:	429a      	cmp	r2, r3
 800993a:	f0c0 809c 	bcc.w	8009a76 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	8bfb      	ldrh	r3, [r7, #30]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	f1a3 0208 	sub.w	r2, r3, #8
 800994c:	8bbb      	ldrh	r3, [r7, #28]
 800994e:	3314      	adds	r3, #20
 8009950:	429a      	cmp	r2, r3
 8009952:	d333      	bcc.n	80099bc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009954:	8bfa      	ldrh	r2, [r7, #30]
 8009956:	8bbb      	ldrh	r3, [r7, #28]
 8009958:	4413      	add	r3, r2
 800995a:	b29b      	uxth	r3, r3
 800995c:	3308      	adds	r3, #8
 800995e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009960:	8a7b      	ldrh	r3, [r7, #18]
 8009962:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009966:	d106      	bne.n	8009976 <mem_malloc+0xb6>
 8009968:	4b50      	ldr	r3, [pc, #320]	; (8009aac <mem_malloc+0x1ec>)
 800996a:	f240 3287 	movw	r2, #903	; 0x387
 800996e:	4950      	ldr	r1, [pc, #320]	; (8009ab0 <mem_malloc+0x1f0>)
 8009970:	4850      	ldr	r0, [pc, #320]	; (8009ab4 <mem_malloc+0x1f4>)
 8009972:	f00a fc91 	bl	8014298 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009976:	8a7b      	ldrh	r3, [r7, #18]
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff fcb3 	bl	80092e4 <ptr_to_mem>
 800997e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	881a      	ldrh	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8bfa      	ldrh	r2, [r7, #30]
 8009992:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	8a7a      	ldrh	r2, [r7, #18]
 8009998:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2201      	movs	r2, #1
 800999e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099a8:	d00b      	beq.n	80099c2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff fc98 	bl	80092e4 <ptr_to_mem>
 80099b4:	4602      	mov	r2, r0
 80099b6:	8a7b      	ldrh	r3, [r7, #18]
 80099b8:	8053      	strh	r3, [r2, #2]
 80099ba:	e002      	b.n	80099c2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2201      	movs	r2, #1
 80099c0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80099c2:	4b39      	ldr	r3, [pc, #228]	; (8009aa8 <mem_malloc+0x1e8>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d127      	bne.n	8009a1c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80099cc:	4b36      	ldr	r3, [pc, #216]	; (8009aa8 <mem_malloc+0x1e8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80099d2:	e005      	b.n	80099e0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff fc83 	bl	80092e4 <ptr_to_mem>
 80099de:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	791b      	ldrb	r3, [r3, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <mem_malloc+0x132>
 80099e8:	4b33      	ldr	r3, [pc, #204]	; (8009ab8 <mem_malloc+0x1f8>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d1f0      	bne.n	80099d4 <mem_malloc+0x114>
          }
          lfree = cur;
 80099f2:	4a2d      	ldr	r2, [pc, #180]	; (8009aa8 <mem_malloc+0x1e8>)
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80099f8:	4b2b      	ldr	r3, [pc, #172]	; (8009aa8 <mem_malloc+0x1e8>)
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	4b2e      	ldr	r3, [pc, #184]	; (8009ab8 <mem_malloc+0x1f8>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d00b      	beq.n	8009a1c <mem_malloc+0x15c>
 8009a04:	4b28      	ldr	r3, [pc, #160]	; (8009aa8 <mem_malloc+0x1e8>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	791b      	ldrb	r3, [r3, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d006      	beq.n	8009a1c <mem_malloc+0x15c>
 8009a0e:	4b27      	ldr	r3, [pc, #156]	; (8009aac <mem_malloc+0x1ec>)
 8009a10:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009a14:	4929      	ldr	r1, [pc, #164]	; (8009abc <mem_malloc+0x1fc>)
 8009a16:	4827      	ldr	r0, [pc, #156]	; (8009ab4 <mem_malloc+0x1f4>)
 8009a18:	f00a fc3e 	bl	8014298 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009a1c:	4821      	ldr	r0, [pc, #132]	; (8009aa4 <mem_malloc+0x1e4>)
 8009a1e:	f00a fba4 	bl	801416a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009a22:	8bba      	ldrh	r2, [r7, #28]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	4413      	add	r3, r2
 8009a28:	3308      	adds	r3, #8
 8009a2a:	4a23      	ldr	r2, [pc, #140]	; (8009ab8 <mem_malloc+0x1f8>)
 8009a2c:	6812      	ldr	r2, [r2, #0]
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d906      	bls.n	8009a40 <mem_malloc+0x180>
 8009a32:	4b1e      	ldr	r3, [pc, #120]	; (8009aac <mem_malloc+0x1ec>)
 8009a34:	f240 32ba 	movw	r2, #954	; 0x3ba
 8009a38:	4921      	ldr	r1, [pc, #132]	; (8009ac0 <mem_malloc+0x200>)
 8009a3a:	481e      	ldr	r0, [pc, #120]	; (8009ab4 <mem_malloc+0x1f4>)
 8009a3c:	f00a fc2c 	bl	8014298 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d006      	beq.n	8009a58 <mem_malloc+0x198>
 8009a4a:	4b18      	ldr	r3, [pc, #96]	; (8009aac <mem_malloc+0x1ec>)
 8009a4c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8009a50:	491c      	ldr	r1, [pc, #112]	; (8009ac4 <mem_malloc+0x204>)
 8009a52:	4818      	ldr	r0, [pc, #96]	; (8009ab4 <mem_malloc+0x1f4>)
 8009a54:	f00a fc20 	bl	8014298 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f003 0303 	and.w	r3, r3, #3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d006      	beq.n	8009a70 <mem_malloc+0x1b0>
 8009a62:	4b12      	ldr	r3, [pc, #72]	; (8009aac <mem_malloc+0x1ec>)
 8009a64:	f240 32be 	movw	r2, #958	; 0x3be
 8009a68:	4917      	ldr	r1, [pc, #92]	; (8009ac8 <mem_malloc+0x208>)
 8009a6a:	4812      	ldr	r0, [pc, #72]	; (8009ab4 <mem_malloc+0x1f4>)
 8009a6c:	f00a fc14 	bl	8014298 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	3308      	adds	r3, #8
 8009a74:	e011      	b.n	8009a9a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8009a76:	8bfb      	ldrh	r3, [r7, #30]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7ff fc33 	bl	80092e4 <ptr_to_mem>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009a84:	8bfa      	ldrh	r2, [r7, #30]
 8009a86:	8bbb      	ldrh	r3, [r7, #28]
 8009a88:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	f4ff af41 	bcc.w	8009914 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009a92:	4804      	ldr	r0, [pc, #16]	; (8009aa4 <mem_malloc+0x1e4>)
 8009a94:	f00a fb69 	bl	801416a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3720      	adds	r7, #32
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	2000425c 	.word	0x2000425c
 8009aa8:	20004260 	.word	0x20004260
 8009aac:	08015e34 	.word	0x08015e34
 8009ab0:	08015ff8 	.word	0x08015ff8
 8009ab4:	08015e7c 	.word	0x08015e7c
 8009ab8:	20004258 	.word	0x20004258
 8009abc:	0801600c 	.word	0x0801600c
 8009ac0:	08016028 	.word	0x08016028
 8009ac4:	08016058 	.word	0x08016058
 8009ac8:	08016088 	.word	0x08016088

08009acc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	3303      	adds	r3, #3
 8009ae2:	f023 0303 	bic.w	r3, r3, #3
 8009ae6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	e011      	b.n	8009b12 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	4413      	add	r3, r2
 8009b0a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	885b      	ldrh	r3, [r3, #2]
 8009b16:	461a      	mov	r2, r3
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	dbe7      	blt.n	8009aee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009b1e:	bf00      	nop
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
	...

08009b2c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009b32:	2300      	movs	r3, #0
 8009b34:	80fb      	strh	r3, [r7, #6]
 8009b36:	e009      	b.n	8009b4c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009b38:	88fb      	ldrh	r3, [r7, #6]
 8009b3a:	4a08      	ldr	r2, [pc, #32]	; (8009b5c <memp_init+0x30>)
 8009b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff ffc3 	bl	8009acc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009b46:	88fb      	ldrh	r3, [r7, #6]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	80fb      	strh	r3, [r7, #6]
 8009b4c:	88fb      	ldrh	r3, [r7, #6]
 8009b4e:	2b0c      	cmp	r3, #12
 8009b50:	d9f2      	bls.n	8009b38 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	08018894 	.word	0x08018894

08009b60 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009b68:	f00a fb32 	bl	80141d0 <sys_arch_protect>
 8009b6c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d015      	beq.n	8009ba8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	6812      	ldr	r2, [r2, #0]
 8009b84:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f003 0303 	and.w	r3, r3, #3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d006      	beq.n	8009b9e <do_memp_malloc_pool+0x3e>
 8009b90:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <do_memp_malloc_pool+0x58>)
 8009b92:	f240 1219 	movw	r2, #281	; 0x119
 8009b96:	4909      	ldr	r1, [pc, #36]	; (8009bbc <do_memp_malloc_pool+0x5c>)
 8009b98:	4809      	ldr	r0, [pc, #36]	; (8009bc0 <do_memp_malloc_pool+0x60>)
 8009b9a:	f00a fb7d 	bl	8014298 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f00a fb24 	bl	80141ec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	e003      	b.n	8009bb0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f00a fb1f 	bl	80141ec <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	080160ac 	.word	0x080160ac
 8009bbc:	080160dc 	.word	0x080160dc
 8009bc0:	08016100 	.word	0x08016100

08009bc4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	2b0c      	cmp	r3, #12
 8009bd2:	d908      	bls.n	8009be6 <memp_malloc+0x22>
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <memp_malloc+0x3c>)
 8009bd6:	f240 1257 	movw	r2, #343	; 0x157
 8009bda:	490a      	ldr	r1, [pc, #40]	; (8009c04 <memp_malloc+0x40>)
 8009bdc:	480a      	ldr	r0, [pc, #40]	; (8009c08 <memp_malloc+0x44>)
 8009bde:	f00a fb5b 	bl	8014298 <iprintf>
 8009be2:	2300      	movs	r3, #0
 8009be4:	e008      	b.n	8009bf8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009be6:	79fb      	ldrb	r3, [r7, #7]
 8009be8:	4a08      	ldr	r2, [pc, #32]	; (8009c0c <memp_malloc+0x48>)
 8009bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff ffb6 	bl	8009b60 <do_memp_malloc_pool>
 8009bf4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	080160ac 	.word	0x080160ac
 8009c04:	0801613c 	.word	0x0801613c
 8009c08:	08016100 	.word	0x08016100
 8009c0c:	08018894 	.word	0x08018894

08009c10 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d006      	beq.n	8009c32 <do_memp_free_pool+0x22>
 8009c24:	4b0d      	ldr	r3, [pc, #52]	; (8009c5c <do_memp_free_pool+0x4c>)
 8009c26:	f240 126d 	movw	r2, #365	; 0x16d
 8009c2a:	490d      	ldr	r1, [pc, #52]	; (8009c60 <do_memp_free_pool+0x50>)
 8009c2c:	480d      	ldr	r0, [pc, #52]	; (8009c64 <do_memp_free_pool+0x54>)
 8009c2e:	f00a fb33 	bl	8014298 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009c36:	f00a facb 	bl	80141d0 <sys_arch_protect>
 8009c3a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009c4e:	68b8      	ldr	r0, [r7, #8]
 8009c50:	f00a facc 	bl	80141ec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009c54:	bf00      	nop
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	080160ac 	.word	0x080160ac
 8009c60:	0801615c 	.word	0x0801615c
 8009c64:	08016100 	.word	0x08016100

08009c68 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	6039      	str	r1, [r7, #0]
 8009c72:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009c74:	79fb      	ldrb	r3, [r7, #7]
 8009c76:	2b0c      	cmp	r3, #12
 8009c78:	d907      	bls.n	8009c8a <memp_free+0x22>
 8009c7a:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <memp_free+0x44>)
 8009c7c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009c80:	490b      	ldr	r1, [pc, #44]	; (8009cb0 <memp_free+0x48>)
 8009c82:	480c      	ldr	r0, [pc, #48]	; (8009cb4 <memp_free+0x4c>)
 8009c84:	f00a fb08 	bl	8014298 <iprintf>
 8009c88:	e00c      	b.n	8009ca4 <memp_free+0x3c>

  if (mem == NULL) {
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d008      	beq.n	8009ca2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	4a09      	ldr	r2, [pc, #36]	; (8009cb8 <memp_free+0x50>)
 8009c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff ffb8 	bl	8009c10 <do_memp_free_pool>
 8009ca0:	e000      	b.n	8009ca4 <memp_free+0x3c>
    return;
 8009ca2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	080160ac 	.word	0x080160ac
 8009cb0:	0801617c 	.word	0x0801617c
 8009cb4:	08016100 	.word	0x08016100
 8009cb8:	08018894 	.word	0x08018894

08009cbc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009cc0:	bf00      	nop
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
	...

08009ccc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d108      	bne.n	8009cf2 <netif_add+0x26>
 8009ce0:	4b57      	ldr	r3, [pc, #348]	; (8009e40 <netif_add+0x174>)
 8009ce2:	f240 1227 	movw	r2, #295	; 0x127
 8009ce6:	4957      	ldr	r1, [pc, #348]	; (8009e44 <netif_add+0x178>)
 8009ce8:	4857      	ldr	r0, [pc, #348]	; (8009e48 <netif_add+0x17c>)
 8009cea:	f00a fad5 	bl	8014298 <iprintf>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e0a2      	b.n	8009e38 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d108      	bne.n	8009d0a <netif_add+0x3e>
 8009cf8:	4b51      	ldr	r3, [pc, #324]	; (8009e40 <netif_add+0x174>)
 8009cfa:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009cfe:	4953      	ldr	r1, [pc, #332]	; (8009e4c <netif_add+0x180>)
 8009d00:	4851      	ldr	r0, [pc, #324]	; (8009e48 <netif_add+0x17c>)
 8009d02:	f00a fac9 	bl	8014298 <iprintf>
 8009d06:	2300      	movs	r3, #0
 8009d08:	e096      	b.n	8009e38 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009d10:	4b4f      	ldr	r3, [pc, #316]	; (8009e50 <netif_add+0x184>)
 8009d12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d101      	bne.n	8009d1e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009d1a:	4b4d      	ldr	r3, [pc, #308]	; (8009e50 <netif_add+0x184>)
 8009d1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009d24:	4b4a      	ldr	r3, [pc, #296]	; (8009e50 <netif_add+0x184>)
 8009d26:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4a45      	ldr	r2, [pc, #276]	; (8009e54 <netif_add+0x188>)
 8009d3e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6a3a      	ldr	r2, [r7, #32]
 8009d58:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009d5a:	4b3f      	ldr	r3, [pc, #252]	; (8009e58 <netif_add+0x18c>)
 8009d5c:	781a      	ldrb	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d68:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	68b9      	ldr	r1, [r7, #8]
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f913 	bl	8009f9c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	4798      	blx	r3
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <netif_add+0xba>
    return NULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	e058      	b.n	8009e38 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d8c:	2bff      	cmp	r3, #255	; 0xff
 8009d8e:	d103      	bne.n	8009d98 <netif_add+0xcc>
        netif->num = 0;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009d9c:	4b2f      	ldr	r3, [pc, #188]	; (8009e5c <netif_add+0x190>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	617b      	str	r3, [r7, #20]
 8009da2:	e02b      	b.n	8009dfc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d106      	bne.n	8009dba <netif_add+0xee>
 8009dac:	4b24      	ldr	r3, [pc, #144]	; (8009e40 <netif_add+0x174>)
 8009dae:	f240 128b 	movw	r2, #395	; 0x18b
 8009db2:	492b      	ldr	r1, [pc, #172]	; (8009e60 <netif_add+0x194>)
 8009db4:	4824      	ldr	r0, [pc, #144]	; (8009e48 <netif_add+0x17c>)
 8009db6:	f00a fa6f 	bl	8014298 <iprintf>
        num_netifs++;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	2bff      	cmp	r3, #255	; 0xff
 8009dc4:	dd06      	ble.n	8009dd4 <netif_add+0x108>
 8009dc6:	4b1e      	ldr	r3, [pc, #120]	; (8009e40 <netif_add+0x174>)
 8009dc8:	f240 128d 	movw	r2, #397	; 0x18d
 8009dcc:	4925      	ldr	r1, [pc, #148]	; (8009e64 <netif_add+0x198>)
 8009dce:	481e      	ldr	r0, [pc, #120]	; (8009e48 <netif_add+0x17c>)
 8009dd0:	f00a fa62 	bl	8014298 <iprintf>
        if (netif2->num == netif->num) {
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d108      	bne.n	8009df6 <netif_add+0x12a>
          netif->num++;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009dea:	3301      	adds	r3, #1
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009df4:	e005      	b.n	8009e02 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1d0      	bne.n	8009da4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1be      	bne.n	8009d86 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e0e:	2bfe      	cmp	r3, #254	; 0xfe
 8009e10:	d103      	bne.n	8009e1a <netif_add+0x14e>
    netif_num = 0;
 8009e12:	4b11      	ldr	r3, [pc, #68]	; (8009e58 <netif_add+0x18c>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	701a      	strb	r2, [r3, #0]
 8009e18:	e006      	b.n	8009e28 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e20:	3301      	adds	r3, #1
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <netif_add+0x18c>)
 8009e26:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009e28:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <netif_add+0x190>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009e30:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <netif_add+0x190>)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009e36:	68fb      	ldr	r3, [r7, #12]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	08016198 	.word	0x08016198
 8009e44:	0801622c 	.word	0x0801622c
 8009e48:	080161e8 	.word	0x080161e8
 8009e4c:	08016248 	.word	0x08016248
 8009e50:	08018908 	.word	0x08018908
 8009e54:	0800a277 	.word	0x0800a277
 8009e58:	20004298 	.word	0x20004298
 8009e5c:	2000acac 	.word	0x2000acac
 8009e60:	0801626c 	.word	0x0801626c
 8009e64:	08016280 	.word	0x08016280

08009e68 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f002 fe3d 	bl	800caf4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f007 fcf9 	bl	8011874 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <netif_do_set_ipaddr+0x20>
 8009e9e:	4b1d      	ldr	r3, [pc, #116]	; (8009f14 <netif_do_set_ipaddr+0x88>)
 8009ea0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009ea4:	491c      	ldr	r1, [pc, #112]	; (8009f18 <netif_do_set_ipaddr+0x8c>)
 8009ea6:	481d      	ldr	r0, [pc, #116]	; (8009f1c <netif_do_set_ipaddr+0x90>)
 8009ea8:	f00a f9f6 	bl	8014298 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d106      	bne.n	8009ec0 <netif_do_set_ipaddr+0x34>
 8009eb2:	4b18      	ldr	r3, [pc, #96]	; (8009f14 <netif_do_set_ipaddr+0x88>)
 8009eb4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009eb8:	4917      	ldr	r1, [pc, #92]	; (8009f18 <netif_do_set_ipaddr+0x8c>)
 8009eba:	4818      	ldr	r0, [pc, #96]	; (8009f1c <netif_do_set_ipaddr+0x90>)
 8009ebc:	f00a f9ec 	bl	8014298 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d01c      	beq.n	8009f08 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009ede:	f107 0314 	add.w	r3, r7, #20
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff ffbf 	bl	8009e68 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <netif_do_set_ipaddr+0x6a>
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	e000      	b.n	8009ef8 <netif_do_set_ipaddr+0x6c>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009efc:	2101      	movs	r1, #1
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 f8d2 	bl	800a0a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009f04:	2301      	movs	r3, #1
 8009f06:	e000      	b.n	8009f0a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	08016198 	.word	0x08016198
 8009f18:	080162b0 	.word	0x080162b0
 8009f1c:	080161e8 	.word	0x080161e8

08009f20 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3308      	adds	r3, #8
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d00a      	beq.n	8009f50 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <netif_do_set_netmask+0x26>
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	e000      	b.n	8009f48 <netif_do_set_netmask+0x28>
 8009f46:	2300      	movs	r3, #0
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e000      	b.n	8009f52 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b085      	sub	sp, #20
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	330c      	adds	r3, #12
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d00a      	beq.n	8009f8e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d002      	beq.n	8009f84 <netif_do_set_gw+0x26>
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	e000      	b.n	8009f86 <netif_do_set_gw+0x28>
 8009f84:	2300      	movs	r3, #0
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b088      	sub	sp, #32
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009faa:	2300      	movs	r3, #0
 8009fac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009fb8:	4b1c      	ldr	r3, [pc, #112]	; (800a02c <netif_set_addr+0x90>)
 8009fba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009fc2:	4b1a      	ldr	r3, [pc, #104]	; (800a02c <netif_set_addr+0x90>)
 8009fc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009fcc:	4b17      	ldr	r3, [pc, #92]	; (800a02c <netif_set_addr+0x90>)
 8009fce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <netif_set_addr+0x42>
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <netif_set_addr+0x46>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e000      	b.n	8009fe4 <netif_set_addr+0x48>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d006      	beq.n	8009ffa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009fec:	f107 0310 	add.w	r3, r7, #16
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	68b9      	ldr	r1, [r7, #8]
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f7ff ff49 	bl	8009e8c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	6879      	ldr	r1, [r7, #4]
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7ff ff8e 	bl	8009f20 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f7ff ffa8 	bl	8009f5e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d106      	bne.n	800a022 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a014:	f107 0310 	add.w	r3, r7, #16
 800a018:	461a      	mov	r2, r3
 800a01a:	68b9      	ldr	r1, [r7, #8]
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7ff ff35 	bl	8009e8c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a022:	bf00      	nop
 800a024:	3720      	adds	r7, #32
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	08018908 	.word	0x08018908

0800a030 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a038:	4a04      	ldr	r2, [pc, #16]	; (800a04c <netif_set_default+0x1c>)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a03e:	bf00      	nop
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	2000acb0 	.word	0x2000acb0

0800a050 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d107      	bne.n	800a06e <netif_set_up+0x1e>
 800a05e:	4b0f      	ldr	r3, [pc, #60]	; (800a09c <netif_set_up+0x4c>)
 800a060:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a064:	490e      	ldr	r1, [pc, #56]	; (800a0a0 <netif_set_up+0x50>)
 800a066:	480f      	ldr	r0, [pc, #60]	; (800a0a4 <netif_set_up+0x54>)
 800a068:	f00a f916 	bl	8014298 <iprintf>
 800a06c:	e013      	b.n	800a096 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a074:	f003 0301 	and.w	r3, r3, #1
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10c      	bne.n	800a096 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a082:	f043 0301 	orr.w	r3, r3, #1
 800a086:	b2da      	uxtb	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a08e:	2103      	movs	r1, #3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f809 	bl	800a0a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	08016198 	.word	0x08016198
 800a0a0:	08016320 	.word	0x08016320
 800a0a4:	080161e8 	.word	0x080161e8

0800a0a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <netif_issue_reports+0x20>
 800a0ba:	4b18      	ldr	r3, [pc, #96]	; (800a11c <netif_issue_reports+0x74>)
 800a0bc:	f240 326d 	movw	r2, #877	; 0x36d
 800a0c0:	4917      	ldr	r1, [pc, #92]	; (800a120 <netif_issue_reports+0x78>)
 800a0c2:	4818      	ldr	r0, [pc, #96]	; (800a124 <netif_issue_reports+0x7c>)
 800a0c4:	f00a f8e8 	bl	8014298 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0ce:	f003 0304 	and.w	r3, r3, #4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d01e      	beq.n	800a114 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d017      	beq.n	800a114 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d013      	beq.n	800a116 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00e      	beq.n	800a116 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0fe:	f003 0308 	and.w	r3, r3, #8
 800a102:	2b00      	cmp	r3, #0
 800a104:	d007      	beq.n	800a116 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3304      	adds	r3, #4
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f008 fb1b 	bl	8012748 <etharp_request>
 800a112:	e000      	b.n	800a116 <netif_issue_reports+0x6e>
    return;
 800a114:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	08016198 	.word	0x08016198
 800a120:	0801633c 	.word	0x0801633c
 800a124:	080161e8 	.word	0x080161e8

0800a128 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d107      	bne.n	800a146 <netif_set_down+0x1e>
 800a136:	4b12      	ldr	r3, [pc, #72]	; (800a180 <netif_set_down+0x58>)
 800a138:	f240 329b 	movw	r2, #923	; 0x39b
 800a13c:	4911      	ldr	r1, [pc, #68]	; (800a184 <netif_set_down+0x5c>)
 800a13e:	4812      	ldr	r0, [pc, #72]	; (800a188 <netif_set_down+0x60>)
 800a140:	f00a f8aa 	bl	8014298 <iprintf>
 800a144:	e019      	b.n	800a17a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a14c:	f003 0301 	and.w	r3, r3, #1
 800a150:	2b00      	cmp	r3, #0
 800a152:	d012      	beq.n	800a17a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a16c:	f003 0308 	and.w	r3, r3, #8
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f007 fea5 	bl	8011ec4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	08016198 	.word	0x08016198
 800a184:	08016360 	.word	0x08016360
 800a188:	080161e8 	.word	0x080161e8

0800a18c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d107      	bne.n	800a1aa <netif_set_link_up+0x1e>
 800a19a:	4b13      	ldr	r3, [pc, #76]	; (800a1e8 <netif_set_link_up+0x5c>)
 800a19c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a1a0:	4912      	ldr	r1, [pc, #72]	; (800a1ec <netif_set_link_up+0x60>)
 800a1a2:	4813      	ldr	r0, [pc, #76]	; (800a1f0 <netif_set_link_up+0x64>)
 800a1a4:	f00a f878 	bl	8014298 <iprintf>
 800a1a8:	e01b      	b.n	800a1e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d114      	bne.n	800a1e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1be:	f043 0304 	orr.w	r3, r3, #4
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a1ca:	2103      	movs	r1, #3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7ff ff6b 	bl	800a0a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d003      	beq.n	800a1e2 <netif_set_link_up+0x56>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	08016198 	.word	0x08016198
 800a1ec:	08016380 	.word	0x08016380
 800a1f0:	080161e8 	.word	0x080161e8

0800a1f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d107      	bne.n	800a212 <netif_set_link_down+0x1e>
 800a202:	4b11      	ldr	r3, [pc, #68]	; (800a248 <netif_set_link_down+0x54>)
 800a204:	f240 4206 	movw	r2, #1030	; 0x406
 800a208:	4910      	ldr	r1, [pc, #64]	; (800a24c <netif_set_link_down+0x58>)
 800a20a:	4811      	ldr	r0, [pc, #68]	; (800a250 <netif_set_link_down+0x5c>)
 800a20c:	f00a f844 	bl	8014298 <iprintf>
 800a210:	e017      	b.n	800a242 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a218:	f003 0304 	and.w	r3, r3, #4
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d010      	beq.n	800a242 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a226:	f023 0304 	bic.w	r3, r3, #4
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	69db      	ldr	r3, [r3, #28]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <netif_set_link_down+0x4e>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	08016198 	.word	0x08016198
 800a24c:	080163a4 	.word	0x080163a4
 800a250:	080161e8 	.word	0x080161e8

0800a254 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	61da      	str	r2, [r3, #28]
  }
}
 800a26a:	bf00      	nop
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a276:	b480      	push	{r7}
 800a278:	b085      	sub	sp, #20
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	60f8      	str	r0, [r7, #12]
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a282:	f06f 030b 	mvn.w	r3, #11
}
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
	...

0800a294 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d013      	beq.n	800a2cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a2a4:	4b0d      	ldr	r3, [pc, #52]	; (800a2dc <netif_get_by_index+0x48>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	60fb      	str	r3, [r7, #12]
 800a2aa:	e00c      	b.n	800a2c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	79fa      	ldrb	r2, [r7, #7]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d101      	bne.n	800a2c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	e006      	b.n	800a2ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1ef      	bne.n	800a2ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	2000acac 	.word	0x2000acac

0800a2e0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a2e6:	f009 ff73 	bl	80141d0 <sys_arch_protect>
 800a2ea:	6038      	str	r0, [r7, #0]
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <pbuf_free_ooseq+0x44>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	701a      	strb	r2, [r3, #0]
 800a2f2:	6838      	ldr	r0, [r7, #0]
 800a2f4:	f009 ff7a 	bl	80141ec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <pbuf_free_ooseq+0x48>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	607b      	str	r3, [r7, #4]
 800a2fe:	e00a      	b.n	800a316 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f002 fc31 	bl	800cb70 <tcp_free_ooseq>
      return;
 800a30e:	e005      	b.n	800a31c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	607b      	str	r3, [r7, #4]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1f1      	bne.n	800a300 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	2000acb4 	.word	0x2000acb4
 800a328:	2000acbc 	.word	0x2000acbc

0800a32c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a334:	f7ff ffd4 	bl	800a2e0 <pbuf_free_ooseq>
}
 800a338:	bf00      	nop
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a346:	f009 ff43 	bl	80141d0 <sys_arch_protect>
 800a34a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a34c:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <pbuf_pool_is_empty+0x4c>)
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a352:	4b0e      	ldr	r3, [pc, #56]	; (800a38c <pbuf_pool_is_empty+0x4c>)
 800a354:	2201      	movs	r2, #1
 800a356:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f009 ff47 	bl	80141ec <sys_arch_unprotect>

  if (!queued) {
 800a35e:	78fb      	ldrb	r3, [r7, #3]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10f      	bne.n	800a384 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a364:	2100      	movs	r1, #0
 800a366:	480a      	ldr	r0, [pc, #40]	; (800a390 <pbuf_pool_is_empty+0x50>)
 800a368:	f7fe fed6 	bl	8009118 <tcpip_try_callback>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d008      	beq.n	800a384 <pbuf_pool_is_empty+0x44>
 800a372:	f009 ff2d 	bl	80141d0 <sys_arch_protect>
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	4b04      	ldr	r3, [pc, #16]	; (800a38c <pbuf_pool_is_empty+0x4c>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	701a      	strb	r2, [r3, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f009 ff34 	bl	80141ec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	2000acb4 	.word	0x2000acb4
 800a390:	0800a32d 	.word	0x0800a32d

0800a394 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	4611      	mov	r1, r2
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	80fb      	strh	r3, [r7, #6]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	88fa      	ldrh	r2, [r7, #6]
 800a3ba:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	88ba      	ldrh	r2, [r7, #4]
 800a3c0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a3c2:	8b3b      	ldrh	r3, [r7, #24]
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	7f3a      	ldrb	r2, [r7, #28]
 800a3ce:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	73da      	strb	r2, [r3, #15]
}
 800a3dc:	bf00      	nop
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08c      	sub	sp, #48	; 0x30
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	71fb      	strb	r3, [r7, #7]
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	80bb      	strh	r3, [r7, #4]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
 800a3fc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a3fe:	887b      	ldrh	r3, [r7, #2]
 800a400:	2b41      	cmp	r3, #65	; 0x41
 800a402:	d00b      	beq.n	800a41c <pbuf_alloc+0x34>
 800a404:	2b41      	cmp	r3, #65	; 0x41
 800a406:	dc02      	bgt.n	800a40e <pbuf_alloc+0x26>
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d007      	beq.n	800a41c <pbuf_alloc+0x34>
 800a40c:	e0c2      	b.n	800a594 <pbuf_alloc+0x1ac>
 800a40e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a412:	d00b      	beq.n	800a42c <pbuf_alloc+0x44>
 800a414:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a418:	d070      	beq.n	800a4fc <pbuf_alloc+0x114>
 800a41a:	e0bb      	b.n	800a594 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a41c:	887a      	ldrh	r2, [r7, #2]
 800a41e:	88bb      	ldrh	r3, [r7, #4]
 800a420:	4619      	mov	r1, r3
 800a422:	2000      	movs	r0, #0
 800a424:	f000 f8d2 	bl	800a5cc <pbuf_alloc_reference>
 800a428:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a42a:	e0bd      	b.n	800a5a8 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a42c:	2300      	movs	r3, #0
 800a42e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a430:	2300      	movs	r3, #0
 800a432:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a434:	88bb      	ldrh	r3, [r7, #4]
 800a436:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a438:	200c      	movs	r0, #12
 800a43a:	f7ff fbc3 	bl	8009bc4 <memp_malloc>
 800a43e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800a446:	f7ff ff7b 	bl	800a340 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800a450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a452:	f000 faa9 	bl	800a9a8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	e0a7      	b.n	800a5aa <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a45a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a45c:	3303      	adds	r3, #3
 800a45e:	b29b      	uxth	r3, r3
 800a460:	f023 0303 	bic.w	r3, r3, #3
 800a464:	b29b      	uxth	r3, r3
 800a466:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	8b7a      	ldrh	r2, [r7, #26]
 800a46e:	4293      	cmp	r3, r2
 800a470:	bf28      	it	cs
 800a472:	4613      	movcs	r3, r2
 800a474:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a476:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a478:	3310      	adds	r3, #16
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4413      	add	r3, r2
 800a47e:	3303      	adds	r3, #3
 800a480:	f023 0303 	bic.w	r3, r3, #3
 800a484:	4618      	mov	r0, r3
 800a486:	89f9      	ldrh	r1, [r7, #14]
 800a488:	8b7a      	ldrh	r2, [r7, #26]
 800a48a:	2300      	movs	r3, #0
 800a48c:	9301      	str	r3, [sp, #4]
 800a48e:	887b      	ldrh	r3, [r7, #2]
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	460b      	mov	r3, r1
 800a494:	4601      	mov	r1, r0
 800a496:	6938      	ldr	r0, [r7, #16]
 800a498:	f7ff ff7c 	bl	800a394 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f003 0303 	and.w	r3, r3, #3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d006      	beq.n	800a4b6 <pbuf_alloc+0xce>
 800a4a8:	4b42      	ldr	r3, [pc, #264]	; (800a5b4 <pbuf_alloc+0x1cc>)
 800a4aa:	f240 1201 	movw	r2, #257	; 0x101
 800a4ae:	4942      	ldr	r1, [pc, #264]	; (800a5b8 <pbuf_alloc+0x1d0>)
 800a4b0:	4842      	ldr	r0, [pc, #264]	; (800a5bc <pbuf_alloc+0x1d4>)
 800a4b2:	f009 fef1 	bl	8014298 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a4b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4b8:	3303      	adds	r3, #3
 800a4ba:	f023 0303 	bic.w	r3, r3, #3
 800a4be:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a4c2:	d106      	bne.n	800a4d2 <pbuf_alloc+0xea>
 800a4c4:	4b3b      	ldr	r3, [pc, #236]	; (800a5b4 <pbuf_alloc+0x1cc>)
 800a4c6:	f240 1203 	movw	r2, #259	; 0x103
 800a4ca:	493d      	ldr	r1, [pc, #244]	; (800a5c0 <pbuf_alloc+0x1d8>)
 800a4cc:	483b      	ldr	r0, [pc, #236]	; (800a5bc <pbuf_alloc+0x1d4>)
 800a4ce:	f009 fee3 	bl	8014298 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d102      	bne.n	800a4de <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	627b      	str	r3, [r7, #36]	; 0x24
 800a4dc:	e002      	b.n	800a4e4 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a4e8:	8b7a      	ldrh	r2, [r7, #26]
 800a4ea:	89fb      	ldrh	r3, [r7, #14]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a4f4:	8b7b      	ldrh	r3, [r7, #26]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d19e      	bne.n	800a438 <pbuf_alloc+0x50>
      break;
 800a4fa:	e055      	b.n	800a5a8 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a4fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4fe:	3303      	adds	r3, #3
 800a500:	b29b      	uxth	r3, r3
 800a502:	f023 0303 	bic.w	r3, r3, #3
 800a506:	b29a      	uxth	r2, r3
 800a508:	88bb      	ldrh	r3, [r7, #4]
 800a50a:	3303      	adds	r3, #3
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	f023 0303 	bic.w	r3, r3, #3
 800a512:	b29b      	uxth	r3, r3
 800a514:	4413      	add	r3, r2
 800a516:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a518:	8b3b      	ldrh	r3, [r7, #24]
 800a51a:	3310      	adds	r3, #16
 800a51c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a51e:	8b3a      	ldrh	r2, [r7, #24]
 800a520:	88bb      	ldrh	r3, [r7, #4]
 800a522:	3303      	adds	r3, #3
 800a524:	f023 0303 	bic.w	r3, r3, #3
 800a528:	429a      	cmp	r2, r3
 800a52a:	d306      	bcc.n	800a53a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a52c:	8afa      	ldrh	r2, [r7, #22]
 800a52e:	88bb      	ldrh	r3, [r7, #4]
 800a530:	3303      	adds	r3, #3
 800a532:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a536:	429a      	cmp	r2, r3
 800a538:	d201      	bcs.n	800a53e <pbuf_alloc+0x156>
        return NULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	e035      	b.n	800a5aa <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a53e:	8afb      	ldrh	r3, [r7, #22]
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff f9bd 	bl	80098c0 <mem_malloc>
 800a546:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <pbuf_alloc+0x16a>
        return NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	e02b      	b.n	800a5aa <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a552:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a554:	3310      	adds	r3, #16
 800a556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a558:	4413      	add	r3, r2
 800a55a:	3303      	adds	r3, #3
 800a55c:	f023 0303 	bic.w	r3, r3, #3
 800a560:	4618      	mov	r0, r3
 800a562:	88b9      	ldrh	r1, [r7, #4]
 800a564:	88ba      	ldrh	r2, [r7, #4]
 800a566:	2300      	movs	r3, #0
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	887b      	ldrh	r3, [r7, #2]
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	460b      	mov	r3, r1
 800a570:	4601      	mov	r1, r0
 800a572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a574:	f7ff ff0e 	bl	800a394 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f003 0303 	and.w	r3, r3, #3
 800a580:	2b00      	cmp	r3, #0
 800a582:	d010      	beq.n	800a5a6 <pbuf_alloc+0x1be>
 800a584:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <pbuf_alloc+0x1cc>)
 800a586:	f240 1223 	movw	r2, #291	; 0x123
 800a58a:	490e      	ldr	r1, [pc, #56]	; (800a5c4 <pbuf_alloc+0x1dc>)
 800a58c:	480b      	ldr	r0, [pc, #44]	; (800a5bc <pbuf_alloc+0x1d4>)
 800a58e:	f009 fe83 	bl	8014298 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a592:	e008      	b.n	800a5a6 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a594:	4b07      	ldr	r3, [pc, #28]	; (800a5b4 <pbuf_alloc+0x1cc>)
 800a596:	f240 1227 	movw	r2, #295	; 0x127
 800a59a:	490b      	ldr	r1, [pc, #44]	; (800a5c8 <pbuf_alloc+0x1e0>)
 800a59c:	4807      	ldr	r0, [pc, #28]	; (800a5bc <pbuf_alloc+0x1d4>)
 800a59e:	f009 fe7b 	bl	8014298 <iprintf>
      return NULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e001      	b.n	800a5aa <pbuf_alloc+0x1c2>
      break;
 800a5a6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3728      	adds	r7, #40	; 0x28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	080163c8 	.word	0x080163c8
 800a5b8:	080163f8 	.word	0x080163f8
 800a5bc:	08016428 	.word	0x08016428
 800a5c0:	08016450 	.word	0x08016450
 800a5c4:	08016484 	.word	0x08016484
 800a5c8:	080164b0 	.word	0x080164b0

0800a5cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af02      	add	r7, sp, #8
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	807b      	strh	r3, [r7, #2]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a5dc:	883b      	ldrh	r3, [r7, #0]
 800a5de:	2b41      	cmp	r3, #65	; 0x41
 800a5e0:	d009      	beq.n	800a5f6 <pbuf_alloc_reference+0x2a>
 800a5e2:	883b      	ldrh	r3, [r7, #0]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d006      	beq.n	800a5f6 <pbuf_alloc_reference+0x2a>
 800a5e8:	4b0f      	ldr	r3, [pc, #60]	; (800a628 <pbuf_alloc_reference+0x5c>)
 800a5ea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a5ee:	490f      	ldr	r1, [pc, #60]	; (800a62c <pbuf_alloc_reference+0x60>)
 800a5f0:	480f      	ldr	r0, [pc, #60]	; (800a630 <pbuf_alloc_reference+0x64>)
 800a5f2:	f009 fe51 	bl	8014298 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a5f6:	200b      	movs	r0, #11
 800a5f8:	f7ff fae4 	bl	8009bc4 <memp_malloc>
 800a5fc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a604:	2300      	movs	r3, #0
 800a606:	e00b      	b.n	800a620 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a608:	8879      	ldrh	r1, [r7, #2]
 800a60a:	887a      	ldrh	r2, [r7, #2]
 800a60c:	2300      	movs	r3, #0
 800a60e:	9301      	str	r3, [sp, #4]
 800a610:	883b      	ldrh	r3, [r7, #0]
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	460b      	mov	r3, r1
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7ff febb 	bl	800a394 <pbuf_init_alloced_pbuf>
  return p;
 800a61e:	68fb      	ldr	r3, [r7, #12]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	080163c8 	.word	0x080163c8
 800a62c:	080164cc 	.word	0x080164cc
 800a630:	08016428 	.word	0x08016428

0800a634 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b088      	sub	sp, #32
 800a638:	af02      	add	r7, sp, #8
 800a63a:	607b      	str	r3, [r7, #4]
 800a63c:	4603      	mov	r3, r0
 800a63e:	73fb      	strb	r3, [r7, #15]
 800a640:	460b      	mov	r3, r1
 800a642:	81bb      	strh	r3, [r7, #12]
 800a644:	4613      	mov	r3, r2
 800a646:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a64c:	8a7b      	ldrh	r3, [r7, #18]
 800a64e:	3303      	adds	r3, #3
 800a650:	f023 0203 	bic.w	r2, r3, #3
 800a654:	89bb      	ldrh	r3, [r7, #12]
 800a656:	441a      	add	r2, r3
 800a658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d901      	bls.n	800a662 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a65e:	2300      	movs	r3, #0
 800a660:	e018      	b.n	800a694 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d007      	beq.n	800a678 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a668:	8a7b      	ldrh	r3, [r7, #18]
 800a66a:	3303      	adds	r3, #3
 800a66c:	f023 0303 	bic.w	r3, r3, #3
 800a670:	6a3a      	ldr	r2, [r7, #32]
 800a672:	4413      	add	r3, r2
 800a674:	617b      	str	r3, [r7, #20]
 800a676:	e001      	b.n	800a67c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a678:	2300      	movs	r3, #0
 800a67a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	89b9      	ldrh	r1, [r7, #12]
 800a680:	89ba      	ldrh	r2, [r7, #12]
 800a682:	2302      	movs	r3, #2
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	897b      	ldrh	r3, [r7, #10]
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	460b      	mov	r3, r1
 800a68c:	6979      	ldr	r1, [r7, #20]
 800a68e:	f7ff fe81 	bl	800a394 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a692:	687b      	ldr	r3, [r7, #4]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <pbuf_realloc+0x20>
 800a6ae:	4b3a      	ldr	r3, [pc, #232]	; (800a798 <pbuf_realloc+0xfc>)
 800a6b0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a6b4:	4939      	ldr	r1, [pc, #228]	; (800a79c <pbuf_realloc+0x100>)
 800a6b6:	483a      	ldr	r0, [pc, #232]	; (800a7a0 <pbuf_realloc+0x104>)
 800a6b8:	f009 fdee 	bl	8014298 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	891b      	ldrh	r3, [r3, #8]
 800a6c0:	887a      	ldrh	r2, [r7, #2]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d264      	bcs.n	800a790 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	891a      	ldrh	r2, [r3, #8]
 800a6ca:	887b      	ldrh	r3, [r7, #2]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a6d0:	887b      	ldrh	r3, [r7, #2]
 800a6d2:	817b      	strh	r3, [r7, #10]
  q = p;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a6d8:	e018      	b.n	800a70c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	895b      	ldrh	r3, [r3, #10]
 800a6de:	897a      	ldrh	r2, [r7, #10]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	891a      	ldrh	r2, [r3, #8]
 800a6e8:	893b      	ldrh	r3, [r7, #8]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d106      	bne.n	800a70c <pbuf_realloc+0x70>
 800a6fe:	4b26      	ldr	r3, [pc, #152]	; (800a798 <pbuf_realloc+0xfc>)
 800a700:	f240 12af 	movw	r2, #431	; 0x1af
 800a704:	4927      	ldr	r1, [pc, #156]	; (800a7a4 <pbuf_realloc+0x108>)
 800a706:	4826      	ldr	r0, [pc, #152]	; (800a7a0 <pbuf_realloc+0x104>)
 800a708:	f009 fdc6 	bl	8014298 <iprintf>
  while (rem_len > q->len) {
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	895b      	ldrh	r3, [r3, #10]
 800a710:	897a      	ldrh	r2, [r7, #10]
 800a712:	429a      	cmp	r2, r3
 800a714:	d8e1      	bhi.n	800a6da <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	7b1b      	ldrb	r3, [r3, #12]
 800a71a:	f003 030f 	and.w	r3, r3, #15
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d122      	bne.n	800a768 <pbuf_realloc+0xcc>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	895b      	ldrh	r3, [r3, #10]
 800a726:	897a      	ldrh	r2, [r7, #10]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d01d      	beq.n	800a768 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	7b5b      	ldrb	r3, [r3, #13]
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d117      	bne.n	800a768 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	461a      	mov	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	b29a      	uxth	r2, r3
 800a744:	897b      	ldrh	r3, [r7, #10]
 800a746:	4413      	add	r3, r2
 800a748:	b29b      	uxth	r3, r3
 800a74a:	4619      	mov	r1, r3
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f7fe ffad 	bl	80096ac <mem_trim>
 800a752:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <pbuf_realloc+0xcc>
 800a75a:	4b0f      	ldr	r3, [pc, #60]	; (800a798 <pbuf_realloc+0xfc>)
 800a75c:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a760:	4911      	ldr	r1, [pc, #68]	; (800a7a8 <pbuf_realloc+0x10c>)
 800a762:	480f      	ldr	r0, [pc, #60]	; (800a7a0 <pbuf_realloc+0x104>)
 800a764:	f009 fd98 	bl	8014298 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	897a      	ldrh	r2, [r7, #10]
 800a76c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	895a      	ldrh	r2, [r3, #10]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d004      	beq.n	800a788 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 f910 	bl	800a9a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	e000      	b.n	800a792 <pbuf_realloc+0xf6>
    return;
 800a790:	bf00      	nop

}
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	080163c8 	.word	0x080163c8
 800a79c:	080164e0 	.word	0x080164e0
 800a7a0:	08016428 	.word	0x08016428
 800a7a4:	080164f8 	.word	0x080164f8
 800a7a8:	08016510 	.word	0x08016510

0800a7ac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d106      	bne.n	800a7ce <pbuf_add_header_impl+0x22>
 800a7c0:	4b2b      	ldr	r3, [pc, #172]	; (800a870 <pbuf_add_header_impl+0xc4>)
 800a7c2:	f240 12df 	movw	r2, #479	; 0x1df
 800a7c6:	492b      	ldr	r1, [pc, #172]	; (800a874 <pbuf_add_header_impl+0xc8>)
 800a7c8:	482b      	ldr	r0, [pc, #172]	; (800a878 <pbuf_add_header_impl+0xcc>)
 800a7ca:	f009 fd65 	bl	8014298 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <pbuf_add_header_impl+0x30>
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7da:	d301      	bcc.n	800a7e0 <pbuf_add_header_impl+0x34>
    return 1;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e043      	b.n	800a868 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <pbuf_add_header_impl+0x3e>
    return 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	e03e      	b.n	800a868 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	891a      	ldrh	r2, [r3, #8]
 800a7f2:	8a7b      	ldrh	r3, [r7, #18]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	8a7a      	ldrh	r2, [r7, #18]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d901      	bls.n	800a802 <pbuf_add_header_impl+0x56>
    return 1;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e032      	b.n	800a868 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	7b1b      	ldrb	r3, [r3, #12]
 800a806:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a808:	8a3b      	ldrh	r3, [r7, #16]
 800a80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00c      	beq.n	800a82c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	685a      	ldr	r2, [r3, #4]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	425b      	negs	r3, r3
 800a81a:	4413      	add	r3, r2
 800a81c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3310      	adds	r3, #16
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	429a      	cmp	r2, r3
 800a826:	d20d      	bcs.n	800a844 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a828:	2301      	movs	r3, #1
 800a82a:	e01d      	b.n	800a868 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d006      	beq.n	800a840 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	425b      	negs	r3, r3
 800a83a:	4413      	add	r3, r2
 800a83c:	617b      	str	r3, [r7, #20]
 800a83e:	e001      	b.n	800a844 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a840:	2301      	movs	r3, #1
 800a842:	e011      	b.n	800a868 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	895a      	ldrh	r2, [r3, #10]
 800a84e:	8a7b      	ldrh	r3, [r7, #18]
 800a850:	4413      	add	r3, r2
 800a852:	b29a      	uxth	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	891a      	ldrh	r2, [r3, #8]
 800a85c:	8a7b      	ldrh	r3, [r7, #18]
 800a85e:	4413      	add	r3, r2
 800a860:	b29a      	uxth	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	811a      	strh	r2, [r3, #8]


  return 0;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	080163c8 	.word	0x080163c8
 800a874:	0801652c 	.word	0x0801652c
 800a878:	08016428 	.word	0x08016428

0800a87c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a886:	2200      	movs	r2, #0
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7ff ff8e 	bl	800a7ac <pbuf_add_header_impl>
 800a890:	4603      	mov	r3, r0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
	...

0800a89c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <pbuf_remove_header+0x1e>
 800a8ac:	4b20      	ldr	r3, [pc, #128]	; (800a930 <pbuf_remove_header+0x94>)
 800a8ae:	f240 224b 	movw	r2, #587	; 0x24b
 800a8b2:	4920      	ldr	r1, [pc, #128]	; (800a934 <pbuf_remove_header+0x98>)
 800a8b4:	4820      	ldr	r0, [pc, #128]	; (800a938 <pbuf_remove_header+0x9c>)
 800a8b6:	f009 fcef 	bl	8014298 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d003      	beq.n	800a8c8 <pbuf_remove_header+0x2c>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8c6:	d301      	bcc.n	800a8cc <pbuf_remove_header+0x30>
    return 1;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e02c      	b.n	800a926 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <pbuf_remove_header+0x3a>
    return 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	e027      	b.n	800a926 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	895b      	ldrh	r3, [r3, #10]
 800a8de:	89fa      	ldrh	r2, [r7, #14]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d908      	bls.n	800a8f6 <pbuf_remove_header+0x5a>
 800a8e4:	4b12      	ldr	r3, [pc, #72]	; (800a930 <pbuf_remove_header+0x94>)
 800a8e6:	f240 2255 	movw	r2, #597	; 0x255
 800a8ea:	4914      	ldr	r1, [pc, #80]	; (800a93c <pbuf_remove_header+0xa0>)
 800a8ec:	4812      	ldr	r0, [pc, #72]	; (800a938 <pbuf_remove_header+0x9c>)
 800a8ee:	f009 fcd3 	bl	8014298 <iprintf>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e017      	b.n	800a926 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	441a      	add	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	895a      	ldrh	r2, [r3, #10]
 800a90c:	89fb      	ldrh	r3, [r7, #14]
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	b29a      	uxth	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	891a      	ldrh	r2, [r3, #8]
 800a91a:	89fb      	ldrh	r3, [r7, #14]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	b29a      	uxth	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	080163c8 	.word	0x080163c8
 800a934:	0801652c 	.word	0x0801652c
 800a938:	08016428 	.word	0x08016428
 800a93c:	08016538 	.word	0x08016538

0800a940 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	460b      	mov	r3, r1
 800a94a:	807b      	strh	r3, [r7, #2]
 800a94c:	4613      	mov	r3, r2
 800a94e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a950:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a954:	2b00      	cmp	r3, #0
 800a956:	da08      	bge.n	800a96a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a958:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a95c:	425b      	negs	r3, r3
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7ff ff9b 	bl	800a89c <pbuf_remove_header>
 800a966:	4603      	mov	r3, r0
 800a968:	e007      	b.n	800a97a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a96a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a96e:	787a      	ldrb	r2, [r7, #1]
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff ff1a 	bl	800a7ac <pbuf_add_header_impl>
 800a978:	4603      	mov	r3, r0
  }
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a98e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a992:	2201      	movs	r2, #1
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff ffd2 	bl	800a940 <pbuf_header_impl>
 800a99c:	4603      	mov	r3, r0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10b      	bne.n	800a9ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d106      	bne.n	800a9ca <pbuf_free+0x22>
 800a9bc:	4b3b      	ldr	r3, [pc, #236]	; (800aaac <pbuf_free+0x104>)
 800a9be:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a9c2:	493b      	ldr	r1, [pc, #236]	; (800aab0 <pbuf_free+0x108>)
 800a9c4:	483b      	ldr	r0, [pc, #236]	; (800aab4 <pbuf_free+0x10c>)
 800a9c6:	f009 fc67 	bl	8014298 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e069      	b.n	800aaa2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a9d2:	e062      	b.n	800aa9a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a9d4:	f009 fbfc 	bl	80141d0 <sys_arch_protect>
 800a9d8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	7b9b      	ldrb	r3, [r3, #14]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d106      	bne.n	800a9f0 <pbuf_free+0x48>
 800a9e2:	4b32      	ldr	r3, [pc, #200]	; (800aaac <pbuf_free+0x104>)
 800a9e4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a9e8:	4933      	ldr	r1, [pc, #204]	; (800aab8 <pbuf_free+0x110>)
 800a9ea:	4832      	ldr	r0, [pc, #200]	; (800aab4 <pbuf_free+0x10c>)
 800a9ec:	f009 fc54 	bl	8014298 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	7b9b      	ldrb	r3, [r3, #14]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	739a      	strb	r2, [r3, #14]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	7b9b      	ldrb	r3, [r3, #14]
 800aa00:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800aa02:	69b8      	ldr	r0, [r7, #24]
 800aa04:	f009 fbf2 	bl	80141ec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800aa08:	7dfb      	ldrb	r3, [r7, #23]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d143      	bne.n	800aa96 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	7b1b      	ldrb	r3, [r3, #12]
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	7b5b      	ldrb	r3, [r3, #13]
 800aa22:	f003 0302 	and.w	r3, r3, #2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d011      	beq.n	800aa4e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d106      	bne.n	800aa44 <pbuf_free+0x9c>
 800aa36:	4b1d      	ldr	r3, [pc, #116]	; (800aaac <pbuf_free+0x104>)
 800aa38:	f240 22ff 	movw	r2, #767	; 0x2ff
 800aa3c:	491f      	ldr	r1, [pc, #124]	; (800aabc <pbuf_free+0x114>)
 800aa3e:	481d      	ldr	r0, [pc, #116]	; (800aab4 <pbuf_free+0x10c>)
 800aa40:	f009 fc2a 	bl	8014298 <iprintf>
        pc->custom_free_function(p);
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	4798      	blx	r3
 800aa4c:	e01d      	b.n	800aa8a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d104      	bne.n	800aa5e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800aa54:	6879      	ldr	r1, [r7, #4]
 800aa56:	200c      	movs	r0, #12
 800aa58:	f7ff f906 	bl	8009c68 <memp_free>
 800aa5c:	e015      	b.n	800aa8a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d104      	bne.n	800aa6e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800aa64:	6879      	ldr	r1, [r7, #4]
 800aa66:	200b      	movs	r0, #11
 800aa68:	f7ff f8fe 	bl	8009c68 <memp_free>
 800aa6c:	e00d      	b.n	800aa8a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d103      	bne.n	800aa7c <pbuf_free+0xd4>
          mem_free(p);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7fe fd89 	bl	800958c <mem_free>
 800aa7a:	e006      	b.n	800aa8a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800aa7c:	4b0b      	ldr	r3, [pc, #44]	; (800aaac <pbuf_free+0x104>)
 800aa7e:	f240 320f 	movw	r2, #783	; 0x30f
 800aa82:	490f      	ldr	r1, [pc, #60]	; (800aac0 <pbuf_free+0x118>)
 800aa84:	480b      	ldr	r0, [pc, #44]	; (800aab4 <pbuf_free+0x10c>)
 800aa86:	f009 fc07 	bl	8014298 <iprintf>
        }
      }
      count++;
 800aa8a:	7ffb      	ldrb	r3, [r7, #31]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	607b      	str	r3, [r7, #4]
 800aa94:	e001      	b.n	800aa9a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800aa96:	2300      	movs	r3, #0
 800aa98:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d199      	bne.n	800a9d4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800aaa0:	7ffb      	ldrb	r3, [r7, #31]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3720      	adds	r7, #32
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	080163c8 	.word	0x080163c8
 800aab0:	0801652c 	.word	0x0801652c
 800aab4:	08016428 	.word	0x08016428
 800aab8:	08016558 	.word	0x08016558
 800aabc:	08016570 	.word	0x08016570
 800aac0:	08016594 	.word	0x08016594

0800aac4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800aad0:	e005      	b.n	800aade <pbuf_clen+0x1a>
    ++len;
 800aad2:	89fb      	ldrh	r3, [r7, #14]
 800aad4:	3301      	adds	r3, #1
 800aad6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1f6      	bne.n	800aad2 <pbuf_clen+0xe>
  }
  return len;
 800aae4:	89fb      	ldrh	r3, [r7, #14]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
	...

0800aaf4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d016      	beq.n	800ab30 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ab02:	f009 fb65 	bl	80141d0 <sys_arch_protect>
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	7b9b      	ldrb	r3, [r3, #14]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	739a      	strb	r2, [r3, #14]
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f009 fb69 	bl	80141ec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	7b9b      	ldrb	r3, [r3, #14]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <pbuf_ref+0x3c>
 800ab22:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <pbuf_ref+0x44>)
 800ab24:	f240 3242 	movw	r2, #834	; 0x342
 800ab28:	4904      	ldr	r1, [pc, #16]	; (800ab3c <pbuf_ref+0x48>)
 800ab2a:	4805      	ldr	r0, [pc, #20]	; (800ab40 <pbuf_ref+0x4c>)
 800ab2c:	f009 fbb4 	bl	8014298 <iprintf>
  }
}
 800ab30:	bf00      	nop
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	080163c8 	.word	0x080163c8
 800ab3c:	080165a8 	.word	0x080165a8
 800ab40:	08016428 	.word	0x08016428

0800ab44 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <pbuf_cat+0x16>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d107      	bne.n	800ab6a <pbuf_cat+0x26>
 800ab5a:	4b20      	ldr	r3, [pc, #128]	; (800abdc <pbuf_cat+0x98>)
 800ab5c:	f240 325a 	movw	r2, #858	; 0x35a
 800ab60:	491f      	ldr	r1, [pc, #124]	; (800abe0 <pbuf_cat+0x9c>)
 800ab62:	4820      	ldr	r0, [pc, #128]	; (800abe4 <pbuf_cat+0xa0>)
 800ab64:	f009 fb98 	bl	8014298 <iprintf>
 800ab68:	e034      	b.n	800abd4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	e00a      	b.n	800ab86 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	891a      	ldrh	r2, [r3, #8]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	891b      	ldrh	r3, [r3, #8]
 800ab78:	4413      	add	r3, r2
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	60fb      	str	r3, [r7, #12]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1f0      	bne.n	800ab70 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	891a      	ldrh	r2, [r3, #8]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	895b      	ldrh	r3, [r3, #10]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d006      	beq.n	800aba8 <pbuf_cat+0x64>
 800ab9a:	4b10      	ldr	r3, [pc, #64]	; (800abdc <pbuf_cat+0x98>)
 800ab9c:	f240 3262 	movw	r2, #866	; 0x362
 800aba0:	4911      	ldr	r1, [pc, #68]	; (800abe8 <pbuf_cat+0xa4>)
 800aba2:	4810      	ldr	r0, [pc, #64]	; (800abe4 <pbuf_cat+0xa0>)
 800aba4:	f009 fb78 	bl	8014298 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d006      	beq.n	800abbe <pbuf_cat+0x7a>
 800abb0:	4b0a      	ldr	r3, [pc, #40]	; (800abdc <pbuf_cat+0x98>)
 800abb2:	f240 3263 	movw	r2, #867	; 0x363
 800abb6:	490d      	ldr	r1, [pc, #52]	; (800abec <pbuf_cat+0xa8>)
 800abb8:	480a      	ldr	r0, [pc, #40]	; (800abe4 <pbuf_cat+0xa0>)
 800abba:	f009 fb6d 	bl	8014298 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	891a      	ldrh	r2, [r3, #8]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	891b      	ldrh	r3, [r3, #8]
 800abc6:	4413      	add	r3, r2
 800abc8:	b29a      	uxth	r2, r3
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	080163c8 	.word	0x080163c8
 800abe0:	080165bc 	.word	0x080165bc
 800abe4:	08016428 	.word	0x08016428
 800abe8:	080165f4 	.word	0x080165f4
 800abec:	08016624 	.word	0x08016624

0800abf0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800abfa:	2300      	movs	r3, #0
 800abfc:	617b      	str	r3, [r7, #20]
 800abfe:	2300      	movs	r3, #0
 800ac00:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d008      	beq.n	800ac1a <pbuf_copy+0x2a>
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d005      	beq.n	800ac1a <pbuf_copy+0x2a>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	891a      	ldrh	r2, [r3, #8]
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	891b      	ldrh	r3, [r3, #8]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d209      	bcs.n	800ac2e <pbuf_copy+0x3e>
 800ac1a:	4b57      	ldr	r3, [pc, #348]	; (800ad78 <pbuf_copy+0x188>)
 800ac1c:	f240 32ca 	movw	r2, #970	; 0x3ca
 800ac20:	4956      	ldr	r1, [pc, #344]	; (800ad7c <pbuf_copy+0x18c>)
 800ac22:	4857      	ldr	r0, [pc, #348]	; (800ad80 <pbuf_copy+0x190>)
 800ac24:	f009 fb38 	bl	8014298 <iprintf>
 800ac28:	f06f 030f 	mvn.w	r3, #15
 800ac2c:	e09f      	b.n	800ad6e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	895b      	ldrh	r3, [r3, #10]
 800ac32:	461a      	mov	r2, r3
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	1ad2      	subs	r2, r2, r3
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	895b      	ldrh	r3, [r3, #10]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	1acb      	subs	r3, r1, r3
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d306      	bcc.n	800ac54 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	895b      	ldrh	r3, [r3, #10]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	60fb      	str	r3, [r7, #12]
 800ac52:	e005      	b.n	800ac60 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	895b      	ldrh	r3, [r3, #10]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	18d0      	adds	r0, r2, r3
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	4413      	add	r3, r2
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	4619      	mov	r1, r3
 800ac74:	f009 fafd 	bl	8014272 <memcpy>
    offset_to += len;
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	4413      	add	r3, r2
 800ac86:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	895b      	ldrh	r3, [r3, #10]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d906      	bls.n	800aca2 <pbuf_copy+0xb2>
 800ac94:	4b38      	ldr	r3, [pc, #224]	; (800ad78 <pbuf_copy+0x188>)
 800ac96:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ac9a:	493a      	ldr	r1, [pc, #232]	; (800ad84 <pbuf_copy+0x194>)
 800ac9c:	4838      	ldr	r0, [pc, #224]	; (800ad80 <pbuf_copy+0x190>)
 800ac9e:	f009 fafb 	bl	8014298 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	895b      	ldrh	r3, [r3, #10]
 800aca6:	461a      	mov	r2, r3
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	4293      	cmp	r3, r2
 800acac:	d906      	bls.n	800acbc <pbuf_copy+0xcc>
 800acae:	4b32      	ldr	r3, [pc, #200]	; (800ad78 <pbuf_copy+0x188>)
 800acb0:	f240 32da 	movw	r2, #986	; 0x3da
 800acb4:	4934      	ldr	r1, [pc, #208]	; (800ad88 <pbuf_copy+0x198>)
 800acb6:	4832      	ldr	r0, [pc, #200]	; (800ad80 <pbuf_copy+0x190>)
 800acb8:	f009 faee 	bl	8014298 <iprintf>
    if (offset_from >= p_from->len) {
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	895b      	ldrh	r3, [r3, #10]
 800acc0:	461a      	mov	r2, r3
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d304      	bcc.n	800acd2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800acc8:	2300      	movs	r3, #0
 800acca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	895b      	ldrh	r3, [r3, #10]
 800acd6:	461a      	mov	r2, r3
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	4293      	cmp	r3, r2
 800acdc:	d114      	bne.n	800ad08 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10c      	bne.n	800ad08 <pbuf_copy+0x118>
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d009      	beq.n	800ad08 <pbuf_copy+0x118>
 800acf4:	4b20      	ldr	r3, [pc, #128]	; (800ad78 <pbuf_copy+0x188>)
 800acf6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800acfa:	4924      	ldr	r1, [pc, #144]	; (800ad8c <pbuf_copy+0x19c>)
 800acfc:	4820      	ldr	r0, [pc, #128]	; (800ad80 <pbuf_copy+0x190>)
 800acfe:	f009 facb 	bl	8014298 <iprintf>
 800ad02:	f06f 030f 	mvn.w	r3, #15
 800ad06:	e032      	b.n	800ad6e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d013      	beq.n	800ad36 <pbuf_copy+0x146>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	895a      	ldrh	r2, [r3, #10]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	891b      	ldrh	r3, [r3, #8]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d10d      	bne.n	800ad36 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d009      	beq.n	800ad36 <pbuf_copy+0x146>
 800ad22:	4b15      	ldr	r3, [pc, #84]	; (800ad78 <pbuf_copy+0x188>)
 800ad24:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800ad28:	4919      	ldr	r1, [pc, #100]	; (800ad90 <pbuf_copy+0x1a0>)
 800ad2a:	4815      	ldr	r0, [pc, #84]	; (800ad80 <pbuf_copy+0x190>)
 800ad2c:	f009 fab4 	bl	8014298 <iprintf>
 800ad30:	f06f 0305 	mvn.w	r3, #5
 800ad34:	e01b      	b.n	800ad6e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d013      	beq.n	800ad64 <pbuf_copy+0x174>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	895a      	ldrh	r2, [r3, #10]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	891b      	ldrh	r3, [r3, #8]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d10d      	bne.n	800ad64 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d009      	beq.n	800ad64 <pbuf_copy+0x174>
 800ad50:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <pbuf_copy+0x188>)
 800ad52:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800ad56:	490e      	ldr	r1, [pc, #56]	; (800ad90 <pbuf_copy+0x1a0>)
 800ad58:	4809      	ldr	r0, [pc, #36]	; (800ad80 <pbuf_copy+0x190>)
 800ad5a:	f009 fa9d 	bl	8014298 <iprintf>
 800ad5e:	f06f 0305 	mvn.w	r3, #5
 800ad62:	e004      	b.n	800ad6e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f47f af61 	bne.w	800ac2e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	080163c8 	.word	0x080163c8
 800ad7c:	08016670 	.word	0x08016670
 800ad80:	08016428 	.word	0x08016428
 800ad84:	080166a0 	.word	0x080166a0
 800ad88:	080166b8 	.word	0x080166b8
 800ad8c:	080166d4 	.word	0x080166d4
 800ad90:	080166e4 	.word	0x080166e4

0800ad94 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	4611      	mov	r1, r2
 800ada0:	461a      	mov	r2, r3
 800ada2:	460b      	mov	r3, r1
 800ada4:	80fb      	strh	r3, [r7, #6]
 800ada6:	4613      	mov	r3, r2
 800ada8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d108      	bne.n	800adca <pbuf_copy_partial+0x36>
 800adb8:	4b2b      	ldr	r3, [pc, #172]	; (800ae68 <pbuf_copy_partial+0xd4>)
 800adba:	f240 420a 	movw	r2, #1034	; 0x40a
 800adbe:	492b      	ldr	r1, [pc, #172]	; (800ae6c <pbuf_copy_partial+0xd8>)
 800adc0:	482b      	ldr	r0, [pc, #172]	; (800ae70 <pbuf_copy_partial+0xdc>)
 800adc2:	f009 fa69 	bl	8014298 <iprintf>
 800adc6:	2300      	movs	r3, #0
 800adc8:	e04a      	b.n	800ae60 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d108      	bne.n	800ade2 <pbuf_copy_partial+0x4e>
 800add0:	4b25      	ldr	r3, [pc, #148]	; (800ae68 <pbuf_copy_partial+0xd4>)
 800add2:	f240 420b 	movw	r2, #1035	; 0x40b
 800add6:	4927      	ldr	r1, [pc, #156]	; (800ae74 <pbuf_copy_partial+0xe0>)
 800add8:	4825      	ldr	r0, [pc, #148]	; (800ae70 <pbuf_copy_partial+0xdc>)
 800adda:	f009 fa5d 	bl	8014298 <iprintf>
 800adde:	2300      	movs	r3, #0
 800ade0:	e03e      	b.n	800ae60 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	61fb      	str	r3, [r7, #28]
 800ade6:	e034      	b.n	800ae52 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ade8:	88bb      	ldrh	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00a      	beq.n	800ae04 <pbuf_copy_partial+0x70>
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	895b      	ldrh	r3, [r3, #10]
 800adf2:	88ba      	ldrh	r2, [r7, #4]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d305      	bcc.n	800ae04 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	895b      	ldrh	r3, [r3, #10]
 800adfc:	88ba      	ldrh	r2, [r7, #4]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	80bb      	strh	r3, [r7, #4]
 800ae02:	e023      	b.n	800ae4c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	895a      	ldrh	r2, [r3, #10]
 800ae08:	88bb      	ldrh	r3, [r7, #4]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ae0e:	8b3a      	ldrh	r2, [r7, #24]
 800ae10:	88fb      	ldrh	r3, [r7, #6]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d901      	bls.n	800ae1a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ae16:	88fb      	ldrh	r3, [r7, #6]
 800ae18:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ae1a:	8b7b      	ldrh	r3, [r7, #26]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	18d0      	adds	r0, r2, r3
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	88bb      	ldrh	r3, [r7, #4]
 800ae26:	4413      	add	r3, r2
 800ae28:	8b3a      	ldrh	r2, [r7, #24]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	f009 fa21 	bl	8014272 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ae30:	8afa      	ldrh	r2, [r7, #22]
 800ae32:	8b3b      	ldrh	r3, [r7, #24]
 800ae34:	4413      	add	r3, r2
 800ae36:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ae38:	8b7a      	ldrh	r2, [r7, #26]
 800ae3a:	8b3b      	ldrh	r3, [r7, #24]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ae40:	88fa      	ldrh	r2, [r7, #6]
 800ae42:	8b3b      	ldrh	r3, [r7, #24]
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	61fb      	str	r3, [r7, #28]
 800ae52:	88fb      	ldrh	r3, [r7, #6]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d002      	beq.n	800ae5e <pbuf_copy_partial+0xca>
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1c4      	bne.n	800ade8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ae5e:	8afb      	ldrh	r3, [r7, #22]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3720      	adds	r7, #32
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	080163c8 	.word	0x080163c8
 800ae6c:	08016710 	.word	0x08016710
 800ae70:	08016428 	.word	0x08016428
 800ae74:	08016730 	.word	0x08016730

0800ae78 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	603a      	str	r2, [r7, #0]
 800ae82:	71fb      	strb	r3, [r7, #7]
 800ae84:	460b      	mov	r3, r1
 800ae86:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	8919      	ldrh	r1, [r3, #8]
 800ae8c:	88ba      	ldrh	r2, [r7, #4]
 800ae8e:	79fb      	ldrb	r3, [r7, #7]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff faa9 	bl	800a3e8 <pbuf_alloc>
 800ae96:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <pbuf_clone+0x2a>
    return NULL;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e011      	b.n	800aec6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f7ff fea3 	bl	800abf0 <pbuf_copy>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800aeae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d006      	beq.n	800aec4 <pbuf_clone+0x4c>
 800aeb6:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <pbuf_clone+0x58>)
 800aeb8:	f240 5224 	movw	r2, #1316	; 0x524
 800aebc:	4905      	ldr	r1, [pc, #20]	; (800aed4 <pbuf_clone+0x5c>)
 800aebe:	4806      	ldr	r0, [pc, #24]	; (800aed8 <pbuf_clone+0x60>)
 800aec0:	f009 f9ea 	bl	8014298 <iprintf>
  return q;
 800aec4:	68fb      	ldr	r3, [r7, #12]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	080163c8 	.word	0x080163c8
 800aed4:	0801683c 	.word	0x0801683c
 800aed8:	08016428 	.word	0x08016428

0800aedc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800aee0:	f009 fa56 	bl	8014390 <rand>
 800aee4:	4603      	mov	r3, r0
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	4b01      	ldr	r3, [pc, #4]	; (800aefc <tcp_init+0x20>)
 800aef6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800aef8:	bf00      	nop
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20000010 	.word	0x20000010

0800af00 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	7d1b      	ldrb	r3, [r3, #20]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d105      	bne.n	800af1c <tcp_free+0x1c>
 800af10:	4b06      	ldr	r3, [pc, #24]	; (800af2c <tcp_free+0x2c>)
 800af12:	22d4      	movs	r2, #212	; 0xd4
 800af14:	4906      	ldr	r1, [pc, #24]	; (800af30 <tcp_free+0x30>)
 800af16:	4807      	ldr	r0, [pc, #28]	; (800af34 <tcp_free+0x34>)
 800af18:	f009 f9be 	bl	8014298 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800af1c:	6879      	ldr	r1, [r7, #4]
 800af1e:	2001      	movs	r0, #1
 800af20:	f7fe fea2 	bl	8009c68 <memp_free>
}
 800af24:	bf00      	nop
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	080168c8 	.word	0x080168c8
 800af30:	080168f8 	.word	0x080168f8
 800af34:	0801690c 	.word	0x0801690c

0800af38 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7d1b      	ldrb	r3, [r3, #20]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d105      	bne.n	800af54 <tcp_free_listen+0x1c>
 800af48:	4b06      	ldr	r3, [pc, #24]	; (800af64 <tcp_free_listen+0x2c>)
 800af4a:	22df      	movs	r2, #223	; 0xdf
 800af4c:	4906      	ldr	r1, [pc, #24]	; (800af68 <tcp_free_listen+0x30>)
 800af4e:	4807      	ldr	r0, [pc, #28]	; (800af6c <tcp_free_listen+0x34>)
 800af50:	f009 f9a2 	bl	8014298 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	2002      	movs	r0, #2
 800af58:	f7fe fe86 	bl	8009c68 <memp_free>
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	080168c8 	.word	0x080168c8
 800af68:	08016934 	.word	0x08016934
 800af6c:	0801690c 	.word	0x0801690c

0800af70 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800af74:	f001 f89a 	bl	800c0ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800af78:	4b07      	ldr	r3, [pc, #28]	; (800af98 <tcp_tmr+0x28>)
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	3301      	adds	r3, #1
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	4b05      	ldr	r3, [pc, #20]	; (800af98 <tcp_tmr+0x28>)
 800af82:	701a      	strb	r2, [r3, #0]
 800af84:	4b04      	ldr	r3, [pc, #16]	; (800af98 <tcp_tmr+0x28>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800af90:	f000 fd4e 	bl	800ba30 <tcp_slowtmr>
  }
}
 800af94:	bf00      	nop
 800af96:	bd80      	pop	{r7, pc}
 800af98:	20004299 	.word	0x20004299

0800af9c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d105      	bne.n	800afb8 <tcp_remove_listener+0x1c>
 800afac:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <tcp_remove_listener+0x48>)
 800afae:	22ff      	movs	r2, #255	; 0xff
 800afb0:	490d      	ldr	r1, [pc, #52]	; (800afe8 <tcp_remove_listener+0x4c>)
 800afb2:	480e      	ldr	r0, [pc, #56]	; (800afec <tcp_remove_listener+0x50>)
 800afb4:	f009 f970 	bl	8014298 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	e00a      	b.n	800afd4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d102      	bne.n	800afce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1f1      	bne.n	800afbe <tcp_remove_listener+0x22>
    }
  }
}
 800afda:	bf00      	nop
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	080168c8 	.word	0x080168c8
 800afe8:	08016950 	.word	0x08016950
 800afec:	0801690c 	.word	0x0801690c

0800aff0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d106      	bne.n	800b00c <tcp_listen_closed+0x1c>
 800affe:	4b14      	ldr	r3, [pc, #80]	; (800b050 <tcp_listen_closed+0x60>)
 800b000:	f240 1211 	movw	r2, #273	; 0x111
 800b004:	4913      	ldr	r1, [pc, #76]	; (800b054 <tcp_listen_closed+0x64>)
 800b006:	4814      	ldr	r0, [pc, #80]	; (800b058 <tcp_listen_closed+0x68>)
 800b008:	f009 f946 	bl	8014298 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	7d1b      	ldrb	r3, [r3, #20]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d006      	beq.n	800b022 <tcp_listen_closed+0x32>
 800b014:	4b0e      	ldr	r3, [pc, #56]	; (800b050 <tcp_listen_closed+0x60>)
 800b016:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b01a:	4910      	ldr	r1, [pc, #64]	; (800b05c <tcp_listen_closed+0x6c>)
 800b01c:	480e      	ldr	r0, [pc, #56]	; (800b058 <tcp_listen_closed+0x68>)
 800b01e:	f009 f93b 	bl	8014298 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b022:	2301      	movs	r3, #1
 800b024:	60fb      	str	r3, [r7, #12]
 800b026:	e00b      	b.n	800b040 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b028:	4a0d      	ldr	r2, [pc, #52]	; (800b060 <tcp_listen_closed+0x70>)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff ffb1 	bl	800af9c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	3301      	adds	r3, #1
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2b03      	cmp	r3, #3
 800b044:	d9f0      	bls.n	800b028 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b046:	bf00      	nop
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	080168c8 	.word	0x080168c8
 800b054:	08016978 	.word	0x08016978
 800b058:	0801690c 	.word	0x0801690c
 800b05c:	08016984 	.word	0x08016984
 800b060:	080188e0 	.word	0x080188e0

0800b064 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b064:	b5b0      	push	{r4, r5, r7, lr}
 800b066:	b088      	sub	sp, #32
 800b068:	af04      	add	r7, sp, #16
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d106      	bne.n	800b084 <tcp_close_shutdown+0x20>
 800b076:	4b61      	ldr	r3, [pc, #388]	; (800b1fc <tcp_close_shutdown+0x198>)
 800b078:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b07c:	4960      	ldr	r1, [pc, #384]	; (800b200 <tcp_close_shutdown+0x19c>)
 800b07e:	4861      	ldr	r0, [pc, #388]	; (800b204 <tcp_close_shutdown+0x1a0>)
 800b080:	f009 f90a 	bl	8014298 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b084:	78fb      	ldrb	r3, [r7, #3]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d066      	beq.n	800b158 <tcp_close_shutdown+0xf4>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	7d1b      	ldrb	r3, [r3, #20]
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d003      	beq.n	800b09a <tcp_close_shutdown+0x36>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	7d1b      	ldrb	r3, [r3, #20]
 800b096:	2b07      	cmp	r3, #7
 800b098:	d15e      	bne.n	800b158 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d104      	bne.n	800b0ac <tcp_close_shutdown+0x48>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b0aa:	d055      	beq.n	800b158 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	8b5b      	ldrh	r3, [r3, #26]
 800b0b0:	f003 0310 	and.w	r3, r3, #16
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d106      	bne.n	800b0c6 <tcp_close_shutdown+0x62>
 800b0b8:	4b50      	ldr	r3, [pc, #320]	; (800b1fc <tcp_close_shutdown+0x198>)
 800b0ba:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b0be:	4952      	ldr	r1, [pc, #328]	; (800b208 <tcp_close_shutdown+0x1a4>)
 800b0c0:	4850      	ldr	r0, [pc, #320]	; (800b204 <tcp_close_shutdown+0x1a0>)
 800b0c2:	f009 f8e9 	bl	8014298 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b0ce:	687d      	ldr	r5, [r7, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	8ad2      	ldrh	r2, [r2, #22]
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	8b09      	ldrh	r1, [r1, #24]
 800b0dc:	9102      	str	r1, [sp, #8]
 800b0de:	9201      	str	r2, [sp, #4]
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	462b      	mov	r3, r5
 800b0e4:	4622      	mov	r2, r4
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f005 fdb9 	bl	8010c60 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f001 fb8a 	bl	800c808 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b0f4:	4b45      	ldr	r3, [pc, #276]	; (800b20c <tcp_close_shutdown+0x1a8>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d105      	bne.n	800b10a <tcp_close_shutdown+0xa6>
 800b0fe:	4b43      	ldr	r3, [pc, #268]	; (800b20c <tcp_close_shutdown+0x1a8>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	4a41      	ldr	r2, [pc, #260]	; (800b20c <tcp_close_shutdown+0x1a8>)
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	e013      	b.n	800b132 <tcp_close_shutdown+0xce>
 800b10a:	4b40      	ldr	r3, [pc, #256]	; (800b20c <tcp_close_shutdown+0x1a8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	e00c      	b.n	800b12c <tcp_close_shutdown+0xc8>
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d104      	bne.n	800b126 <tcp_close_shutdown+0xc2>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68da      	ldr	r2, [r3, #12]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	60da      	str	r2, [r3, #12]
 800b124:	e005      	b.n	800b132 <tcp_close_shutdown+0xce>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1ef      	bne.n	800b112 <tcp_close_shutdown+0xae>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	60da      	str	r2, [r3, #12]
 800b138:	4b35      	ldr	r3, [pc, #212]	; (800b210 <tcp_close_shutdown+0x1ac>)
 800b13a:	2201      	movs	r2, #1
 800b13c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b13e:	4b35      	ldr	r3, [pc, #212]	; (800b214 <tcp_close_shutdown+0x1b0>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d102      	bne.n	800b14e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b148:	f004 f81c 	bl	800f184 <tcp_trigger_input_pcb_close>
 800b14c:	e002      	b.n	800b154 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7ff fed6 	bl	800af00 <tcp_free>
      }
      return ERR_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	e04d      	b.n	800b1f4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	7d1b      	ldrb	r3, [r3, #20]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d02d      	beq.n	800b1bc <tcp_close_shutdown+0x158>
 800b160:	2b02      	cmp	r3, #2
 800b162:	d036      	beq.n	800b1d2 <tcp_close_shutdown+0x16e>
 800b164:	2b00      	cmp	r3, #0
 800b166:	d13f      	bne.n	800b1e8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	8adb      	ldrh	r3, [r3, #22]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d021      	beq.n	800b1b4 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b170:	4b29      	ldr	r3, [pc, #164]	; (800b218 <tcp_close_shutdown+0x1b4>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	429a      	cmp	r2, r3
 800b178:	d105      	bne.n	800b186 <tcp_close_shutdown+0x122>
 800b17a:	4b27      	ldr	r3, [pc, #156]	; (800b218 <tcp_close_shutdown+0x1b4>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	4a25      	ldr	r2, [pc, #148]	; (800b218 <tcp_close_shutdown+0x1b4>)
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	e013      	b.n	800b1ae <tcp_close_shutdown+0x14a>
 800b186:	4b24      	ldr	r3, [pc, #144]	; (800b218 <tcp_close_shutdown+0x1b4>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	60bb      	str	r3, [r7, #8]
 800b18c:	e00c      	b.n	800b1a8 <tcp_close_shutdown+0x144>
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	429a      	cmp	r2, r3
 800b196:	d104      	bne.n	800b1a2 <tcp_close_shutdown+0x13e>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68da      	ldr	r2, [r3, #12]
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	60da      	str	r2, [r3, #12]
 800b1a0:	e005      	b.n	800b1ae <tcp_close_shutdown+0x14a>
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	60bb      	str	r3, [r7, #8]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1ef      	bne.n	800b18e <tcp_close_shutdown+0x12a>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7ff fea3 	bl	800af00 <tcp_free>
      break;
 800b1ba:	e01a      	b.n	800b1f2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f7ff ff17 	bl	800aff0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	4815      	ldr	r0, [pc, #84]	; (800b21c <tcp_close_shutdown+0x1b8>)
 800b1c6:	f001 fb6f 	bl	800c8a8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f7ff feb4 	bl	800af38 <tcp_free_listen>
      break;
 800b1d0:	e00f      	b.n	800b1f2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b1d2:	6879      	ldr	r1, [r7, #4]
 800b1d4:	480d      	ldr	r0, [pc, #52]	; (800b20c <tcp_close_shutdown+0x1a8>)
 800b1d6:	f001 fb67 	bl	800c8a8 <tcp_pcb_remove>
 800b1da:	4b0d      	ldr	r3, [pc, #52]	; (800b210 <tcp_close_shutdown+0x1ac>)
 800b1dc:	2201      	movs	r2, #1
 800b1de:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff fe8d 	bl	800af00 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b1e6:	e004      	b.n	800b1f2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f819 	bl	800b220 <tcp_close_shutdown_fin>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	e000      	b.n	800b1f4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bdb0      	pop	{r4, r5, r7, pc}
 800b1fc:	080168c8 	.word	0x080168c8
 800b200:	0801699c 	.word	0x0801699c
 800b204:	0801690c 	.word	0x0801690c
 800b208:	080169bc 	.word	0x080169bc
 800b20c:	2000acbc 	.word	0x2000acbc
 800b210:	2000acb8 	.word	0x2000acb8
 800b214:	2000acd0 	.word	0x2000acd0
 800b218:	2000acc8 	.word	0x2000acc8
 800b21c:	2000acc4 	.word	0x2000acc4

0800b220 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d106      	bne.n	800b23c <tcp_close_shutdown_fin+0x1c>
 800b22e:	4b2c      	ldr	r3, [pc, #176]	; (800b2e0 <tcp_close_shutdown_fin+0xc0>)
 800b230:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b234:	492b      	ldr	r1, [pc, #172]	; (800b2e4 <tcp_close_shutdown_fin+0xc4>)
 800b236:	482c      	ldr	r0, [pc, #176]	; (800b2e8 <tcp_close_shutdown_fin+0xc8>)
 800b238:	f009 f82e 	bl	8014298 <iprintf>

  switch (pcb->state) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	7d1b      	ldrb	r3, [r3, #20]
 800b240:	2b04      	cmp	r3, #4
 800b242:	d010      	beq.n	800b266 <tcp_close_shutdown_fin+0x46>
 800b244:	2b07      	cmp	r3, #7
 800b246:	d01b      	beq.n	800b280 <tcp_close_shutdown_fin+0x60>
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d126      	bne.n	800b29a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f004 fe05 	bl	800fe5c <tcp_send_fin>
 800b252:	4603      	mov	r3, r0
 800b254:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d11f      	bne.n	800b29e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2205      	movs	r2, #5
 800b262:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b264:	e01b      	b.n	800b29e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f004 fdf8 	bl	800fe5c <tcp_send_fin>
 800b26c:	4603      	mov	r3, r0
 800b26e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d114      	bne.n	800b2a2 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2205      	movs	r2, #5
 800b27c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b27e:	e010      	b.n	800b2a2 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f004 fdeb 	bl	800fe5c <tcp_send_fin>
 800b286:	4603      	mov	r3, r0
 800b288:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b28a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d109      	bne.n	800b2a6 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2209      	movs	r2, #9
 800b296:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b298:	e005      	b.n	800b2a6 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	e01c      	b.n	800b2d8 <tcp_close_shutdown_fin+0xb8>
      break;
 800b29e:	bf00      	nop
 800b2a0:	e002      	b.n	800b2a8 <tcp_close_shutdown_fin+0x88>
      break;
 800b2a2:	bf00      	nop
 800b2a4:	e000      	b.n	800b2a8 <tcp_close_shutdown_fin+0x88>
      break;
 800b2a6:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b2a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d103      	bne.n	800b2b8 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f004 ff11 	bl	80100d8 <tcp_output>
 800b2b6:	e00d      	b.n	800b2d4 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800b2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c0:	d108      	bne.n	800b2d4 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	8b5b      	ldrh	r3, [r3, #26]
 800b2c6:	f043 0308 	orr.w	r3, r3, #8
 800b2ca:	b29a      	uxth	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	e001      	b.n	800b2d8 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800b2d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	080168c8 	.word	0x080168c8
 800b2e4:	08016978 	.word	0x08016978
 800b2e8:	0801690c 	.word	0x0801690c

0800b2ec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d109      	bne.n	800b30e <tcp_close+0x22>
 800b2fa:	4b0f      	ldr	r3, [pc, #60]	; (800b338 <tcp_close+0x4c>)
 800b2fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b300:	490e      	ldr	r1, [pc, #56]	; (800b33c <tcp_close+0x50>)
 800b302:	480f      	ldr	r0, [pc, #60]	; (800b340 <tcp_close+0x54>)
 800b304:	f008 ffc8 	bl	8014298 <iprintf>
 800b308:	f06f 030f 	mvn.w	r3, #15
 800b30c:	e00f      	b.n	800b32e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	7d1b      	ldrb	r3, [r3, #20]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d006      	beq.n	800b324 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	8b5b      	ldrh	r3, [r3, #26]
 800b31a:	f043 0310 	orr.w	r3, r3, #16
 800b31e:	b29a      	uxth	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b324:	2101      	movs	r1, #1
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7ff fe9c 	bl	800b064 <tcp_close_shutdown>
 800b32c:	4603      	mov	r3, r0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	080168c8 	.word	0x080168c8
 800b33c:	080169d8 	.word	0x080169d8
 800b340:	0801690c 	.word	0x0801690c

0800b344 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d109      	bne.n	800b36a <tcp_shutdown+0x26>
 800b356:	4b25      	ldr	r3, [pc, #148]	; (800b3ec <tcp_shutdown+0xa8>)
 800b358:	f240 2207 	movw	r2, #519	; 0x207
 800b35c:	4924      	ldr	r1, [pc, #144]	; (800b3f0 <tcp_shutdown+0xac>)
 800b35e:	4825      	ldr	r0, [pc, #148]	; (800b3f4 <tcp_shutdown+0xb0>)
 800b360:	f008 ff9a 	bl	8014298 <iprintf>
 800b364:	f06f 030f 	mvn.w	r3, #15
 800b368:	e03c      	b.n	800b3e4 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	7d1b      	ldrb	r3, [r3, #20]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d102      	bne.n	800b378 <tcp_shutdown+0x34>
    return ERR_CONN;
 800b372:	f06f 030a 	mvn.w	r3, #10
 800b376:	e035      	b.n	800b3e4 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d01b      	beq.n	800b3b6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	8b5b      	ldrh	r3, [r3, #26]
 800b382:	f043 0310 	orr.w	r3, r3, #16
 800b386:	b29a      	uxth	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d005      	beq.n	800b39e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800b392:	2101      	movs	r1, #1
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f7ff fe65 	bl	800b064 <tcp_close_shutdown>
 800b39a:	4603      	mov	r3, r0
 800b39c:	e022      	b.n	800b3e4 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d007      	beq.n	800b3b6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff fafc 	bl	800a9a8 <pbuf_free>
      pcb->refused_data = NULL;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d012      	beq.n	800b3e2 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	7d1b      	ldrb	r3, [r3, #20]
 800b3c0:	2b03      	cmp	r3, #3
 800b3c2:	db0b      	blt.n	800b3dc <tcp_shutdown+0x98>
 800b3c4:	2b04      	cmp	r3, #4
 800b3c6:	dd01      	ble.n	800b3cc <tcp_shutdown+0x88>
 800b3c8:	2b07      	cmp	r3, #7
 800b3ca:	d107      	bne.n	800b3dc <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f7ff fe46 	bl	800b064 <tcp_close_shutdown>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	e003      	b.n	800b3e4 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800b3dc:	f06f 030a 	mvn.w	r3, #10
 800b3e0:	e000      	b.n	800b3e4 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	080168c8 	.word	0x080168c8
 800b3f0:	080169f0 	.word	0x080169f0
 800b3f4:	0801690c 	.word	0x0801690c

0800b3f8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b08e      	sub	sp, #56	; 0x38
 800b3fc:	af04      	add	r7, sp, #16
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d107      	bne.n	800b418 <tcp_abandon+0x20>
 800b408:	4b52      	ldr	r3, [pc, #328]	; (800b554 <tcp_abandon+0x15c>)
 800b40a:	f240 223d 	movw	r2, #573	; 0x23d
 800b40e:	4952      	ldr	r1, [pc, #328]	; (800b558 <tcp_abandon+0x160>)
 800b410:	4852      	ldr	r0, [pc, #328]	; (800b55c <tcp_abandon+0x164>)
 800b412:	f008 ff41 	bl	8014298 <iprintf>
 800b416:	e099      	b.n	800b54c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7d1b      	ldrb	r3, [r3, #20]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d106      	bne.n	800b42e <tcp_abandon+0x36>
 800b420:	4b4c      	ldr	r3, [pc, #304]	; (800b554 <tcp_abandon+0x15c>)
 800b422:	f240 2241 	movw	r2, #577	; 0x241
 800b426:	494e      	ldr	r1, [pc, #312]	; (800b560 <tcp_abandon+0x168>)
 800b428:	484c      	ldr	r0, [pc, #304]	; (800b55c <tcp_abandon+0x164>)
 800b42a:	f008 ff35 	bl	8014298 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	7d1b      	ldrb	r3, [r3, #20]
 800b432:	2b0a      	cmp	r3, #10
 800b434:	d107      	bne.n	800b446 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	484a      	ldr	r0, [pc, #296]	; (800b564 <tcp_abandon+0x16c>)
 800b43a:	f001 fa35 	bl	800c8a8 <tcp_pcb_remove>
    tcp_free(pcb);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7ff fd5e 	bl	800af00 <tcp_free>
 800b444:	e082      	b.n	800b54c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b446:	2300      	movs	r3, #0
 800b448:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b452:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b458:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b460:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	7d1b      	ldrb	r3, [r3, #20]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d126      	bne.n	800b4be <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	8adb      	ldrh	r3, [r3, #22]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d02e      	beq.n	800b4d6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b478:	4b3b      	ldr	r3, [pc, #236]	; (800b568 <tcp_abandon+0x170>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d105      	bne.n	800b48e <tcp_abandon+0x96>
 800b482:	4b39      	ldr	r3, [pc, #228]	; (800b568 <tcp_abandon+0x170>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	4a37      	ldr	r2, [pc, #220]	; (800b568 <tcp_abandon+0x170>)
 800b48a:	6013      	str	r3, [r2, #0]
 800b48c:	e013      	b.n	800b4b6 <tcp_abandon+0xbe>
 800b48e:	4b36      	ldr	r3, [pc, #216]	; (800b568 <tcp_abandon+0x170>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	61fb      	str	r3, [r7, #28]
 800b494:	e00c      	b.n	800b4b0 <tcp_abandon+0xb8>
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d104      	bne.n	800b4aa <tcp_abandon+0xb2>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68da      	ldr	r2, [r3, #12]
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	60da      	str	r2, [r3, #12]
 800b4a8:	e005      	b.n	800b4b6 <tcp_abandon+0xbe>
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	61fb      	str	r3, [r7, #28]
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1ef      	bne.n	800b496 <tcp_abandon+0x9e>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	60da      	str	r2, [r3, #12]
 800b4bc:	e00b      	b.n	800b4d6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	8adb      	ldrh	r3, [r3, #22]
 800b4c6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	4828      	ldr	r0, [pc, #160]	; (800b56c <tcp_abandon+0x174>)
 800b4cc:	f001 f9ec 	bl	800c8a8 <tcp_pcb_remove>
 800b4d0:	4b27      	ldr	r3, [pc, #156]	; (800b570 <tcp_abandon+0x178>)
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d004      	beq.n	800b4e8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 fec2 	bl	800c26c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d004      	beq.n	800b4fa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 feb9 	bl	800c26c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d004      	beq.n	800b50c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b506:	4618      	mov	r0, r3
 800b508:	f000 feb0 	bl	800c26c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00e      	beq.n	800b530 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3304      	adds	r3, #4
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	8b12      	ldrh	r2, [r2, #24]
 800b51c:	9202      	str	r2, [sp, #8]
 800b51e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b520:	9201      	str	r2, [sp, #4]
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	460b      	mov	r3, r1
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	69b9      	ldr	r1, [r7, #24]
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f005 fb98 	bl	8010c60 <tcp_rst>
    }
    last_state = pcb->state;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	7d1b      	ldrb	r3, [r3, #20]
 800b534:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff fce2 	bl	800af00 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d004      	beq.n	800b54c <tcp_abandon+0x154>
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	f06f 010c 	mvn.w	r1, #12
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	4798      	blx	r3
  }
}
 800b54c:	3728      	adds	r7, #40	; 0x28
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	080168c8 	.word	0x080168c8
 800b558:	08016a0c 	.word	0x08016a0c
 800b55c:	0801690c 	.word	0x0801690c
 800b560:	08016a28 	.word	0x08016a28
 800b564:	2000accc 	.word	0x2000accc
 800b568:	2000acc8 	.word	0x2000acc8
 800b56c:	2000acbc 	.word	0x2000acbc
 800b570:	2000acb8 	.word	0x2000acb8

0800b574 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b57c:	2101      	movs	r1, #1
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7ff ff3a 	bl	800b3f8 <tcp_abandon>
}
 800b584:	bf00      	nop
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	4613      	mov	r3, r2
 800b598:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800b59a:	2304      	movs	r3, #4
 800b59c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800b5a4:	4b3e      	ldr	r3, [pc, #248]	; (800b6a0 <tcp_bind+0x114>)
 800b5a6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d109      	bne.n	800b5c2 <tcp_bind+0x36>
 800b5ae:	4b3d      	ldr	r3, [pc, #244]	; (800b6a4 <tcp_bind+0x118>)
 800b5b0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800b5b4:	493c      	ldr	r1, [pc, #240]	; (800b6a8 <tcp_bind+0x11c>)
 800b5b6:	483d      	ldr	r0, [pc, #244]	; (800b6ac <tcp_bind+0x120>)
 800b5b8:	f008 fe6e 	bl	8014298 <iprintf>
 800b5bc:	f06f 030f 	mvn.w	r3, #15
 800b5c0:	e06a      	b.n	800b698 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	7d1b      	ldrb	r3, [r3, #20]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d009      	beq.n	800b5de <tcp_bind+0x52>
 800b5ca:	4b36      	ldr	r3, [pc, #216]	; (800b6a4 <tcp_bind+0x118>)
 800b5cc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b5d0:	4937      	ldr	r1, [pc, #220]	; (800b6b0 <tcp_bind+0x124>)
 800b5d2:	4836      	ldr	r0, [pc, #216]	; (800b6ac <tcp_bind+0x120>)
 800b5d4:	f008 fe60 	bl	8014298 <iprintf>
 800b5d8:	f06f 0305 	mvn.w	r3, #5
 800b5dc:	e05c      	b.n	800b698 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800b5de:	88fb      	ldrh	r3, [r7, #6]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d109      	bne.n	800b5f8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800b5e4:	f000 f9de 	bl	800b9a4 <tcp_new_port>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b5ec:	88fb      	ldrh	r3, [r7, #6]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d135      	bne.n	800b65e <tcp_bind+0xd2>
      return ERR_BUF;
 800b5f2:	f06f 0301 	mvn.w	r3, #1
 800b5f6:	e04f      	b.n	800b698 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	61fb      	str	r3, [r7, #28]
 800b5fc:	e02b      	b.n	800b656 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b5fe:	4a2d      	ldr	r2, [pc, #180]	; (800b6b4 <tcp_bind+0x128>)
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	61bb      	str	r3, [r7, #24]
 800b60a:	e01e      	b.n	800b64a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	8adb      	ldrh	r3, [r3, #22]
 800b610:	88fa      	ldrh	r2, [r7, #6]
 800b612:	429a      	cmp	r2, r3
 800b614:	d116      	bne.n	800b644 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800b616:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d010      	beq.n	800b63e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00c      	beq.n	800b63e <tcp_bind+0xb2>
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d009      	beq.n	800b63e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d005      	beq.n	800b63e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d102      	bne.n	800b644 <tcp_bind+0xb8>
              return ERR_USE;
 800b63e:	f06f 0307 	mvn.w	r3, #7
 800b642:	e029      	b.n	800b698 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	61bb      	str	r3, [r7, #24]
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1dd      	bne.n	800b60c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	3301      	adds	r3, #1
 800b654:	61fb      	str	r3, [r7, #28]
 800b656:	69fa      	ldr	r2, [r7, #28]
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	dbcf      	blt.n	800b5fe <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00c      	beq.n	800b67e <tcp_bind+0xf2>
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d008      	beq.n	800b67e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <tcp_bind+0xec>
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	e000      	b.n	800b67a <tcp_bind+0xee>
 800b678:	2300      	movs	r3, #0
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	88fa      	ldrh	r2, [r7, #6]
 800b682:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b684:	4b0c      	ldr	r3, [pc, #48]	; (800b6b8 <tcp_bind+0x12c>)
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	60da      	str	r2, [r3, #12]
 800b68c:	4a0a      	ldr	r2, [pc, #40]	; (800b6b8 <tcp_bind+0x12c>)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6013      	str	r3, [r2, #0]
 800b692:	f005 fca7 	bl	8010fe4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3720      	adds	r7, #32
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	08018908 	.word	0x08018908
 800b6a4:	080168c8 	.word	0x080168c8
 800b6a8:	08016a5c 	.word	0x08016a5c
 800b6ac:	0801690c 	.word	0x0801690c
 800b6b0:	08016a74 	.word	0x08016a74
 800b6b4:	080188e0 	.word	0x080188e0
 800b6b8:	2000acc8 	.word	0x2000acc8

0800b6bc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d106      	bne.n	800b6de <tcp_accept_null+0x22>
 800b6d0:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <tcp_accept_null+0x34>)
 800b6d2:	f240 320f 	movw	r2, #783	; 0x30f
 800b6d6:	4907      	ldr	r1, [pc, #28]	; (800b6f4 <tcp_accept_null+0x38>)
 800b6d8:	4807      	ldr	r0, [pc, #28]	; (800b6f8 <tcp_accept_null+0x3c>)
 800b6da:	f008 fddd 	bl	8014298 <iprintf>

  tcp_abort(pcb);
 800b6de:	68b8      	ldr	r0, [r7, #8]
 800b6e0:	f7ff ff48 	bl	800b574 <tcp_abort>

  return ERR_ABRT;
 800b6e4:	f06f 030c 	mvn.w	r3, #12
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	080168c8 	.word	0x080168c8
 800b6f4:	08016a9c 	.word	0x08016a9c
 800b6f8:	0801690c 	.word	0x0801690c

0800b6fc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	460b      	mov	r3, r1
 800b706:	607a      	str	r2, [r7, #4]
 800b708:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d109      	bne.n	800b728 <tcp_listen_with_backlog_and_err+0x2c>
 800b714:	4b47      	ldr	r3, [pc, #284]	; (800b834 <tcp_listen_with_backlog_and_err+0x138>)
 800b716:	f240 3259 	movw	r2, #857	; 0x359
 800b71a:	4947      	ldr	r1, [pc, #284]	; (800b838 <tcp_listen_with_backlog_and_err+0x13c>)
 800b71c:	4847      	ldr	r0, [pc, #284]	; (800b83c <tcp_listen_with_backlog_and_err+0x140>)
 800b71e:	f008 fdbb 	bl	8014298 <iprintf>
 800b722:	23f0      	movs	r3, #240	; 0xf0
 800b724:	76fb      	strb	r3, [r7, #27]
 800b726:	e079      	b.n	800b81c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	7d1b      	ldrb	r3, [r3, #20]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d009      	beq.n	800b744 <tcp_listen_with_backlog_and_err+0x48>
 800b730:	4b40      	ldr	r3, [pc, #256]	; (800b834 <tcp_listen_with_backlog_and_err+0x138>)
 800b732:	f240 325a 	movw	r2, #858	; 0x35a
 800b736:	4942      	ldr	r1, [pc, #264]	; (800b840 <tcp_listen_with_backlog_and_err+0x144>)
 800b738:	4840      	ldr	r0, [pc, #256]	; (800b83c <tcp_listen_with_backlog_and_err+0x140>)
 800b73a:	f008 fdad 	bl	8014298 <iprintf>
 800b73e:	23f1      	movs	r3, #241	; 0xf1
 800b740:	76fb      	strb	r3, [r7, #27]
 800b742:	e06b      	b.n	800b81c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	7d1b      	ldrb	r3, [r3, #20]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d104      	bne.n	800b756 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800b750:	23f7      	movs	r3, #247	; 0xf7
 800b752:	76fb      	strb	r3, [r7, #27]
    goto done;
 800b754:	e062      	b.n	800b81c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800b756:	2002      	movs	r0, #2
 800b758:	f7fe fa34 	bl	8009bc4 <memp_malloc>
 800b75c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d102      	bne.n	800b76a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800b764:	23ff      	movs	r3, #255	; 0xff
 800b766:	76fb      	strb	r3, [r7, #27]
    goto done;
 800b768:	e058      	b.n	800b81c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	691a      	ldr	r2, [r3, #16]
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	8ada      	ldrh	r2, [r3, #22]
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	2201      	movs	r2, #1
 800b77e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	7d5a      	ldrb	r2, [r3, #21]
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	7a5a      	ldrb	r2, [r3, #9]
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	2200      	movs	r2, #0
 800b794:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	7ada      	ldrb	r2, [r3, #11]
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	7a9a      	ldrb	r2, [r3, #10]
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	8adb      	ldrh	r3, [r3, #22]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d021      	beq.n	800b7fa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b7b6:	4b23      	ldr	r3, [pc, #140]	; (800b844 <tcp_listen_with_backlog_and_err+0x148>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d105      	bne.n	800b7cc <tcp_listen_with_backlog_and_err+0xd0>
 800b7c0:	4b20      	ldr	r3, [pc, #128]	; (800b844 <tcp_listen_with_backlog_and_err+0x148>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	4a1f      	ldr	r2, [pc, #124]	; (800b844 <tcp_listen_with_backlog_and_err+0x148>)
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	e013      	b.n	800b7f4 <tcp_listen_with_backlog_and_err+0xf8>
 800b7cc:	4b1d      	ldr	r3, [pc, #116]	; (800b844 <tcp_listen_with_backlog_and_err+0x148>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	e00c      	b.n	800b7ee <tcp_listen_with_backlog_and_err+0xf2>
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d104      	bne.n	800b7e8 <tcp_listen_with_backlog_and_err+0xec>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68da      	ldr	r2, [r3, #12]
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	60da      	str	r2, [r3, #12]
 800b7e6:	e005      	b.n	800b7f4 <tcp_listen_with_backlog_and_err+0xf8>
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	617b      	str	r3, [r7, #20]
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1ef      	bne.n	800b7d4 <tcp_listen_with_backlog_and_err+0xd8>
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f7ff fb80 	bl	800af00 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	4a11      	ldr	r2, [pc, #68]	; (800b848 <tcp_listen_with_backlog_and_err+0x14c>)
 800b804:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b806:	4b11      	ldr	r3, [pc, #68]	; (800b84c <tcp_listen_with_backlog_and_err+0x150>)
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	60da      	str	r2, [r3, #12]
 800b80e:	4a0f      	ldr	r2, [pc, #60]	; (800b84c <tcp_listen_with_backlog_and_err+0x150>)
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	f005 fbe6 	bl	8010fe4 <tcp_timer_needed>
  res = ERR_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	7efa      	ldrb	r2, [r7, #27]
 800b826:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800b828:	69fb      	ldr	r3, [r7, #28]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3720      	adds	r7, #32
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	080168c8 	.word	0x080168c8
 800b838:	08016abc 	.word	0x08016abc
 800b83c:	0801690c 	.word	0x0801690c
 800b840:	08016aec 	.word	0x08016aec
 800b844:	2000acc8 	.word	0x2000acc8
 800b848:	0800b6bd 	.word	0x0800b6bd
 800b84c:	2000acc4 	.word	0x2000acc4

0800b850 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <tcp_update_rcv_ann_wnd+0x1c>
 800b85e:	4b25      	ldr	r3, [pc, #148]	; (800b8f4 <tcp_update_rcv_ann_wnd+0xa4>)
 800b860:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b864:	4924      	ldr	r1, [pc, #144]	; (800b8f8 <tcp_update_rcv_ann_wnd+0xa8>)
 800b866:	4825      	ldr	r0, [pc, #148]	; (800b8fc <tcp_update_rcv_ann_wnd+0xac>)
 800b868:	f008 fd16 	bl	8014298 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b874:	4413      	add	r3, r2
 800b876:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b880:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b884:	bf28      	it	cs
 800b886:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b88a:	b292      	uxth	r2, r2
 800b88c:	4413      	add	r3, r2
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	db08      	blt.n	800b8a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	e020      	b.n	800b8ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	dd03      	ble.n	800b8be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8bc:	e014      	b.n	800b8e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8d0:	d306      	bcc.n	800b8e0 <tcp_update_rcv_ann_wnd+0x90>
 800b8d2:	4b08      	ldr	r3, [pc, #32]	; (800b8f4 <tcp_update_rcv_ann_wnd+0xa4>)
 800b8d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b8d8:	4909      	ldr	r1, [pc, #36]	; (800b900 <tcp_update_rcv_ann_wnd+0xb0>)
 800b8da:	4808      	ldr	r0, [pc, #32]	; (800b8fc <tcp_update_rcv_ann_wnd+0xac>)
 800b8dc:	f008 fcdc 	bl	8014298 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b8e8:	2300      	movs	r3, #0
  }
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	080168c8 	.word	0x080168c8
 800b8f8:	08016b24 	.word	0x08016b24
 800b8fc:	0801690c 	.word	0x0801690c
 800b900:	08016b48 	.word	0x08016b48

0800b904 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d107      	bne.n	800b926 <tcp_recved+0x22>
 800b916:	4b1f      	ldr	r3, [pc, #124]	; (800b994 <tcp_recved+0x90>)
 800b918:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b91c:	491e      	ldr	r1, [pc, #120]	; (800b998 <tcp_recved+0x94>)
 800b91e:	481f      	ldr	r0, [pc, #124]	; (800b99c <tcp_recved+0x98>)
 800b920:	f008 fcba 	bl	8014298 <iprintf>
 800b924:	e032      	b.n	800b98c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	7d1b      	ldrb	r3, [r3, #20]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d106      	bne.n	800b93c <tcp_recved+0x38>
 800b92e:	4b19      	ldr	r3, [pc, #100]	; (800b994 <tcp_recved+0x90>)
 800b930:	f240 32d3 	movw	r2, #979	; 0x3d3
 800b934:	491a      	ldr	r1, [pc, #104]	; (800b9a0 <tcp_recved+0x9c>)
 800b936:	4819      	ldr	r0, [pc, #100]	; (800b99c <tcp_recved+0x98>)
 800b938:	f008 fcae 	bl	8014298 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b940:	887b      	ldrh	r3, [r7, #2]
 800b942:	4413      	add	r3, r2
 800b944:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b946:	89fb      	ldrh	r3, [r7, #14]
 800b948:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b94c:	d804      	bhi.n	800b958 <tcp_recved+0x54>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b952:	89fa      	ldrh	r2, [r7, #14]
 800b954:	429a      	cmp	r2, r3
 800b956:	d204      	bcs.n	800b962 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b95e:	851a      	strh	r2, [r3, #40]	; 0x28
 800b960:	e002      	b.n	800b968 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	89fa      	ldrh	r2, [r7, #14]
 800b966:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7ff ff71 	bl	800b850 <tcp_update_rcv_ann_wnd>
 800b96e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b976:	d309      	bcc.n	800b98c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	8b5b      	ldrh	r3, [r3, #26]
 800b97c:	f043 0302 	orr.w	r3, r3, #2
 800b980:	b29a      	uxth	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f004 fba6 	bl	80100d8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	080168c8 	.word	0x080168c8
 800b998:	08016b64 	.word	0x08016b64
 800b99c:	0801690c 	.word	0x0801690c
 800b9a0:	08016b7c 	.word	0x08016b7c

0800b9a4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800b9ae:	4b1e      	ldr	r3, [pc, #120]	; (800ba28 <tcp_new_port+0x84>)
 800b9b0:	881b      	ldrh	r3, [r3, #0]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	4b1c      	ldr	r3, [pc, #112]	; (800ba28 <tcp_new_port+0x84>)
 800b9b8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800b9ba:	4b1b      	ldr	r3, [pc, #108]	; (800ba28 <tcp_new_port+0x84>)
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d103      	bne.n	800b9ce <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b9c6:	4b18      	ldr	r3, [pc, #96]	; (800ba28 <tcp_new_port+0x84>)
 800b9c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b9cc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	71fb      	strb	r3, [r7, #7]
 800b9d2:	e01e      	b.n	800ba12 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	4a15      	ldr	r2, [pc, #84]	; (800ba2c <tcp_new_port+0x88>)
 800b9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	603b      	str	r3, [r7, #0]
 800b9e0:	e011      	b.n	800ba06 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	8ada      	ldrh	r2, [r3, #22]
 800b9e6:	4b10      	ldr	r3, [pc, #64]	; (800ba28 <tcp_new_port+0x84>)
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d108      	bne.n	800ba00 <tcp_new_port+0x5c>
        n++;
 800b9ee:	88bb      	ldrh	r3, [r7, #4]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b9f4:	88bb      	ldrh	r3, [r7, #4]
 800b9f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9fa:	d3d8      	bcc.n	800b9ae <tcp_new_port+0xa>
          return 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	e00d      	b.n	800ba1c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	603b      	str	r3, [r7, #0]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1ea      	bne.n	800b9e2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ba0c:	79fb      	ldrb	r3, [r7, #7]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	71fb      	strb	r3, [r7, #7]
 800ba12:	79fb      	ldrb	r3, [r7, #7]
 800ba14:	2b03      	cmp	r3, #3
 800ba16:	d9dd      	bls.n	800b9d4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ba18:	4b03      	ldr	r3, [pc, #12]	; (800ba28 <tcp_new_port+0x84>)
 800ba1a:	881b      	ldrh	r3, [r3, #0]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr
 800ba28:	20000010 	.word	0x20000010
 800ba2c:	080188e0 	.word	0x080188e0

0800ba30 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ba30:	b5b0      	push	{r4, r5, r7, lr}
 800ba32:	b090      	sub	sp, #64	; 0x40
 800ba34:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ba3c:	4b94      	ldr	r3, [pc, #592]	; (800bc90 <tcp_slowtmr+0x260>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3301      	adds	r3, #1
 800ba42:	4a93      	ldr	r2, [pc, #588]	; (800bc90 <tcp_slowtmr+0x260>)
 800ba44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ba46:	4b93      	ldr	r3, [pc, #588]	; (800bc94 <tcp_slowtmr+0x264>)
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	4b91      	ldr	r3, [pc, #580]	; (800bc94 <tcp_slowtmr+0x264>)
 800ba50:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ba52:	2300      	movs	r3, #0
 800ba54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ba56:	4b90      	ldr	r3, [pc, #576]	; (800bc98 <tcp_slowtmr+0x268>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ba5c:	e29f      	b.n	800bf9e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	7d1b      	ldrb	r3, [r3, #20]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d106      	bne.n	800ba74 <tcp_slowtmr+0x44>
 800ba66:	4b8d      	ldr	r3, [pc, #564]	; (800bc9c <tcp_slowtmr+0x26c>)
 800ba68:	f240 42be 	movw	r2, #1214	; 0x4be
 800ba6c:	498c      	ldr	r1, [pc, #560]	; (800bca0 <tcp_slowtmr+0x270>)
 800ba6e:	488d      	ldr	r0, [pc, #564]	; (800bca4 <tcp_slowtmr+0x274>)
 800ba70:	f008 fc12 	bl	8014298 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ba74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba76:	7d1b      	ldrb	r3, [r3, #20]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d106      	bne.n	800ba8a <tcp_slowtmr+0x5a>
 800ba7c:	4b87      	ldr	r3, [pc, #540]	; (800bc9c <tcp_slowtmr+0x26c>)
 800ba7e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ba82:	4989      	ldr	r1, [pc, #548]	; (800bca8 <tcp_slowtmr+0x278>)
 800ba84:	4887      	ldr	r0, [pc, #540]	; (800bca4 <tcp_slowtmr+0x274>)
 800ba86:	f008 fc07 	bl	8014298 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ba8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8c:	7d1b      	ldrb	r3, [r3, #20]
 800ba8e:	2b0a      	cmp	r3, #10
 800ba90:	d106      	bne.n	800baa0 <tcp_slowtmr+0x70>
 800ba92:	4b82      	ldr	r3, [pc, #520]	; (800bc9c <tcp_slowtmr+0x26c>)
 800ba94:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ba98:	4984      	ldr	r1, [pc, #528]	; (800bcac <tcp_slowtmr+0x27c>)
 800ba9a:	4882      	ldr	r0, [pc, #520]	; (800bca4 <tcp_slowtmr+0x274>)
 800ba9c:	f008 fbfc 	bl	8014298 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800baa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa2:	7f9a      	ldrb	r2, [r3, #30]
 800baa4:	4b7b      	ldr	r3, [pc, #492]	; (800bc94 <tcp_slowtmr+0x264>)
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d105      	bne.n	800bab8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800baac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bab6:	e272      	b.n	800bf9e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bab8:	4b76      	ldr	r3, [pc, #472]	; (800bc94 <tcp_slowtmr+0x264>)
 800baba:	781a      	ldrb	r2, [r3, #0]
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bac6:	2300      	movs	r3, #0
 800bac8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bace:	7d1b      	ldrb	r3, [r3, #20]
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d10a      	bne.n	800baea <tcp_slowtmr+0xba>
 800bad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bada:	2b05      	cmp	r3, #5
 800badc:	d905      	bls.n	800baea <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bae2:	3301      	adds	r3, #1
 800bae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bae8:	e11e      	b.n	800bd28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800baf0:	2b0b      	cmp	r3, #11
 800baf2:	d905      	bls.n	800bb00 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800baf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baf8:	3301      	adds	r3, #1
 800bafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bafe:	e113      	b.n	800bd28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d075      	beq.n	800bbf6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d006      	beq.n	800bb20 <tcp_slowtmr+0xf0>
 800bb12:	4b62      	ldr	r3, [pc, #392]	; (800bc9c <tcp_slowtmr+0x26c>)
 800bb14:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bb18:	4965      	ldr	r1, [pc, #404]	; (800bcb0 <tcp_slowtmr+0x280>)
 800bb1a:	4862      	ldr	r0, [pc, #392]	; (800bca4 <tcp_slowtmr+0x274>)
 800bb1c:	f008 fbbc 	bl	8014298 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d106      	bne.n	800bb36 <tcp_slowtmr+0x106>
 800bb28:	4b5c      	ldr	r3, [pc, #368]	; (800bc9c <tcp_slowtmr+0x26c>)
 800bb2a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bb2e:	4961      	ldr	r1, [pc, #388]	; (800bcb4 <tcp_slowtmr+0x284>)
 800bb30:	485c      	ldr	r0, [pc, #368]	; (800bca4 <tcp_slowtmr+0x274>)
 800bb32:	f008 fbb1 	bl	8014298 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bb3c:	2b0b      	cmp	r3, #11
 800bb3e:	d905      	bls.n	800bb4c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bb40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb44:	3301      	adds	r3, #1
 800bb46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb4a:	e0ed      	b.n	800bd28 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bb52:	3b01      	subs	r3, #1
 800bb54:	4a58      	ldr	r2, [pc, #352]	; (800bcb8 <tcp_slowtmr+0x288>)
 800bb56:	5cd3      	ldrb	r3, [r2, r3]
 800bb58:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bb60:	7c7a      	ldrb	r2, [r7, #17]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d907      	bls.n	800bb76 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bb7c:	7c7a      	ldrb	r2, [r7, #17]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	f200 80d2 	bhi.w	800bd28 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bb84:	2301      	movs	r3, #1
 800bb86:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d108      	bne.n	800bba4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bb92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb94:	f005 f958 	bl	8010e48 <tcp_zero_window_probe>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d014      	beq.n	800bbc8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bb9e:	2300      	movs	r3, #0
 800bba0:	623b      	str	r3, [r7, #32]
 800bba2:	e011      	b.n	800bbc8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bbaa:	4619      	mov	r1, r3
 800bbac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbae:	f004 f80d 	bl	800fbcc <tcp_split_unsent_seg>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d107      	bne.n	800bbc8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bbb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbba:	f004 fa8d 	bl	80100d8 <tcp_output>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d101      	bne.n	800bbc8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 80ac 	beq.w	800bd28 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bbde:	2b06      	cmp	r3, #6
 800bbe0:	f200 80a2 	bhi.w	800bd28 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bbea:	3301      	adds	r3, #1
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bbf4:	e098      	b.n	800bd28 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	db0f      	blt.n	800bc20 <tcp_slowtmr+0x1f0>
 800bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bc06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d008      	beq.n	800bc20 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	3301      	adds	r3, #1
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	b21a      	sxth	r2, r3
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800bc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc28:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	db7b      	blt.n	800bd28 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bc30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc32:	f004 fd49 	bl	80106c8 <tcp_rexmit_rto_prepare>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d007      	beq.n	800bc4c <tcp_slowtmr+0x21c>
 800bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d171      	bne.n	800bd28 <tcp_slowtmr+0x2f8>
 800bc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d06d      	beq.n	800bd28 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4e:	7d1b      	ldrb	r3, [r3, #20]
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d03a      	beq.n	800bcca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc5a:	2b0c      	cmp	r3, #12
 800bc5c:	bf28      	it	cs
 800bc5e:	230c      	movcs	r3, #12
 800bc60:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc68:	10db      	asrs	r3, r3, #3
 800bc6a:	b21b      	sxth	r3, r3
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bc74:	4413      	add	r3, r2
 800bc76:	7efa      	ldrb	r2, [r7, #27]
 800bc78:	4910      	ldr	r1, [pc, #64]	; (800bcbc <tcp_slowtmr+0x28c>)
 800bc7a:	5c8a      	ldrb	r2, [r1, r2]
 800bc7c:	4093      	lsls	r3, r2
 800bc7e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bc86:	4293      	cmp	r3, r2
 800bc88:	dc1a      	bgt.n	800bcc0 <tcp_slowtmr+0x290>
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	b21a      	sxth	r2, r3
 800bc8e:	e019      	b.n	800bcc4 <tcp_slowtmr+0x294>
 800bc90:	2000acc0 	.word	0x2000acc0
 800bc94:	2000429a 	.word	0x2000429a
 800bc98:	2000acbc 	.word	0x2000acbc
 800bc9c:	080168c8 	.word	0x080168c8
 800bca0:	08016c0c 	.word	0x08016c0c
 800bca4:	0801690c 	.word	0x0801690c
 800bca8:	08016c38 	.word	0x08016c38
 800bcac:	08016c64 	.word	0x08016c64
 800bcb0:	08016c94 	.word	0x08016c94
 800bcb4:	08016cc8 	.word	0x08016cc8
 800bcb8:	080188d8 	.word	0x080188d8
 800bcbc:	080188c8 	.word	0x080188c8
 800bcc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	2200      	movs	r2, #0
 800bcce:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	bf28      	it	cs
 800bce0:	4613      	movcs	r3, r2
 800bce2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bce4:	8a7b      	ldrh	r3, [r7, #18]
 800bce6:	085b      	lsrs	r3, r3, #1
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d206      	bcs.n	800bd10 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd06:	005b      	lsls	r3, r3, #1
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800bd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800bd22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd24:	f004 fd40 	bl	80107a8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800bd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2a:	7d1b      	ldrb	r3, [r3, #20]
 800bd2c:	2b06      	cmp	r3, #6
 800bd2e:	d111      	bne.n	800bd54 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800bd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd32:	8b5b      	ldrh	r3, [r3, #26]
 800bd34:	f003 0310 	and.w	r3, r3, #16
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00b      	beq.n	800bd54 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bd3c:	4b9d      	ldr	r3, [pc, #628]	; (800bfb4 <tcp_slowtmr+0x584>)
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	2b28      	cmp	r3, #40	; 0x28
 800bd48:	d904      	bls.n	800bd54 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800bd4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd4e:	3301      	adds	r3, #1
 800bd50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd56:	7a5b      	ldrb	r3, [r3, #9]
 800bd58:	f003 0308 	and.w	r3, r3, #8
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d04c      	beq.n	800bdfa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd62:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bd64:	2b04      	cmp	r3, #4
 800bd66:	d003      	beq.n	800bd70 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800bd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bd6c:	2b07      	cmp	r3, #7
 800bd6e:	d144      	bne.n	800bdfa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bd70:	4b90      	ldr	r3, [pc, #576]	; (800bfb4 <tcp_slowtmr+0x584>)
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd80:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800bd84:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800bd88:	498b      	ldr	r1, [pc, #556]	; (800bfb8 <tcp_slowtmr+0x588>)
 800bd8a:	fba1 1303 	umull	r1, r3, r1, r3
 800bd8e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d90a      	bls.n	800bdaa <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800bd94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd98:	3301      	adds	r3, #1
 800bd9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800bd9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bda2:	3301      	adds	r3, #1
 800bda4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bda8:	e027      	b.n	800bdfa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bdaa:	4b82      	ldr	r3, [pc, #520]	; (800bfb4 <tcp_slowtmr+0x584>)
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	4b7e      	ldr	r3, [pc, #504]	; (800bfbc <tcp_slowtmr+0x58c>)
 800bdc4:	fb03 f300 	mul.w	r3, r3, r0
 800bdc8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bdca:	497b      	ldr	r1, [pc, #492]	; (800bfb8 <tcp_slowtmr+0x588>)
 800bdcc:	fba1 1303 	umull	r1, r3, r1, r3
 800bdd0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d911      	bls.n	800bdfa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800bdd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdd8:	f004 fff6 	bl	8010dc8 <tcp_keepalive>
 800bddc:	4603      	mov	r3, r0
 800bdde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800bde2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d107      	bne.n	800bdfa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800bdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d011      	beq.n	800be26 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800be02:	4b6c      	ldr	r3, [pc, #432]	; (800bfb4 <tcp_slowtmr+0x584>)
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	1ad2      	subs	r2, r2, r3
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800be12:	4619      	mov	r1, r3
 800be14:	460b      	mov	r3, r1
 800be16:	005b      	lsls	r3, r3, #1
 800be18:	440b      	add	r3, r1
 800be1a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d302      	bcc.n	800be26 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800be20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be22:	f000 fea5 	bl	800cb70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be28:	7d1b      	ldrb	r3, [r3, #20]
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d10b      	bne.n	800be46 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be2e:	4b61      	ldr	r3, [pc, #388]	; (800bfb4 <tcp_slowtmr+0x584>)
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	2b28      	cmp	r3, #40	; 0x28
 800be3a:	d904      	bls.n	800be46 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800be3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be40:	3301      	adds	r3, #1
 800be42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800be46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be48:	7d1b      	ldrb	r3, [r3, #20]
 800be4a:	2b09      	cmp	r3, #9
 800be4c:	d10b      	bne.n	800be66 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800be4e:	4b59      	ldr	r3, [pc, #356]	; (800bfb4 <tcp_slowtmr+0x584>)
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	2bf0      	cmp	r3, #240	; 0xf0
 800be5a:	d904      	bls.n	800be66 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800be5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be60:	3301      	adds	r3, #1
 800be62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800be66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d060      	beq.n	800bf30 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800be6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be74:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800be76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be78:	f000 fcc6 	bl	800c808 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d010      	beq.n	800bea4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800be82:	4b4f      	ldr	r3, [pc, #316]	; (800bfc0 <tcp_slowtmr+0x590>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be88:	429a      	cmp	r2, r3
 800be8a:	d106      	bne.n	800be9a <tcp_slowtmr+0x46a>
 800be8c:	4b4d      	ldr	r3, [pc, #308]	; (800bfc4 <tcp_slowtmr+0x594>)
 800be8e:	f240 526d 	movw	r2, #1389	; 0x56d
 800be92:	494d      	ldr	r1, [pc, #308]	; (800bfc8 <tcp_slowtmr+0x598>)
 800be94:	484d      	ldr	r0, [pc, #308]	; (800bfcc <tcp_slowtmr+0x59c>)
 800be96:	f008 f9ff 	bl	8014298 <iprintf>
        prev->next = pcb->next;
 800be9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9c:	68da      	ldr	r2, [r3, #12]
 800be9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea0:	60da      	str	r2, [r3, #12]
 800bea2:	e00f      	b.n	800bec4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bea4:	4b46      	ldr	r3, [pc, #280]	; (800bfc0 <tcp_slowtmr+0x590>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beaa:	429a      	cmp	r2, r3
 800beac:	d006      	beq.n	800bebc <tcp_slowtmr+0x48c>
 800beae:	4b45      	ldr	r3, [pc, #276]	; (800bfc4 <tcp_slowtmr+0x594>)
 800beb0:	f240 5271 	movw	r2, #1393	; 0x571
 800beb4:	4946      	ldr	r1, [pc, #280]	; (800bfd0 <tcp_slowtmr+0x5a0>)
 800beb6:	4845      	ldr	r0, [pc, #276]	; (800bfcc <tcp_slowtmr+0x59c>)
 800beb8:	f008 f9ee 	bl	8014298 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	4a3f      	ldr	r2, [pc, #252]	; (800bfc0 <tcp_slowtmr+0x590>)
 800bec2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d013      	beq.n	800bef4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bece:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bed4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed8:	3304      	adds	r3, #4
 800beda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bedc:	8ad2      	ldrh	r2, [r2, #22]
 800bede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bee0:	8b09      	ldrh	r1, [r1, #24]
 800bee2:	9102      	str	r1, [sp, #8]
 800bee4:	9201      	str	r2, [sp, #4]
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	462b      	mov	r3, r5
 800beea:	4622      	mov	r2, r4
 800beec:	4601      	mov	r1, r0
 800beee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bef0:	f004 feb6 	bl	8010c60 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	7d1b      	ldrb	r3, [r3, #20]
 800befe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf02:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bf0a:	6838      	ldr	r0, [r7, #0]
 800bf0c:	f7fe fff8 	bl	800af00 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800bf10:	4b30      	ldr	r3, [pc, #192]	; (800bfd4 <tcp_slowtmr+0x5a4>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d004      	beq.n	800bf26 <tcp_slowtmr+0x4f6>
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f06f 010c 	mvn.w	r1, #12
 800bf22:	68b8      	ldr	r0, [r7, #8]
 800bf24:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bf26:	4b2b      	ldr	r3, [pc, #172]	; (800bfd4 <tcp_slowtmr+0x5a4>)
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d037      	beq.n	800bf9e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800bf2e:	e590      	b.n	800ba52 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800bf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3c:	7f1b      	ldrb	r3, [r3, #28]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf44:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf48:	7f1a      	ldrb	r2, [r3, #28]
 800bf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4c:	7f5b      	ldrb	r3, [r3, #29]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d325      	bcc.n	800bf9e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf54:	2200      	movs	r2, #0
 800bf56:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800bf58:	4b1e      	ldr	r3, [pc, #120]	; (800bfd4 <tcp_slowtmr+0x5a4>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00b      	beq.n	800bf80 <tcp_slowtmr+0x550>
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf70:	6912      	ldr	r2, [r2, #16]
 800bf72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf74:	4610      	mov	r0, r2
 800bf76:	4798      	blx	r3
 800bf78:	4603      	mov	r3, r0
 800bf7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800bf7e:	e002      	b.n	800bf86 <tcp_slowtmr+0x556>
 800bf80:	2300      	movs	r3, #0
 800bf82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800bf86:	4b13      	ldr	r3, [pc, #76]	; (800bfd4 <tcp_slowtmr+0x5a4>)
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d000      	beq.n	800bf90 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800bf8e:	e560      	b.n	800ba52 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bf90:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800bf98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf9a:	f004 f89d 	bl	80100d8 <tcp_output>
  while (pcb != NULL) {
 800bf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f47f ad5c 	bne.w	800ba5e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800bfaa:	4b0b      	ldr	r3, [pc, #44]	; (800bfd8 <tcp_slowtmr+0x5a8>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bfb0:	e067      	b.n	800c082 <tcp_slowtmr+0x652>
 800bfb2:	bf00      	nop
 800bfb4:	2000acc0 	.word	0x2000acc0
 800bfb8:	10624dd3 	.word	0x10624dd3
 800bfbc:	000124f8 	.word	0x000124f8
 800bfc0:	2000acbc 	.word	0x2000acbc
 800bfc4:	080168c8 	.word	0x080168c8
 800bfc8:	08016d00 	.word	0x08016d00
 800bfcc:	0801690c 	.word	0x0801690c
 800bfd0:	08016d2c 	.word	0x08016d2c
 800bfd4:	2000acb8 	.word	0x2000acb8
 800bfd8:	2000accc 	.word	0x2000accc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfde:	7d1b      	ldrb	r3, [r3, #20]
 800bfe0:	2b0a      	cmp	r3, #10
 800bfe2:	d006      	beq.n	800bff2 <tcp_slowtmr+0x5c2>
 800bfe4:	4b2a      	ldr	r3, [pc, #168]	; (800c090 <tcp_slowtmr+0x660>)
 800bfe6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800bfea:	492a      	ldr	r1, [pc, #168]	; (800c094 <tcp_slowtmr+0x664>)
 800bfec:	482a      	ldr	r0, [pc, #168]	; (800c098 <tcp_slowtmr+0x668>)
 800bfee:	f008 f953 	bl	8014298 <iprintf>
    pcb_remove = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bff8:	4b28      	ldr	r3, [pc, #160]	; (800c09c <tcp_slowtmr+0x66c>)
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffe:	6a1b      	ldr	r3, [r3, #32]
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	2bf0      	cmp	r3, #240	; 0xf0
 800c004:	d904      	bls.n	800c010 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c00a:	3301      	adds	r3, #1
 800c00c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c014:	2b00      	cmp	r3, #0
 800c016:	d02f      	beq.n	800c078 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c01a:	f000 fbf5 	bl	800c808 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	2b00      	cmp	r3, #0
 800c022:	d010      	beq.n	800c046 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c024:	4b1e      	ldr	r3, [pc, #120]	; (800c0a0 <tcp_slowtmr+0x670>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d106      	bne.n	800c03c <tcp_slowtmr+0x60c>
 800c02e:	4b18      	ldr	r3, [pc, #96]	; (800c090 <tcp_slowtmr+0x660>)
 800c030:	f240 52af 	movw	r2, #1455	; 0x5af
 800c034:	491b      	ldr	r1, [pc, #108]	; (800c0a4 <tcp_slowtmr+0x674>)
 800c036:	4818      	ldr	r0, [pc, #96]	; (800c098 <tcp_slowtmr+0x668>)
 800c038:	f008 f92e 	bl	8014298 <iprintf>
        prev->next = pcb->next;
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03e:	68da      	ldr	r2, [r3, #12]
 800c040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c042:	60da      	str	r2, [r3, #12]
 800c044:	e00f      	b.n	800c066 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c046:	4b16      	ldr	r3, [pc, #88]	; (800c0a0 <tcp_slowtmr+0x670>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d006      	beq.n	800c05e <tcp_slowtmr+0x62e>
 800c050:	4b0f      	ldr	r3, [pc, #60]	; (800c090 <tcp_slowtmr+0x660>)
 800c052:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c056:	4914      	ldr	r1, [pc, #80]	; (800c0a8 <tcp_slowtmr+0x678>)
 800c058:	480f      	ldr	r0, [pc, #60]	; (800c098 <tcp_slowtmr+0x668>)
 800c05a:	f008 f91d 	bl	8014298 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	4a0f      	ldr	r2, [pc, #60]	; (800c0a0 <tcp_slowtmr+0x670>)
 800c064:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c068:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c070:	69f8      	ldr	r0, [r7, #28]
 800c072:	f7fe ff45 	bl	800af00 <tcp_free>
 800c076:	e004      	b.n	800c082 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1a9      	bne.n	800bfdc <tcp_slowtmr+0x5ac>
    }
  }
}
 800c088:	bf00      	nop
 800c08a:	3730      	adds	r7, #48	; 0x30
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bdb0      	pop	{r4, r5, r7, pc}
 800c090:	080168c8 	.word	0x080168c8
 800c094:	08016d58 	.word	0x08016d58
 800c098:	0801690c 	.word	0x0801690c
 800c09c:	2000acc0 	.word	0x2000acc0
 800c0a0:	2000accc 	.word	0x2000accc
 800c0a4:	08016d88 	.word	0x08016d88
 800c0a8:	08016db0 	.word	0x08016db0

0800c0ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c0b2:	4b2d      	ldr	r3, [pc, #180]	; (800c168 <tcp_fasttmr+0xbc>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	4b2b      	ldr	r3, [pc, #172]	; (800c168 <tcp_fasttmr+0xbc>)
 800c0bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c0be:	4b2b      	ldr	r3, [pc, #172]	; (800c16c <tcp_fasttmr+0xc0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c0c4:	e048      	b.n	800c158 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	7f9a      	ldrb	r2, [r3, #30]
 800c0ca:	4b27      	ldr	r3, [pc, #156]	; (800c168 <tcp_fasttmr+0xbc>)
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d03f      	beq.n	800c152 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c0d2:	4b25      	ldr	r3, [pc, #148]	; (800c168 <tcp_fasttmr+0xbc>)
 800c0d4:	781a      	ldrb	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	8b5b      	ldrh	r3, [r3, #26]
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d010      	beq.n	800c108 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	8b5b      	ldrh	r3, [r3, #26]
 800c0ea:	f043 0302 	orr.w	r3, r3, #2
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f003 ffef 	bl	80100d8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	8b5b      	ldrh	r3, [r3, #26]
 800c0fe:	f023 0303 	bic.w	r3, r3, #3
 800c102:	b29a      	uxth	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	8b5b      	ldrh	r3, [r3, #26]
 800c10c:	f003 0308 	and.w	r3, r3, #8
 800c110:	2b00      	cmp	r3, #0
 800c112:	d009      	beq.n	800c128 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	8b5b      	ldrh	r3, [r3, #26]
 800c118:	f023 0308 	bic.w	r3, r3, #8
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff f87c 	bl	800b220 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00a      	beq.n	800c14c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c136:	4b0e      	ldr	r3, [pc, #56]	; (800c170 <tcp_fasttmr+0xc4>)
 800c138:	2200      	movs	r2, #0
 800c13a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f819 	bl	800c174 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c142:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <tcp_fasttmr+0xc4>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d000      	beq.n	800c14c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c14a:	e7b8      	b.n	800c0be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	607b      	str	r3, [r7, #4]
 800c150:	e002      	b.n	800c158 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1b3      	bne.n	800c0c6 <tcp_fasttmr+0x1a>
    }
  }
}
 800c15e:	bf00      	nop
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	2000429a 	.word	0x2000429a
 800c16c:	2000acbc 	.word	0x2000acbc
 800c170:	2000acb8 	.word	0x2000acb8

0800c174 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c174:	b590      	push	{r4, r7, lr}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d109      	bne.n	800c196 <tcp_process_refused_data+0x22>
 800c182:	4b37      	ldr	r3, [pc, #220]	; (800c260 <tcp_process_refused_data+0xec>)
 800c184:	f240 6209 	movw	r2, #1545	; 0x609
 800c188:	4936      	ldr	r1, [pc, #216]	; (800c264 <tcp_process_refused_data+0xf0>)
 800c18a:	4837      	ldr	r0, [pc, #220]	; (800c268 <tcp_process_refused_data+0xf4>)
 800c18c:	f008 f884 	bl	8014298 <iprintf>
 800c190:	f06f 030f 	mvn.w	r3, #15
 800c194:	e060      	b.n	800c258 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c19a:	7b5b      	ldrb	r3, [r3, #13]
 800c19c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1a2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <tcp_process_refused_data+0x58>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6918      	ldr	r0, [r3, #16]
 800c1be:	2300      	movs	r3, #0
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	47a0      	blx	r4
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	73fb      	strb	r3, [r7, #15]
 800c1ca:	e007      	b.n	800c1dc <tcp_process_refused_data+0x68>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	68ba      	ldr	r2, [r7, #8]
 800c1d0:	6879      	ldr	r1, [r7, #4]
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	f000 f8a2 	bl	800c31c <tcp_recv_null>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c1dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d12a      	bne.n	800c23a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	f003 0320 	and.w	r3, r3, #32
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d033      	beq.n	800c256 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c1f6:	d005      	beq.n	800c204 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00b      	beq.n	800c226 <tcp_process_refused_data+0xb2>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6918      	ldr	r0, [r3, #16]
 800c218:	2300      	movs	r3, #0
 800c21a:	2200      	movs	r2, #0
 800c21c:	6879      	ldr	r1, [r7, #4]
 800c21e:	47a0      	blx	r4
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]
 800c224:	e001      	b.n	800c22a <tcp_process_refused_data+0xb6>
 800c226:	2300      	movs	r3, #0
 800c228:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c22a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c22e:	f113 0f0d 	cmn.w	r3, #13
 800c232:	d110      	bne.n	800c256 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c234:	f06f 030c 	mvn.w	r3, #12
 800c238:	e00e      	b.n	800c258 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c23a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c23e:	f113 0f0d 	cmn.w	r3, #13
 800c242:	d102      	bne.n	800c24a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c244:	f06f 030c 	mvn.w	r3, #12
 800c248:	e006      	b.n	800c258 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c250:	f06f 0304 	mvn.w	r3, #4
 800c254:	e000      	b.n	800c258 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd90      	pop	{r4, r7, pc}
 800c260:	080168c8 	.word	0x080168c8
 800c264:	08016dd8 	.word	0x08016dd8
 800c268:	0801690c 	.word	0x0801690c

0800c26c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c274:	e007      	b.n	800c286 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f809 	bl	800c294 <tcp_seg_free>
    seg = next;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1f4      	bne.n	800c276 <tcp_segs_free+0xa>
  }
}
 800c28c:	bf00      	nop
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00c      	beq.n	800c2bc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d004      	beq.n	800c2b4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fe fb7a 	bl	800a9a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c2b4:	6879      	ldr	r1, [r7, #4]
 800c2b6:	2003      	movs	r0, #3
 800c2b8:	f7fd fcd6 	bl	8009c68 <memp_free>
  }
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d106      	bne.n	800c2e0 <tcp_seg_copy+0x1c>
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <tcp_seg_copy+0x4c>)
 800c2d4:	f240 6282 	movw	r2, #1666	; 0x682
 800c2d8:	490e      	ldr	r1, [pc, #56]	; (800c314 <tcp_seg_copy+0x50>)
 800c2da:	480f      	ldr	r0, [pc, #60]	; (800c318 <tcp_seg_copy+0x54>)
 800c2dc:	f007 ffdc 	bl	8014298 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c2e0:	2003      	movs	r0, #3
 800c2e2:	f7fd fc6f 	bl	8009bc4 <memp_malloc>
 800c2e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <tcp_seg_copy+0x2e>
    return NULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e00a      	b.n	800c308 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c2f2:	2210      	movs	r2, #16
 800c2f4:	6879      	ldr	r1, [r7, #4]
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f007 ffbb 	bl	8014272 <memcpy>
  pbuf_ref(cseg->p);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	4618      	mov	r0, r3
 800c302:	f7fe fbf7 	bl	800aaf4 <pbuf_ref>
  return cseg;
 800c306:	68fb      	ldr	r3, [r7, #12]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	080168c8 	.word	0x080168c8
 800c314:	08016e1c 	.word	0x08016e1c
 800c318:	0801690c 	.word	0x0801690c

0800c31c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
 800c328:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d109      	bne.n	800c344 <tcp_recv_null+0x28>
 800c330:	4b12      	ldr	r3, [pc, #72]	; (800c37c <tcp_recv_null+0x60>)
 800c332:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c336:	4912      	ldr	r1, [pc, #72]	; (800c380 <tcp_recv_null+0x64>)
 800c338:	4812      	ldr	r0, [pc, #72]	; (800c384 <tcp_recv_null+0x68>)
 800c33a:	f007 ffad 	bl	8014298 <iprintf>
 800c33e:	f06f 030f 	mvn.w	r3, #15
 800c342:	e016      	b.n	800c372 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d009      	beq.n	800c35e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	891b      	ldrh	r3, [r3, #8]
 800c34e:	4619      	mov	r1, r3
 800c350:	68b8      	ldr	r0, [r7, #8]
 800c352:	f7ff fad7 	bl	800b904 <tcp_recved>
    pbuf_free(p);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7fe fb26 	bl	800a9a8 <pbuf_free>
 800c35c:	e008      	b.n	800c370 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c35e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d104      	bne.n	800c370 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c366:	68b8      	ldr	r0, [r7, #8]
 800c368:	f7fe ffc0 	bl	800b2ec <tcp_close>
 800c36c:	4603      	mov	r3, r0
 800c36e:	e000      	b.n	800c372 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	080168c8 	.word	0x080168c8
 800c380:	08016e38 	.word	0x08016e38
 800c384:	0801690c 	.word	0x0801690c

0800c388 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4603      	mov	r3, r0
 800c390:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c396:	2b00      	cmp	r3, #0
 800c398:	db01      	blt.n	800c39e <tcp_kill_prio+0x16>
 800c39a:	79fb      	ldrb	r3, [r7, #7]
 800c39c:	e000      	b.n	800c3a0 <tcp_kill_prio+0x18>
 800c39e:	237f      	movs	r3, #127	; 0x7f
 800c3a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c3a2:	7afb      	ldrb	r3, [r7, #11]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d034      	beq.n	800c412 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c3a8:	7afb      	ldrb	r3, [r7, #11]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3b6:	4b19      	ldr	r3, [pc, #100]	; (800c41c <tcp_kill_prio+0x94>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	617b      	str	r3, [r7, #20]
 800c3bc:	e01f      	b.n	800c3fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	7d5b      	ldrb	r3, [r3, #21]
 800c3c2:	7afa      	ldrb	r2, [r7, #11]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d80c      	bhi.n	800c3e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c3cc:	7afa      	ldrb	r2, [r7, #11]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d112      	bne.n	800c3f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c3d2:	4b13      	ldr	r3, [pc, #76]	; (800c420 <tcp_kill_prio+0x98>)
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	6a1b      	ldr	r3, [r3, #32]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d80a      	bhi.n	800c3f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c3e2:	4b0f      	ldr	r3, [pc, #60]	; (800c420 <tcp_kill_prio+0x98>)
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	7d5b      	ldrb	r3, [r3, #21]
 800c3f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1dc      	bne.n	800c3be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d004      	beq.n	800c414 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c40a:	6938      	ldr	r0, [r7, #16]
 800c40c:	f7ff f8b2 	bl	800b574 <tcp_abort>
 800c410:	e000      	b.n	800c414 <tcp_kill_prio+0x8c>
    return;
 800c412:	bf00      	nop
  }
}
 800c414:	3718      	adds	r7, #24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	2000acbc 	.word	0x2000acbc
 800c420:	2000acc0 	.word	0x2000acc0

0800c424 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b086      	sub	sp, #24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	4603      	mov	r3, r0
 800c42c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c42e:	79fb      	ldrb	r3, [r7, #7]
 800c430:	2b08      	cmp	r3, #8
 800c432:	d009      	beq.n	800c448 <tcp_kill_state+0x24>
 800c434:	79fb      	ldrb	r3, [r7, #7]
 800c436:	2b09      	cmp	r3, #9
 800c438:	d006      	beq.n	800c448 <tcp_kill_state+0x24>
 800c43a:	4b1a      	ldr	r3, [pc, #104]	; (800c4a4 <tcp_kill_state+0x80>)
 800c43c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c440:	4919      	ldr	r1, [pc, #100]	; (800c4a8 <tcp_kill_state+0x84>)
 800c442:	481a      	ldr	r0, [pc, #104]	; (800c4ac <tcp_kill_state+0x88>)
 800c444:	f007 ff28 	bl	8014298 <iprintf>

  inactivity = 0;
 800c448:	2300      	movs	r3, #0
 800c44a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c44c:	2300      	movs	r3, #0
 800c44e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c450:	4b17      	ldr	r3, [pc, #92]	; (800c4b0 <tcp_kill_state+0x8c>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	617b      	str	r3, [r7, #20]
 800c456:	e017      	b.n	800c488 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	7d1b      	ldrb	r3, [r3, #20]
 800c45c:	79fa      	ldrb	r2, [r7, #7]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d10f      	bne.n	800c482 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c462:	4b14      	ldr	r3, [pc, #80]	; (800c4b4 <tcp_kill_state+0x90>)
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d807      	bhi.n	800c482 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c472:	4b10      	ldr	r3, [pc, #64]	; (800c4b4 <tcp_kill_state+0x90>)
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	617b      	str	r3, [r7, #20]
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1e4      	bne.n	800c458 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d003      	beq.n	800c49c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c494:	2100      	movs	r1, #0
 800c496:	6938      	ldr	r0, [r7, #16]
 800c498:	f7fe ffae 	bl	800b3f8 <tcp_abandon>
  }
}
 800c49c:	bf00      	nop
 800c49e:	3718      	adds	r7, #24
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	080168c8 	.word	0x080168c8
 800c4a8:	08016e54 	.word	0x08016e54
 800c4ac:	0801690c 	.word	0x0801690c
 800c4b0:	2000acbc 	.word	0x2000acbc
 800c4b4:	2000acc0 	.word	0x2000acc0

0800c4b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4c6:	4b12      	ldr	r3, [pc, #72]	; (800c510 <tcp_kill_timewait+0x58>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	60fb      	str	r3, [r7, #12]
 800c4cc:	e012      	b.n	800c4f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c4ce:	4b11      	ldr	r3, [pc, #68]	; (800c514 <tcp_kill_timewait+0x5c>)
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	6a1b      	ldr	r3, [r3, #32]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d807      	bhi.n	800c4ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c4de:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <tcp_kill_timewait+0x5c>)
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	60fb      	str	r3, [r7, #12]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1e9      	bne.n	800c4ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d002      	beq.n	800c506 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c500:	68b8      	ldr	r0, [r7, #8]
 800c502:	f7ff f837 	bl	800b574 <tcp_abort>
  }
}
 800c506:	bf00      	nop
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	2000accc 	.word	0x2000accc
 800c514:	2000acc0 	.word	0x2000acc0

0800c518 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c51e:	4b10      	ldr	r3, [pc, #64]	; (800c560 <tcp_handle_closepend+0x48>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c524:	e014      	b.n	800c550 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	8b5b      	ldrh	r3, [r3, #26]
 800c530:	f003 0308 	and.w	r3, r3, #8
 800c534:	2b00      	cmp	r3, #0
 800c536:	d009      	beq.n	800c54c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	8b5b      	ldrh	r3, [r3, #26]
 800c53c:	f023 0308 	bic.w	r3, r3, #8
 800c540:	b29a      	uxth	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7fe fe6a 	bl	800b220 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1e7      	bne.n	800c526 <tcp_handle_closepend+0xe>
  }
}
 800c556:	bf00      	nop
 800c558:	3708      	adds	r7, #8
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	2000acbc 	.word	0x2000acbc

0800c564 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	4603      	mov	r3, r0
 800c56c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c56e:	2001      	movs	r0, #1
 800c570:	f7fd fb28 	bl	8009bc4 <memp_malloc>
 800c574:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d126      	bne.n	800c5ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c57c:	f7ff ffcc 	bl	800c518 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c580:	f7ff ff9a 	bl	800c4b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c584:	2001      	movs	r0, #1
 800c586:	f7fd fb1d 	bl	8009bc4 <memp_malloc>
 800c58a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d11b      	bne.n	800c5ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c592:	2009      	movs	r0, #9
 800c594:	f7ff ff46 	bl	800c424 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c598:	2001      	movs	r0, #1
 800c59a:	f7fd fb13 	bl	8009bc4 <memp_malloc>
 800c59e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d111      	bne.n	800c5ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c5a6:	2008      	movs	r0, #8
 800c5a8:	f7ff ff3c 	bl	800c424 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c5ac:	2001      	movs	r0, #1
 800c5ae:	f7fd fb09 	bl	8009bc4 <memp_malloc>
 800c5b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d107      	bne.n	800c5ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff fee3 	bl	800c388 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	f7fd fafe 	bl	8009bc4 <memp_malloc>
 800c5c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d03f      	beq.n	800c650 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c5d0:	229c      	movs	r2, #156	; 0x9c
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f007 fe57 	bl	8014288 <memset>
    pcb->prio = prio;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	79fa      	ldrb	r2, [r7, #7]
 800c5de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c5e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c5f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	22ff      	movs	r2, #255	; 0xff
 800c5fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c606:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2206      	movs	r2, #6
 800c60c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2206      	movs	r2, #6
 800c614:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c61c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2201      	movs	r2, #1
 800c622:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c626:	4b0d      	ldr	r3, [pc, #52]	; (800c65c <tcp_alloc+0xf8>)
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c62e:	4b0c      	ldr	r3, [pc, #48]	; (800c660 <tcp_alloc+0xfc>)
 800c630:	781a      	ldrb	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c63c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	4a08      	ldr	r2, [pc, #32]	; (800c664 <tcp_alloc+0x100>)
 800c644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	4a07      	ldr	r2, [pc, #28]	; (800c668 <tcp_alloc+0x104>)
 800c64c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c650:	68fb      	ldr	r3, [r7, #12]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3710      	adds	r7, #16
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	2000acc0 	.word	0x2000acc0
 800c660:	2000429a 	.word	0x2000429a
 800c664:	0800c31d 	.word	0x0800c31d
 800c668:	006ddd00 	.word	0x006ddd00

0800c66c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800c676:	2040      	movs	r0, #64	; 0x40
 800c678:	f7ff ff74 	bl	800c564 <tcp_alloc>
 800c67c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800c67e:	68fb      	ldr	r3, [r7, #12]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	611a      	str	r2, [r3, #16]
  }
}
 800c69e:	bf00      	nop
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
	...

0800c6ac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00e      	beq.n	800c6da <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	7d1b      	ldrb	r3, [r3, #20]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d106      	bne.n	800c6d2 <tcp_recv+0x26>
 800c6c4:	4b07      	ldr	r3, [pc, #28]	; (800c6e4 <tcp_recv+0x38>)
 800c6c6:	f240 72df 	movw	r2, #2015	; 0x7df
 800c6ca:	4907      	ldr	r1, [pc, #28]	; (800c6e8 <tcp_recv+0x3c>)
 800c6cc:	4807      	ldr	r0, [pc, #28]	; (800c6ec <tcp_recv+0x40>)
 800c6ce:	f007 fde3 	bl	8014298 <iprintf>
    pcb->recv = recv;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800c6da:	bf00      	nop
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	080168c8 	.word	0x080168c8
 800c6e8:	08016e64 	.word	0x08016e64
 800c6ec:	0801690c 	.word	0x0801690c

0800c6f0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00e      	beq.n	800c71e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7d1b      	ldrb	r3, [r3, #20]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d106      	bne.n	800c716 <tcp_sent+0x26>
 800c708:	4b07      	ldr	r3, [pc, #28]	; (800c728 <tcp_sent+0x38>)
 800c70a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800c70e:	4907      	ldr	r1, [pc, #28]	; (800c72c <tcp_sent+0x3c>)
 800c710:	4807      	ldr	r0, [pc, #28]	; (800c730 <tcp_sent+0x40>)
 800c712:	f007 fdc1 	bl	8014298 <iprintf>
    pcb->sent = sent;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800c71e:	bf00      	nop
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	080168c8 	.word	0x080168c8
 800c72c:	08016e8c 	.word	0x08016e8c
 800c730:	0801690c 	.word	0x0801690c

0800c734 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00e      	beq.n	800c762 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	7d1b      	ldrb	r3, [r3, #20]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d106      	bne.n	800c75a <tcp_err+0x26>
 800c74c:	4b07      	ldr	r3, [pc, #28]	; (800c76c <tcp_err+0x38>)
 800c74e:	f640 020d 	movw	r2, #2061	; 0x80d
 800c752:	4907      	ldr	r1, [pc, #28]	; (800c770 <tcp_err+0x3c>)
 800c754:	4807      	ldr	r0, [pc, #28]	; (800c774 <tcp_err+0x40>)
 800c756:	f007 fd9f 	bl	8014298 <iprintf>
    pcb->errf = err;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	683a      	ldr	r2, [r7, #0]
 800c75e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800c762:	bf00      	nop
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	080168c8 	.word	0x080168c8
 800c770:	08016eb4 	.word	0x08016eb4
 800c774:	0801690c 	.word	0x0801690c

0800c778 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d008      	beq.n	800c79a <tcp_accept+0x22>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	7d1b      	ldrb	r3, [r3, #20]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d104      	bne.n	800c79a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	619a      	str	r2, [r3, #24]
  }
}
 800c79a:	bf00      	nop
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
	...

0800c7a8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d107      	bne.n	800c7cc <tcp_poll+0x24>
 800c7bc:	4b0e      	ldr	r3, [pc, #56]	; (800c7f8 <tcp_poll+0x50>)
 800c7be:	f640 023d 	movw	r2, #2109	; 0x83d
 800c7c2:	490e      	ldr	r1, [pc, #56]	; (800c7fc <tcp_poll+0x54>)
 800c7c4:	480e      	ldr	r0, [pc, #56]	; (800c800 <tcp_poll+0x58>)
 800c7c6:	f007 fd67 	bl	8014298 <iprintf>
 800c7ca:	e011      	b.n	800c7f0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	7d1b      	ldrb	r3, [r3, #20]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d106      	bne.n	800c7e2 <tcp_poll+0x3a>
 800c7d4:	4b08      	ldr	r3, [pc, #32]	; (800c7f8 <tcp_poll+0x50>)
 800c7d6:	f640 023e 	movw	r2, #2110	; 0x83e
 800c7da:	490a      	ldr	r1, [pc, #40]	; (800c804 <tcp_poll+0x5c>)
 800c7dc:	4808      	ldr	r0, [pc, #32]	; (800c800 <tcp_poll+0x58>)
 800c7de:	f007 fd5b 	bl	8014298 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	68ba      	ldr	r2, [r7, #8]
 800c7e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	79fa      	ldrb	r2, [r7, #7]
 800c7ee:	775a      	strb	r2, [r3, #29]
}
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	080168c8 	.word	0x080168c8
 800c7fc:	08016edc 	.word	0x08016edc
 800c800:	0801690c 	.word	0x0801690c
 800c804:	08016ef4 	.word	0x08016ef4

0800c808 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d107      	bne.n	800c826 <tcp_pcb_purge+0x1e>
 800c816:	4b21      	ldr	r3, [pc, #132]	; (800c89c <tcp_pcb_purge+0x94>)
 800c818:	f640 0251 	movw	r2, #2129	; 0x851
 800c81c:	4920      	ldr	r1, [pc, #128]	; (800c8a0 <tcp_pcb_purge+0x98>)
 800c81e:	4821      	ldr	r0, [pc, #132]	; (800c8a4 <tcp_pcb_purge+0x9c>)
 800c820:	f007 fd3a 	bl	8014298 <iprintf>
 800c824:	e037      	b.n	800c896 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	7d1b      	ldrb	r3, [r3, #20]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d033      	beq.n	800c896 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c832:	2b0a      	cmp	r3, #10
 800c834:	d02f      	beq.n	800c896 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d02b      	beq.n	800c896 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c842:	2b00      	cmp	r3, #0
 800c844:	d007      	beq.n	800c856 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fe f8ac 	bl	800a9a8 <pbuf_free>
      pcb->refused_data = NULL;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d002      	beq.n	800c864 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f986 	bl	800cb70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c86a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c870:	4618      	mov	r0, r3
 800c872:	f7ff fcfb 	bl	800c26c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7ff fcf6 	bl	800c26c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	66da      	str	r2, [r3, #108]	; 0x6c
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c896:	3708      	adds	r7, #8
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	080168c8 	.word	0x080168c8
 800c8a0:	08016f14 	.word	0x08016f14
 800c8a4:	0801690c 	.word	0x0801690c

0800c8a8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d106      	bne.n	800c8c6 <tcp_pcb_remove+0x1e>
 800c8b8:	4b3e      	ldr	r3, [pc, #248]	; (800c9b4 <tcp_pcb_remove+0x10c>)
 800c8ba:	f640 0283 	movw	r2, #2179	; 0x883
 800c8be:	493e      	ldr	r1, [pc, #248]	; (800c9b8 <tcp_pcb_remove+0x110>)
 800c8c0:	483e      	ldr	r0, [pc, #248]	; (800c9bc <tcp_pcb_remove+0x114>)
 800c8c2:	f007 fce9 	bl	8014298 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d106      	bne.n	800c8da <tcp_pcb_remove+0x32>
 800c8cc:	4b39      	ldr	r3, [pc, #228]	; (800c9b4 <tcp_pcb_remove+0x10c>)
 800c8ce:	f640 0284 	movw	r2, #2180	; 0x884
 800c8d2:	493b      	ldr	r1, [pc, #236]	; (800c9c0 <tcp_pcb_remove+0x118>)
 800c8d4:	4839      	ldr	r0, [pc, #228]	; (800c9bc <tcp_pcb_remove+0x114>)
 800c8d6:	f007 fcdf 	bl	8014298 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d105      	bne.n	800c8f0 <tcp_pcb_remove+0x48>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68da      	ldr	r2, [r3, #12]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	e013      	b.n	800c918 <tcp_pcb_remove+0x70>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	60fb      	str	r3, [r7, #12]
 800c8f6:	e00c      	b.n	800c912 <tcp_pcb_remove+0x6a>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d104      	bne.n	800c90c <tcp_pcb_remove+0x64>
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	68da      	ldr	r2, [r3, #12]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	60da      	str	r2, [r3, #12]
 800c90a:	e005      	b.n	800c918 <tcp_pcb_remove+0x70>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	60fb      	str	r3, [r7, #12]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1ef      	bne.n	800c8f8 <tcp_pcb_remove+0x50>
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	2200      	movs	r2, #0
 800c91c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c91e:	6838      	ldr	r0, [r7, #0]
 800c920:	f7ff ff72 	bl	800c808 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	7d1b      	ldrb	r3, [r3, #20]
 800c928:	2b0a      	cmp	r3, #10
 800c92a:	d013      	beq.n	800c954 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c930:	2b01      	cmp	r3, #1
 800c932:	d00f      	beq.n	800c954 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	8b5b      	ldrh	r3, [r3, #26]
 800c938:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d009      	beq.n	800c954 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	8b5b      	ldrh	r3, [r3, #26]
 800c944:	f043 0302 	orr.w	r3, r3, #2
 800c948:	b29a      	uxth	r2, r3
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c94e:	6838      	ldr	r0, [r7, #0]
 800c950:	f003 fbc2 	bl	80100d8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	7d1b      	ldrb	r3, [r3, #20]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d020      	beq.n	800c99e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c960:	2b00      	cmp	r3, #0
 800c962:	d006      	beq.n	800c972 <tcp_pcb_remove+0xca>
 800c964:	4b13      	ldr	r3, [pc, #76]	; (800c9b4 <tcp_pcb_remove+0x10c>)
 800c966:	f640 0293 	movw	r2, #2195	; 0x893
 800c96a:	4916      	ldr	r1, [pc, #88]	; (800c9c4 <tcp_pcb_remove+0x11c>)
 800c96c:	4813      	ldr	r0, [pc, #76]	; (800c9bc <tcp_pcb_remove+0x114>)
 800c96e:	f007 fc93 	bl	8014298 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c976:	2b00      	cmp	r3, #0
 800c978:	d006      	beq.n	800c988 <tcp_pcb_remove+0xe0>
 800c97a:	4b0e      	ldr	r3, [pc, #56]	; (800c9b4 <tcp_pcb_remove+0x10c>)
 800c97c:	f640 0294 	movw	r2, #2196	; 0x894
 800c980:	4911      	ldr	r1, [pc, #68]	; (800c9c8 <tcp_pcb_remove+0x120>)
 800c982:	480e      	ldr	r0, [pc, #56]	; (800c9bc <tcp_pcb_remove+0x114>)
 800c984:	f007 fc88 	bl	8014298 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d006      	beq.n	800c99e <tcp_pcb_remove+0xf6>
 800c990:	4b08      	ldr	r3, [pc, #32]	; (800c9b4 <tcp_pcb_remove+0x10c>)
 800c992:	f640 0296 	movw	r2, #2198	; 0x896
 800c996:	490d      	ldr	r1, [pc, #52]	; (800c9cc <tcp_pcb_remove+0x124>)
 800c998:	4808      	ldr	r0, [pc, #32]	; (800c9bc <tcp_pcb_remove+0x114>)
 800c99a:	f007 fc7d 	bl	8014298 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c9aa:	bf00      	nop
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	080168c8 	.word	0x080168c8
 800c9b8:	08016f30 	.word	0x08016f30
 800c9bc:	0801690c 	.word	0x0801690c
 800c9c0:	08016f4c 	.word	0x08016f4c
 800c9c4:	08016f6c 	.word	0x08016f6c
 800c9c8:	08016f84 	.word	0x08016f84
 800c9cc:	08016fa0 	.word	0x08016fa0

0800c9d0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d106      	bne.n	800c9ec <tcp_next_iss+0x1c>
 800c9de:	4b0a      	ldr	r3, [pc, #40]	; (800ca08 <tcp_next_iss+0x38>)
 800c9e0:	f640 02af 	movw	r2, #2223	; 0x8af
 800c9e4:	4909      	ldr	r1, [pc, #36]	; (800ca0c <tcp_next_iss+0x3c>)
 800c9e6:	480a      	ldr	r0, [pc, #40]	; (800ca10 <tcp_next_iss+0x40>)
 800c9e8:	f007 fc56 	bl	8014298 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c9ec:	4b09      	ldr	r3, [pc, #36]	; (800ca14 <tcp_next_iss+0x44>)
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	4b09      	ldr	r3, [pc, #36]	; (800ca18 <tcp_next_iss+0x48>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	4a07      	ldr	r2, [pc, #28]	; (800ca14 <tcp_next_iss+0x44>)
 800c9f8:	6013      	str	r3, [r2, #0]
  return iss;
 800c9fa:	4b06      	ldr	r3, [pc, #24]	; (800ca14 <tcp_next_iss+0x44>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	080168c8 	.word	0x080168c8
 800ca0c:	08016fb8 	.word	0x08016fb8
 800ca10:	0801690c 	.word	0x0801690c
 800ca14:	20000014 	.word	0x20000014
 800ca18:	2000acc0 	.word	0x2000acc0

0800ca1c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b086      	sub	sp, #24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	4603      	mov	r3, r0
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	607a      	str	r2, [r7, #4]
 800ca28:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d106      	bne.n	800ca3e <tcp_eff_send_mss_netif+0x22>
 800ca30:	4b14      	ldr	r3, [pc, #80]	; (800ca84 <tcp_eff_send_mss_netif+0x68>)
 800ca32:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ca36:	4914      	ldr	r1, [pc, #80]	; (800ca88 <tcp_eff_send_mss_netif+0x6c>)
 800ca38:	4814      	ldr	r0, [pc, #80]	; (800ca8c <tcp_eff_send_mss_netif+0x70>)
 800ca3a:	f007 fc2d 	bl	8014298 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d101      	bne.n	800ca48 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ca44:	89fb      	ldrh	r3, [r7, #14]
 800ca46:	e019      	b.n	800ca7c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ca4c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ca4e:	8afb      	ldrh	r3, [r7, #22]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d012      	beq.n	800ca7a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ca54:	2328      	movs	r3, #40	; 0x28
 800ca56:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ca58:	8afa      	ldrh	r2, [r7, #22]
 800ca5a:	8abb      	ldrh	r3, [r7, #20]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d904      	bls.n	800ca6a <tcp_eff_send_mss_netif+0x4e>
 800ca60:	8afa      	ldrh	r2, [r7, #22]
 800ca62:	8abb      	ldrh	r3, [r7, #20]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	e000      	b.n	800ca6c <tcp_eff_send_mss_netif+0x50>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ca6e:	8a7a      	ldrh	r2, [r7, #18]
 800ca70:	89fb      	ldrh	r3, [r7, #14]
 800ca72:	4293      	cmp	r3, r2
 800ca74:	bf28      	it	cs
 800ca76:	4613      	movcs	r3, r2
 800ca78:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ca7a:	89fb      	ldrh	r3, [r7, #14]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	080168c8 	.word	0x080168c8
 800ca88:	08016fd4 	.word	0x08016fd4
 800ca8c:	0801690c 	.word	0x0801690c

0800ca90 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d119      	bne.n	800cad8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800caa4:	4b10      	ldr	r3, [pc, #64]	; (800cae8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800caa6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800caaa:	4910      	ldr	r1, [pc, #64]	; (800caec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800caac:	4810      	ldr	r0, [pc, #64]	; (800caf0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800caae:	f007 fbf3 	bl	8014298 <iprintf>

  while (pcb != NULL) {
 800cab2:	e011      	b.n	800cad8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d108      	bne.n	800cad2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f7fe fd54 	bl	800b574 <tcp_abort>
      pcb = next;
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	e002      	b.n	800cad8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1ea      	bne.n	800cab4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cade:	bf00      	nop
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	080168c8 	.word	0x080168c8
 800caec:	08016ffc 	.word	0x08016ffc
 800caf0:	0801690c 	.word	0x0801690c

0800caf4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d02a      	beq.n	800cb5a <tcp_netif_ip_addr_changed+0x66>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d026      	beq.n	800cb5a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cb0c:	4b15      	ldr	r3, [pc, #84]	; (800cb64 <tcp_netif_ip_addr_changed+0x70>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7ff ffbc 	bl	800ca90 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cb18:	4b13      	ldr	r3, [pc, #76]	; (800cb68 <tcp_netif_ip_addr_changed+0x74>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f7ff ffb6 	bl	800ca90 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d017      	beq.n	800cb5a <tcp_netif_ip_addr_changed+0x66>
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d013      	beq.n	800cb5a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb32:	4b0e      	ldr	r3, [pc, #56]	; (800cb6c <tcp_netif_ip_addr_changed+0x78>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	60fb      	str	r3, [r7, #12]
 800cb38:	e00c      	b.n	800cb54 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d103      	bne.n	800cb4e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1ef      	bne.n	800cb3a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cb5a:	bf00      	nop
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	2000acbc 	.word	0x2000acbc
 800cb68:	2000acc8 	.word	0x2000acc8
 800cb6c:	2000acc4 	.word	0x2000acc4

0800cb70 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d007      	beq.n	800cb90 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7ff fb71 	bl	800c26c <tcp_segs_free>
    pcb->ooseq = NULL;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cb90:	bf00      	nop
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cb98:	b590      	push	{r4, r7, lr}
 800cb9a:	b08d      	sub	sp, #52	; 0x34
 800cb9c:	af04      	add	r7, sp, #16
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d105      	bne.n	800cbb4 <tcp_input+0x1c>
 800cba8:	4b9b      	ldr	r3, [pc, #620]	; (800ce18 <tcp_input+0x280>)
 800cbaa:	2283      	movs	r2, #131	; 0x83
 800cbac:	499b      	ldr	r1, [pc, #620]	; (800ce1c <tcp_input+0x284>)
 800cbae:	489c      	ldr	r0, [pc, #624]	; (800ce20 <tcp_input+0x288>)
 800cbb0:	f007 fb72 	bl	8014298 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	4a9a      	ldr	r2, [pc, #616]	; (800ce24 <tcp_input+0x28c>)
 800cbba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	895b      	ldrh	r3, [r3, #10]
 800cbc0:	2b13      	cmp	r3, #19
 800cbc2:	f240 83c4 	bls.w	800d34e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cbc6:	4b98      	ldr	r3, [pc, #608]	; (800ce28 <tcp_input+0x290>)
 800cbc8:	695a      	ldr	r2, [r3, #20]
 800cbca:	4b97      	ldr	r3, [pc, #604]	; (800ce28 <tcp_input+0x290>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	f006 f9ed 	bl	8012fb0 <ip4_addr_isbroadcast_u32>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f040 83ba 	bne.w	800d352 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cbde:	4b92      	ldr	r3, [pc, #584]	; (800ce28 <tcp_input+0x290>)
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cbe6:	2be0      	cmp	r3, #224	; 0xe0
 800cbe8:	f000 83b3 	beq.w	800d352 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cbec:	4b8d      	ldr	r3, [pc, #564]	; (800ce24 <tcp_input+0x28c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	899b      	ldrh	r3, [r3, #12]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fc fb2f 	bl	8009258 <lwip_htons>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	0b1b      	lsrs	r3, r3, #12
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cc06:	7cbb      	ldrb	r3, [r7, #18]
 800cc08:	2b13      	cmp	r3, #19
 800cc0a:	f240 83a2 	bls.w	800d352 <tcp_input+0x7ba>
 800cc0e:	7cbb      	ldrb	r3, [r7, #18]
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	891b      	ldrh	r3, [r3, #8]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	f200 839b 	bhi.w	800d352 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cc1c:	7cbb      	ldrb	r3, [r7, #18]
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	3b14      	subs	r3, #20
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	4b81      	ldr	r3, [pc, #516]	; (800ce2c <tcp_input+0x294>)
 800cc26:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cc28:	4b81      	ldr	r3, [pc, #516]	; (800ce30 <tcp_input+0x298>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	895a      	ldrh	r2, [r3, #10]
 800cc32:	7cbb      	ldrb	r3, [r7, #18]
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d309      	bcc.n	800cc4e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cc3a:	4b7c      	ldr	r3, [pc, #496]	; (800ce2c <tcp_input+0x294>)
 800cc3c:	881a      	ldrh	r2, [r3, #0]
 800cc3e:	4b7d      	ldr	r3, [pc, #500]	; (800ce34 <tcp_input+0x29c>)
 800cc40:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cc42:	7cbb      	ldrb	r3, [r7, #18]
 800cc44:	4619      	mov	r1, r3
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7fd fe28 	bl	800a89c <pbuf_remove_header>
 800cc4c:	e04e      	b.n	800ccec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d105      	bne.n	800cc62 <tcp_input+0xca>
 800cc56:	4b70      	ldr	r3, [pc, #448]	; (800ce18 <tcp_input+0x280>)
 800cc58:	22c2      	movs	r2, #194	; 0xc2
 800cc5a:	4977      	ldr	r1, [pc, #476]	; (800ce38 <tcp_input+0x2a0>)
 800cc5c:	4870      	ldr	r0, [pc, #448]	; (800ce20 <tcp_input+0x288>)
 800cc5e:	f007 fb1b 	bl	8014298 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cc62:	2114      	movs	r1, #20
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7fd fe19 	bl	800a89c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	895a      	ldrh	r2, [r3, #10]
 800cc6e:	4b71      	ldr	r3, [pc, #452]	; (800ce34 <tcp_input+0x29c>)
 800cc70:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cc72:	4b6e      	ldr	r3, [pc, #440]	; (800ce2c <tcp_input+0x294>)
 800cc74:	881a      	ldrh	r2, [r3, #0]
 800cc76:	4b6f      	ldr	r3, [pc, #444]	; (800ce34 <tcp_input+0x29c>)
 800cc78:	881b      	ldrh	r3, [r3, #0]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cc7e:	4b6d      	ldr	r3, [pc, #436]	; (800ce34 <tcp_input+0x29c>)
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	4619      	mov	r1, r3
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7fd fe09 	bl	800a89c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	895b      	ldrh	r3, [r3, #10]
 800cc90:	8a3a      	ldrh	r2, [r7, #16]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	f200 835f 	bhi.w	800d356 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	4a64      	ldr	r2, [pc, #400]	; (800ce30 <tcp_input+0x298>)
 800cca0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	8a3a      	ldrh	r2, [r7, #16]
 800cca8:	4611      	mov	r1, r2
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7fd fdf6 	bl	800a89c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	891a      	ldrh	r2, [r3, #8]
 800ccb4:	8a3b      	ldrh	r3, [r7, #16]
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	895b      	ldrh	r3, [r3, #10]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d005      	beq.n	800ccd2 <tcp_input+0x13a>
 800ccc6:	4b54      	ldr	r3, [pc, #336]	; (800ce18 <tcp_input+0x280>)
 800ccc8:	22df      	movs	r2, #223	; 0xdf
 800ccca:	495c      	ldr	r1, [pc, #368]	; (800ce3c <tcp_input+0x2a4>)
 800cccc:	4854      	ldr	r0, [pc, #336]	; (800ce20 <tcp_input+0x288>)
 800ccce:	f007 fae3 	bl	8014298 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	891a      	ldrh	r2, [r3, #8]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	891b      	ldrh	r3, [r3, #8]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d005      	beq.n	800ccec <tcp_input+0x154>
 800cce0:	4b4d      	ldr	r3, [pc, #308]	; (800ce18 <tcp_input+0x280>)
 800cce2:	22e0      	movs	r2, #224	; 0xe0
 800cce4:	4956      	ldr	r1, [pc, #344]	; (800ce40 <tcp_input+0x2a8>)
 800cce6:	484e      	ldr	r0, [pc, #312]	; (800ce20 <tcp_input+0x288>)
 800cce8:	f007 fad6 	bl	8014298 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ccec:	4b4d      	ldr	r3, [pc, #308]	; (800ce24 <tcp_input+0x28c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	b29a      	uxth	r2, r3
 800ccf4:	4b4b      	ldr	r3, [pc, #300]	; (800ce24 <tcp_input+0x28c>)
 800ccf6:	681c      	ldr	r4, [r3, #0]
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	f7fc faad 	bl	8009258 <lwip_htons>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cd02:	4b48      	ldr	r3, [pc, #288]	; (800ce24 <tcp_input+0x28c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	885b      	ldrh	r3, [r3, #2]
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	4b46      	ldr	r3, [pc, #280]	; (800ce24 <tcp_input+0x28c>)
 800cd0c:	681c      	ldr	r4, [r3, #0]
 800cd0e:	4610      	mov	r0, r2
 800cd10:	f7fc faa2 	bl	8009258 <lwip_htons>
 800cd14:	4603      	mov	r3, r0
 800cd16:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cd18:	4b42      	ldr	r3, [pc, #264]	; (800ce24 <tcp_input+0x28c>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	4b41      	ldr	r3, [pc, #260]	; (800ce24 <tcp_input+0x28c>)
 800cd20:	681c      	ldr	r4, [r3, #0]
 800cd22:	4610      	mov	r0, r2
 800cd24:	f7fc faad 	bl	8009282 <lwip_htonl>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	6063      	str	r3, [r4, #4]
 800cd2c:	6863      	ldr	r3, [r4, #4]
 800cd2e:	4a45      	ldr	r2, [pc, #276]	; (800ce44 <tcp_input+0x2ac>)
 800cd30:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cd32:	4b3c      	ldr	r3, [pc, #240]	; (800ce24 <tcp_input+0x28c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	689a      	ldr	r2, [r3, #8]
 800cd38:	4b3a      	ldr	r3, [pc, #232]	; (800ce24 <tcp_input+0x28c>)
 800cd3a:	681c      	ldr	r4, [r3, #0]
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	f7fc faa0 	bl	8009282 <lwip_htonl>
 800cd42:	4603      	mov	r3, r0
 800cd44:	60a3      	str	r3, [r4, #8]
 800cd46:	68a3      	ldr	r3, [r4, #8]
 800cd48:	4a3f      	ldr	r2, [pc, #252]	; (800ce48 <tcp_input+0x2b0>)
 800cd4a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cd4c:	4b35      	ldr	r3, [pc, #212]	; (800ce24 <tcp_input+0x28c>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	89db      	ldrh	r3, [r3, #14]
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	4b33      	ldr	r3, [pc, #204]	; (800ce24 <tcp_input+0x28c>)
 800cd56:	681c      	ldr	r4, [r3, #0]
 800cd58:	4610      	mov	r0, r2
 800cd5a:	f7fc fa7d 	bl	8009258 <lwip_htons>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800cd62:	4b30      	ldr	r3, [pc, #192]	; (800ce24 <tcp_input+0x28c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	899b      	ldrh	r3, [r3, #12]
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fc fa74 	bl	8009258 <lwip_htons>
 800cd70:	4603      	mov	r3, r0
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	4b34      	ldr	r3, [pc, #208]	; (800ce4c <tcp_input+0x2b4>)
 800cd7c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	891a      	ldrh	r2, [r3, #8]
 800cd82:	4b33      	ldr	r3, [pc, #204]	; (800ce50 <tcp_input+0x2b8>)
 800cd84:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cd86:	4b31      	ldr	r3, [pc, #196]	; (800ce4c <tcp_input+0x2b4>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	f003 0303 	and.w	r3, r3, #3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00c      	beq.n	800cdac <tcp_input+0x214>
    tcplen++;
 800cd92:	4b2f      	ldr	r3, [pc, #188]	; (800ce50 <tcp_input+0x2b8>)
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	3301      	adds	r3, #1
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	4b2d      	ldr	r3, [pc, #180]	; (800ce50 <tcp_input+0x2b8>)
 800cd9c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	891a      	ldrh	r2, [r3, #8]
 800cda2:	4b2b      	ldr	r3, [pc, #172]	; (800ce50 <tcp_input+0x2b8>)
 800cda4:	881b      	ldrh	r3, [r3, #0]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	f200 82d7 	bhi.w	800d35a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cdac:	2300      	movs	r3, #0
 800cdae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdb0:	4b28      	ldr	r3, [pc, #160]	; (800ce54 <tcp_input+0x2bc>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	61fb      	str	r3, [r7, #28]
 800cdb6:	e09d      	b.n	800cef4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	7d1b      	ldrb	r3, [r3, #20]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d105      	bne.n	800cdcc <tcp_input+0x234>
 800cdc0:	4b15      	ldr	r3, [pc, #84]	; (800ce18 <tcp_input+0x280>)
 800cdc2:	22fb      	movs	r2, #251	; 0xfb
 800cdc4:	4924      	ldr	r1, [pc, #144]	; (800ce58 <tcp_input+0x2c0>)
 800cdc6:	4816      	ldr	r0, [pc, #88]	; (800ce20 <tcp_input+0x288>)
 800cdc8:	f007 fa66 	bl	8014298 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	7d1b      	ldrb	r3, [r3, #20]
 800cdd0:	2b0a      	cmp	r3, #10
 800cdd2:	d105      	bne.n	800cde0 <tcp_input+0x248>
 800cdd4:	4b10      	ldr	r3, [pc, #64]	; (800ce18 <tcp_input+0x280>)
 800cdd6:	22fc      	movs	r2, #252	; 0xfc
 800cdd8:	4920      	ldr	r1, [pc, #128]	; (800ce5c <tcp_input+0x2c4>)
 800cdda:	4811      	ldr	r0, [pc, #68]	; (800ce20 <tcp_input+0x288>)
 800cddc:	f007 fa5c 	bl	8014298 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	7d1b      	ldrb	r3, [r3, #20]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d105      	bne.n	800cdf4 <tcp_input+0x25c>
 800cde8:	4b0b      	ldr	r3, [pc, #44]	; (800ce18 <tcp_input+0x280>)
 800cdea:	22fd      	movs	r2, #253	; 0xfd
 800cdec:	491c      	ldr	r1, [pc, #112]	; (800ce60 <tcp_input+0x2c8>)
 800cdee:	480c      	ldr	r0, [pc, #48]	; (800ce20 <tcp_input+0x288>)
 800cdf0:	f007 fa52 	bl	8014298 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	7a1b      	ldrb	r3, [r3, #8]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d033      	beq.n	800ce64 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	7a1a      	ldrb	r2, [r3, #8]
 800ce00:	4b09      	ldr	r3, [pc, #36]	; (800ce28 <tcp_input+0x290>)
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce08:	3301      	adds	r3, #1
 800ce0a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d029      	beq.n	800ce64 <tcp_input+0x2cc>
      prev = pcb;
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	61bb      	str	r3, [r7, #24]
      continue;
 800ce14:	e06b      	b.n	800ceee <tcp_input+0x356>
 800ce16:	bf00      	nop
 800ce18:	08017030 	.word	0x08017030
 800ce1c:	08017064 	.word	0x08017064
 800ce20:	0801707c 	.word	0x0801707c
 800ce24:	200042ac 	.word	0x200042ac
 800ce28:	200075a8 	.word	0x200075a8
 800ce2c:	200042b0 	.word	0x200042b0
 800ce30:	200042b4 	.word	0x200042b4
 800ce34:	200042b2 	.word	0x200042b2
 800ce38:	080170a4 	.word	0x080170a4
 800ce3c:	080170b4 	.word	0x080170b4
 800ce40:	080170c0 	.word	0x080170c0
 800ce44:	200042bc 	.word	0x200042bc
 800ce48:	200042c0 	.word	0x200042c0
 800ce4c:	200042c8 	.word	0x200042c8
 800ce50:	200042c6 	.word	0x200042c6
 800ce54:	2000acbc 	.word	0x2000acbc
 800ce58:	080170e0 	.word	0x080170e0
 800ce5c:	08017108 	.word	0x08017108
 800ce60:	08017134 	.word	0x08017134
    }

    if (pcb->remote_port == tcphdr->src &&
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	8b1a      	ldrh	r2, [r3, #24]
 800ce68:	4b94      	ldr	r3, [pc, #592]	; (800d0bc <tcp_input+0x524>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	881b      	ldrh	r3, [r3, #0]
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d13a      	bne.n	800ceea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	8ada      	ldrh	r2, [r3, #22]
 800ce78:	4b90      	ldr	r3, [pc, #576]	; (800d0bc <tcp_input+0x524>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	885b      	ldrh	r3, [r3, #2]
 800ce7e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d132      	bne.n	800ceea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	4b8d      	ldr	r3, [pc, #564]	; (800d0c0 <tcp_input+0x528>)
 800ce8a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d12c      	bne.n	800ceea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	4b8a      	ldr	r3, [pc, #552]	; (800d0c0 <tcp_input+0x528>)
 800ce96:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d126      	bne.n	800ceea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	69fa      	ldr	r2, [r7, #28]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d106      	bne.n	800ceb4 <tcp_input+0x31c>
 800cea6:	4b87      	ldr	r3, [pc, #540]	; (800d0c4 <tcp_input+0x52c>)
 800cea8:	f240 120d 	movw	r2, #269	; 0x10d
 800ceac:	4986      	ldr	r1, [pc, #536]	; (800d0c8 <tcp_input+0x530>)
 800ceae:	4887      	ldr	r0, [pc, #540]	; (800d0cc <tcp_input+0x534>)
 800ceb0:	f007 f9f2 	bl	8014298 <iprintf>
      if (prev != NULL) {
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00a      	beq.n	800ced0 <tcp_input+0x338>
        prev->next = pcb->next;
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	68da      	ldr	r2, [r3, #12]
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cec2:	4b83      	ldr	r3, [pc, #524]	; (800d0d0 <tcp_input+0x538>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ceca:	4a81      	ldr	r2, [pc, #516]	; (800d0d0 <tcp_input+0x538>)
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	69fa      	ldr	r2, [r7, #28]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d111      	bne.n	800cefe <tcp_input+0x366>
 800ceda:	4b7a      	ldr	r3, [pc, #488]	; (800d0c4 <tcp_input+0x52c>)
 800cedc:	f240 1215 	movw	r2, #277	; 0x115
 800cee0:	497c      	ldr	r1, [pc, #496]	; (800d0d4 <tcp_input+0x53c>)
 800cee2:	487a      	ldr	r0, [pc, #488]	; (800d0cc <tcp_input+0x534>)
 800cee4:	f007 f9d8 	bl	8014298 <iprintf>
      break;
 800cee8:	e009      	b.n	800cefe <tcp_input+0x366>
    }
    prev = pcb;
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	61fb      	str	r3, [r7, #28]
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f47f af5e 	bne.w	800cdb8 <tcp_input+0x220>
 800cefc:	e000      	b.n	800cf00 <tcp_input+0x368>
      break;
 800cefe:	bf00      	nop
  }

  if (pcb == NULL) {
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f040 8095 	bne.w	800d032 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf08:	4b73      	ldr	r3, [pc, #460]	; (800d0d8 <tcp_input+0x540>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	61fb      	str	r3, [r7, #28]
 800cf0e:	e03f      	b.n	800cf90 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	7d1b      	ldrb	r3, [r3, #20]
 800cf14:	2b0a      	cmp	r3, #10
 800cf16:	d006      	beq.n	800cf26 <tcp_input+0x38e>
 800cf18:	4b6a      	ldr	r3, [pc, #424]	; (800d0c4 <tcp_input+0x52c>)
 800cf1a:	f240 121f 	movw	r2, #287	; 0x11f
 800cf1e:	496f      	ldr	r1, [pc, #444]	; (800d0dc <tcp_input+0x544>)
 800cf20:	486a      	ldr	r0, [pc, #424]	; (800d0cc <tcp_input+0x534>)
 800cf22:	f007 f9b9 	bl	8014298 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	7a1b      	ldrb	r3, [r3, #8]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d009      	beq.n	800cf42 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	7a1a      	ldrb	r2, [r3, #8]
 800cf32:	4b63      	ldr	r3, [pc, #396]	; (800d0c0 <tcp_input+0x528>)
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d122      	bne.n	800cf88 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	8b1a      	ldrh	r2, [r3, #24]
 800cf46:	4b5d      	ldr	r3, [pc, #372]	; (800d0bc <tcp_input+0x524>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	881b      	ldrh	r3, [r3, #0]
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d11b      	bne.n	800cf8a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	8ada      	ldrh	r2, [r3, #22]
 800cf56:	4b59      	ldr	r3, [pc, #356]	; (800d0bc <tcp_input+0x524>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	885b      	ldrh	r3, [r3, #2]
 800cf5c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d113      	bne.n	800cf8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	4b56      	ldr	r3, [pc, #344]	; (800d0c0 <tcp_input+0x528>)
 800cf68:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d10d      	bne.n	800cf8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	4b53      	ldr	r3, [pc, #332]	; (800d0c0 <tcp_input+0x528>)
 800cf74:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d107      	bne.n	800cf8a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cf7a:	69f8      	ldr	r0, [r7, #28]
 800cf7c:	f000 fb52 	bl	800d624 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7fd fd11 	bl	800a9a8 <pbuf_free>
        return;
 800cf86:	e1ee      	b.n	800d366 <tcp_input+0x7ce>
        continue;
 800cf88:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	61fb      	str	r3, [r7, #28]
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d1bc      	bne.n	800cf10 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cf96:	2300      	movs	r3, #0
 800cf98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf9a:	4b51      	ldr	r3, [pc, #324]	; (800d0e0 <tcp_input+0x548>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	617b      	str	r3, [r7, #20]
 800cfa0:	e02a      	b.n	800cff8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	7a1b      	ldrb	r3, [r3, #8]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00c      	beq.n	800cfc4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	7a1a      	ldrb	r2, [r3, #8]
 800cfae:	4b44      	ldr	r3, [pc, #272]	; (800d0c0 <tcp_input+0x528>)
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d002      	beq.n	800cfc4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	61bb      	str	r3, [r7, #24]
        continue;
 800cfc2:	e016      	b.n	800cff2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	8ada      	ldrh	r2, [r3, #22]
 800cfc8:	4b3c      	ldr	r3, [pc, #240]	; (800d0bc <tcp_input+0x524>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	885b      	ldrh	r3, [r3, #2]
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d10c      	bne.n	800cfee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	4b39      	ldr	r3, [pc, #228]	; (800d0c0 <tcp_input+0x528>)
 800cfda:	695b      	ldr	r3, [r3, #20]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d00f      	beq.n	800d000 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00d      	beq.n	800d002 <tcp_input+0x46a>
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d009      	beq.n	800d002 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	617b      	str	r3, [r7, #20]
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1d1      	bne.n	800cfa2 <tcp_input+0x40a>
 800cffe:	e000      	b.n	800d002 <tcp_input+0x46a>
            break;
 800d000:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d014      	beq.n	800d032 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00a      	beq.n	800d024 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	68da      	ldr	r2, [r3, #12]
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d016:	4b32      	ldr	r3, [pc, #200]	; (800d0e0 <tcp_input+0x548>)
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d01e:	4a30      	ldr	r2, [pc, #192]	; (800d0e0 <tcp_input+0x548>)
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d024:	6978      	ldr	r0, [r7, #20]
 800d026:	f000 f9ff 	bl	800d428 <tcp_listen_input>
      }
      pbuf_free(p);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7fd fcbc 	bl	800a9a8 <pbuf_free>
      return;
 800d030:	e199      	b.n	800d366 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 8160 	beq.w	800d2fa <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d03a:	4b2a      	ldr	r3, [pc, #168]	; (800d0e4 <tcp_input+0x54c>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	891a      	ldrh	r2, [r3, #8]
 800d044:	4b27      	ldr	r3, [pc, #156]	; (800d0e4 <tcp_input+0x54c>)
 800d046:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d048:	4a26      	ldr	r2, [pc, #152]	; (800d0e4 <tcp_input+0x54c>)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d04e:	4b1b      	ldr	r3, [pc, #108]	; (800d0bc <tcp_input+0x524>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a24      	ldr	r2, [pc, #144]	; (800d0e4 <tcp_input+0x54c>)
 800d054:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d056:	4b24      	ldr	r3, [pc, #144]	; (800d0e8 <tcp_input+0x550>)
 800d058:	2200      	movs	r2, #0
 800d05a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d05c:	4b23      	ldr	r3, [pc, #140]	; (800d0ec <tcp_input+0x554>)
 800d05e:	2200      	movs	r2, #0
 800d060:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d062:	4b23      	ldr	r3, [pc, #140]	; (800d0f0 <tcp_input+0x558>)
 800d064:	2200      	movs	r2, #0
 800d066:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d068:	4b22      	ldr	r3, [pc, #136]	; (800d0f4 <tcp_input+0x55c>)
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	f003 0308 	and.w	r3, r3, #8
 800d070:	2b00      	cmp	r3, #0
 800d072:	d006      	beq.n	800d082 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	7b5b      	ldrb	r3, [r3, #13]
 800d078:	f043 0301 	orr.w	r3, r3, #1
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d086:	2b00      	cmp	r3, #0
 800d088:	d038      	beq.n	800d0fc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d08a:	69f8      	ldr	r0, [r7, #28]
 800d08c:	f7ff f872 	bl	800c174 <tcp_process_refused_data>
 800d090:	4603      	mov	r3, r0
 800d092:	f113 0f0d 	cmn.w	r3, #13
 800d096:	d007      	beq.n	800d0a8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d02d      	beq.n	800d0fc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d0a0:	4b15      	ldr	r3, [pc, #84]	; (800d0f8 <tcp_input+0x560>)
 800d0a2:	881b      	ldrh	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d029      	beq.n	800d0fc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f040 8104 	bne.w	800d2ba <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d0b2:	69f8      	ldr	r0, [r7, #28]
 800d0b4:	f003 fe26 	bl	8010d04 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d0b8:	e0ff      	b.n	800d2ba <tcp_input+0x722>
 800d0ba:	bf00      	nop
 800d0bc:	200042ac 	.word	0x200042ac
 800d0c0:	200075a8 	.word	0x200075a8
 800d0c4:	08017030 	.word	0x08017030
 800d0c8:	0801715c 	.word	0x0801715c
 800d0cc:	0801707c 	.word	0x0801707c
 800d0d0:	2000acbc 	.word	0x2000acbc
 800d0d4:	08017188 	.word	0x08017188
 800d0d8:	2000accc 	.word	0x2000accc
 800d0dc:	080171b4 	.word	0x080171b4
 800d0e0:	2000acc4 	.word	0x2000acc4
 800d0e4:	2000429c 	.word	0x2000429c
 800d0e8:	200042cc 	.word	0x200042cc
 800d0ec:	200042c9 	.word	0x200042c9
 800d0f0:	200042c4 	.word	0x200042c4
 800d0f4:	200042c8 	.word	0x200042c8
 800d0f8:	200042c6 	.word	0x200042c6
      }
    }
    tcp_input_pcb = pcb;
 800d0fc:	4a9b      	ldr	r2, [pc, #620]	; (800d36c <tcp_input+0x7d4>)
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d102:	69f8      	ldr	r0, [r7, #28]
 800d104:	f000 fb0a 	bl	800d71c <tcp_process>
 800d108:	4603      	mov	r3, r0
 800d10a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d10c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d110:	f113 0f0d 	cmn.w	r3, #13
 800d114:	f000 80d3 	beq.w	800d2be <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d118:	4b95      	ldr	r3, [pc, #596]	; (800d370 <tcp_input+0x7d8>)
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	f003 0308 	and.w	r3, r3, #8
 800d120:	2b00      	cmp	r3, #0
 800d122:	d015      	beq.n	800d150 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d008      	beq.n	800d140 <tcp_input+0x5a8>
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d134:	69fa      	ldr	r2, [r7, #28]
 800d136:	6912      	ldr	r2, [r2, #16]
 800d138:	f06f 010d 	mvn.w	r1, #13
 800d13c:	4610      	mov	r0, r2
 800d13e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d140:	69f9      	ldr	r1, [r7, #28]
 800d142:	488c      	ldr	r0, [pc, #560]	; (800d374 <tcp_input+0x7dc>)
 800d144:	f7ff fbb0 	bl	800c8a8 <tcp_pcb_remove>
        tcp_free(pcb);
 800d148:	69f8      	ldr	r0, [r7, #28]
 800d14a:	f7fd fed9 	bl	800af00 <tcp_free>
 800d14e:	e0c1      	b.n	800d2d4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d150:	2300      	movs	r3, #0
 800d152:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d154:	4b88      	ldr	r3, [pc, #544]	; (800d378 <tcp_input+0x7e0>)
 800d156:	881b      	ldrh	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d01d      	beq.n	800d198 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d15c:	4b86      	ldr	r3, [pc, #536]	; (800d378 <tcp_input+0x7e0>)
 800d15e:	881b      	ldrh	r3, [r3, #0]
 800d160:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00a      	beq.n	800d182 <tcp_input+0x5ea>
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d172:	69fa      	ldr	r2, [r7, #28]
 800d174:	6910      	ldr	r0, [r2, #16]
 800d176:	89fa      	ldrh	r2, [r7, #14]
 800d178:	69f9      	ldr	r1, [r7, #28]
 800d17a:	4798      	blx	r3
 800d17c:	4603      	mov	r3, r0
 800d17e:	74fb      	strb	r3, [r7, #19]
 800d180:	e001      	b.n	800d186 <tcp_input+0x5ee>
 800d182:	2300      	movs	r3, #0
 800d184:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d186:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d18a:	f113 0f0d 	cmn.w	r3, #13
 800d18e:	f000 8098 	beq.w	800d2c2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d192:	4b79      	ldr	r3, [pc, #484]	; (800d378 <tcp_input+0x7e0>)
 800d194:	2200      	movs	r2, #0
 800d196:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d198:	69f8      	ldr	r0, [r7, #28]
 800d19a:	f000 f905 	bl	800d3a8 <tcp_input_delayed_close>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f040 8090 	bne.w	800d2c6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d1a6:	4b75      	ldr	r3, [pc, #468]	; (800d37c <tcp_input+0x7e4>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d041      	beq.n	800d232 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d006      	beq.n	800d1c4 <tcp_input+0x62c>
 800d1b6:	4b72      	ldr	r3, [pc, #456]	; (800d380 <tcp_input+0x7e8>)
 800d1b8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d1bc:	4971      	ldr	r1, [pc, #452]	; (800d384 <tcp_input+0x7ec>)
 800d1be:	4872      	ldr	r0, [pc, #456]	; (800d388 <tcp_input+0x7f0>)
 800d1c0:	f007 f86a 	bl	8014298 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	8b5b      	ldrh	r3, [r3, #26]
 800d1c8:	f003 0310 	and.w	r3, r3, #16
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d008      	beq.n	800d1e2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d1d0:	4b6a      	ldr	r3, [pc, #424]	; (800d37c <tcp_input+0x7e4>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7fd fbe7 	bl	800a9a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d1da:	69f8      	ldr	r0, [r7, #28]
 800d1dc:	f7fe f9ca 	bl	800b574 <tcp_abort>
            goto aborted;
 800d1e0:	e078      	b.n	800d2d4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00c      	beq.n	800d206 <tcp_input+0x66e>
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	6918      	ldr	r0, [r3, #16]
 800d1f6:	4b61      	ldr	r3, [pc, #388]	; (800d37c <tcp_input+0x7e4>)
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	69f9      	ldr	r1, [r7, #28]
 800d1fe:	47a0      	blx	r4
 800d200:	4603      	mov	r3, r0
 800d202:	74fb      	strb	r3, [r7, #19]
 800d204:	e008      	b.n	800d218 <tcp_input+0x680>
 800d206:	4b5d      	ldr	r3, [pc, #372]	; (800d37c <tcp_input+0x7e4>)
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	2300      	movs	r3, #0
 800d20c:	69f9      	ldr	r1, [r7, #28]
 800d20e:	2000      	movs	r0, #0
 800d210:	f7ff f884 	bl	800c31c <tcp_recv_null>
 800d214:	4603      	mov	r3, r0
 800d216:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d218:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d21c:	f113 0f0d 	cmn.w	r3, #13
 800d220:	d053      	beq.n	800d2ca <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d222:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d003      	beq.n	800d232 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d22a:	4b54      	ldr	r3, [pc, #336]	; (800d37c <tcp_input+0x7e4>)
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d232:	4b4f      	ldr	r3, [pc, #316]	; (800d370 <tcp_input+0x7d8>)
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	f003 0320 	and.w	r3, r3, #32
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d030      	beq.n	800d2a0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d242:	2b00      	cmp	r3, #0
 800d244:	d009      	beq.n	800d25a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d24a:	7b5a      	ldrb	r2, [r3, #13]
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d250:	f042 0220 	orr.w	r2, r2, #32
 800d254:	b2d2      	uxtb	r2, r2
 800d256:	735a      	strb	r2, [r3, #13]
 800d258:	e022      	b.n	800d2a0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d25e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d262:	d005      	beq.n	800d270 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d268:	3301      	adds	r3, #1
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00b      	beq.n	800d292 <tcp_input+0x6fa>
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	6918      	ldr	r0, [r3, #16]
 800d284:	2300      	movs	r3, #0
 800d286:	2200      	movs	r2, #0
 800d288:	69f9      	ldr	r1, [r7, #28]
 800d28a:	47a0      	blx	r4
 800d28c:	4603      	mov	r3, r0
 800d28e:	74fb      	strb	r3, [r7, #19]
 800d290:	e001      	b.n	800d296 <tcp_input+0x6fe>
 800d292:	2300      	movs	r3, #0
 800d294:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d296:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d29a:	f113 0f0d 	cmn.w	r3, #13
 800d29e:	d016      	beq.n	800d2ce <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d2a0:	4b32      	ldr	r3, [pc, #200]	; (800d36c <tcp_input+0x7d4>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d2a6:	69f8      	ldr	r0, [r7, #28]
 800d2a8:	f000 f87e 	bl	800d3a8 <tcp_input_delayed_close>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d10f      	bne.n	800d2d2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d2b2:	69f8      	ldr	r0, [r7, #28]
 800d2b4:	f002 ff10 	bl	80100d8 <tcp_output>
 800d2b8:	e00c      	b.n	800d2d4 <tcp_input+0x73c>
        goto aborted;
 800d2ba:	bf00      	nop
 800d2bc:	e00a      	b.n	800d2d4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d2be:	bf00      	nop
 800d2c0:	e008      	b.n	800d2d4 <tcp_input+0x73c>
              goto aborted;
 800d2c2:	bf00      	nop
 800d2c4:	e006      	b.n	800d2d4 <tcp_input+0x73c>
          goto aborted;
 800d2c6:	bf00      	nop
 800d2c8:	e004      	b.n	800d2d4 <tcp_input+0x73c>
            goto aborted;
 800d2ca:	bf00      	nop
 800d2cc:	e002      	b.n	800d2d4 <tcp_input+0x73c>
              goto aborted;
 800d2ce:	bf00      	nop
 800d2d0:	e000      	b.n	800d2d4 <tcp_input+0x73c>
          goto aborted;
 800d2d2:	bf00      	nop
    tcp_input_pcb = NULL;
 800d2d4:	4b25      	ldr	r3, [pc, #148]	; (800d36c <tcp_input+0x7d4>)
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d2da:	4b28      	ldr	r3, [pc, #160]	; (800d37c <tcp_input+0x7e4>)
 800d2dc:	2200      	movs	r2, #0
 800d2de:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d2e0:	4b2a      	ldr	r3, [pc, #168]	; (800d38c <tcp_input+0x7f4>)
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d03d      	beq.n	800d364 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800d2e8:	4b28      	ldr	r3, [pc, #160]	; (800d38c <tcp_input+0x7f4>)
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fd fb5b 	bl	800a9a8 <pbuf_free>
      inseg.p = NULL;
 800d2f2:	4b26      	ldr	r3, [pc, #152]	; (800d38c <tcp_input+0x7f4>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d2f8:	e034      	b.n	800d364 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d2fa:	4b25      	ldr	r3, [pc, #148]	; (800d390 <tcp_input+0x7f8>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	899b      	ldrh	r3, [r3, #12]
 800d300:	b29b      	uxth	r3, r3
 800d302:	4618      	mov	r0, r3
 800d304:	f7fb ffa8 	bl	8009258 <lwip_htons>
 800d308:	4603      	mov	r3, r0
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	f003 0304 	and.w	r3, r3, #4
 800d310:	2b00      	cmp	r3, #0
 800d312:	d118      	bne.n	800d346 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d314:	4b1f      	ldr	r3, [pc, #124]	; (800d394 <tcp_input+0x7fc>)
 800d316:	6819      	ldr	r1, [r3, #0]
 800d318:	4b1f      	ldr	r3, [pc, #124]	; (800d398 <tcp_input+0x800>)
 800d31a:	881b      	ldrh	r3, [r3, #0]
 800d31c:	461a      	mov	r2, r3
 800d31e:	4b1f      	ldr	r3, [pc, #124]	; (800d39c <tcp_input+0x804>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d324:	4b1a      	ldr	r3, [pc, #104]	; (800d390 <tcp_input+0x7f8>)
 800d326:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d328:	885b      	ldrh	r3, [r3, #2]
 800d32a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d32c:	4a18      	ldr	r2, [pc, #96]	; (800d390 <tcp_input+0x7f8>)
 800d32e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d330:	8812      	ldrh	r2, [r2, #0]
 800d332:	b292      	uxth	r2, r2
 800d334:	9202      	str	r2, [sp, #8]
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	4b19      	ldr	r3, [pc, #100]	; (800d3a0 <tcp_input+0x808>)
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	4b19      	ldr	r3, [pc, #100]	; (800d3a4 <tcp_input+0x80c>)
 800d33e:	4602      	mov	r2, r0
 800d340:	2000      	movs	r0, #0
 800d342:	f003 fc8d 	bl	8010c60 <tcp_rst>
    pbuf_free(p);
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7fd fb2e 	bl	800a9a8 <pbuf_free>
  return;
 800d34c:	e00a      	b.n	800d364 <tcp_input+0x7cc>
    goto dropped;
 800d34e:	bf00      	nop
 800d350:	e004      	b.n	800d35c <tcp_input+0x7c4>
dropped:
 800d352:	bf00      	nop
 800d354:	e002      	b.n	800d35c <tcp_input+0x7c4>
      goto dropped;
 800d356:	bf00      	nop
 800d358:	e000      	b.n	800d35c <tcp_input+0x7c4>
      goto dropped;
 800d35a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7fd fb23 	bl	800a9a8 <pbuf_free>
 800d362:	e000      	b.n	800d366 <tcp_input+0x7ce>
  return;
 800d364:	bf00      	nop
}
 800d366:	3724      	adds	r7, #36	; 0x24
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd90      	pop	{r4, r7, pc}
 800d36c:	2000acd0 	.word	0x2000acd0
 800d370:	200042c9 	.word	0x200042c9
 800d374:	2000acbc 	.word	0x2000acbc
 800d378:	200042c4 	.word	0x200042c4
 800d37c:	200042cc 	.word	0x200042cc
 800d380:	08017030 	.word	0x08017030
 800d384:	080171e4 	.word	0x080171e4
 800d388:	0801707c 	.word	0x0801707c
 800d38c:	2000429c 	.word	0x2000429c
 800d390:	200042ac 	.word	0x200042ac
 800d394:	200042c0 	.word	0x200042c0
 800d398:	200042c6 	.word	0x200042c6
 800d39c:	200042bc 	.word	0x200042bc
 800d3a0:	200075b8 	.word	0x200075b8
 800d3a4:	200075bc 	.word	0x200075bc

0800d3a8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d106      	bne.n	800d3c4 <tcp_input_delayed_close+0x1c>
 800d3b6:	4b17      	ldr	r3, [pc, #92]	; (800d414 <tcp_input_delayed_close+0x6c>)
 800d3b8:	f240 225a 	movw	r2, #602	; 0x25a
 800d3bc:	4916      	ldr	r1, [pc, #88]	; (800d418 <tcp_input_delayed_close+0x70>)
 800d3be:	4817      	ldr	r0, [pc, #92]	; (800d41c <tcp_input_delayed_close+0x74>)
 800d3c0:	f006 ff6a 	bl	8014298 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d3c4:	4b16      	ldr	r3, [pc, #88]	; (800d420 <tcp_input_delayed_close+0x78>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	f003 0310 	and.w	r3, r3, #16
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d01c      	beq.n	800d40a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	8b5b      	ldrh	r3, [r3, #26]
 800d3d4:	f003 0310 	and.w	r3, r3, #16
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10d      	bne.n	800d3f8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d008      	beq.n	800d3f8 <tcp_input_delayed_close+0x50>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	6912      	ldr	r2, [r2, #16]
 800d3f0:	f06f 010e 	mvn.w	r1, #14
 800d3f4:	4610      	mov	r0, r2
 800d3f6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d3f8:	6879      	ldr	r1, [r7, #4]
 800d3fa:	480a      	ldr	r0, [pc, #40]	; (800d424 <tcp_input_delayed_close+0x7c>)
 800d3fc:	f7ff fa54 	bl	800c8a8 <tcp_pcb_remove>
    tcp_free(pcb);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7fd fd7d 	bl	800af00 <tcp_free>
    return 1;
 800d406:	2301      	movs	r3, #1
 800d408:	e000      	b.n	800d40c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	08017030 	.word	0x08017030
 800d418:	08017200 	.word	0x08017200
 800d41c:	0801707c 	.word	0x0801707c
 800d420:	200042c9 	.word	0x200042c9
 800d424:	2000acbc 	.word	0x2000acbc

0800d428 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d428:	b590      	push	{r4, r7, lr}
 800d42a:	b08b      	sub	sp, #44	; 0x2c
 800d42c:	af04      	add	r7, sp, #16
 800d42e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d430:	4b6f      	ldr	r3, [pc, #444]	; (800d5f0 <tcp_listen_input+0x1c8>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	f003 0304 	and.w	r3, r3, #4
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f040 80d3 	bne.w	800d5e4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d106      	bne.n	800d452 <tcp_listen_input+0x2a>
 800d444:	4b6b      	ldr	r3, [pc, #428]	; (800d5f4 <tcp_listen_input+0x1cc>)
 800d446:	f240 2281 	movw	r2, #641	; 0x281
 800d44a:	496b      	ldr	r1, [pc, #428]	; (800d5f8 <tcp_listen_input+0x1d0>)
 800d44c:	486b      	ldr	r0, [pc, #428]	; (800d5fc <tcp_listen_input+0x1d4>)
 800d44e:	f006 ff23 	bl	8014298 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d452:	4b67      	ldr	r3, [pc, #412]	; (800d5f0 <tcp_listen_input+0x1c8>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	f003 0310 	and.w	r3, r3, #16
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d019      	beq.n	800d492 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d45e:	4b68      	ldr	r3, [pc, #416]	; (800d600 <tcp_listen_input+0x1d8>)
 800d460:	6819      	ldr	r1, [r3, #0]
 800d462:	4b68      	ldr	r3, [pc, #416]	; (800d604 <tcp_listen_input+0x1dc>)
 800d464:	881b      	ldrh	r3, [r3, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	4b67      	ldr	r3, [pc, #412]	; (800d608 <tcp_listen_input+0x1e0>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d46e:	4b67      	ldr	r3, [pc, #412]	; (800d60c <tcp_listen_input+0x1e4>)
 800d470:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d472:	885b      	ldrh	r3, [r3, #2]
 800d474:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d476:	4a65      	ldr	r2, [pc, #404]	; (800d60c <tcp_listen_input+0x1e4>)
 800d478:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d47a:	8812      	ldrh	r2, [r2, #0]
 800d47c:	b292      	uxth	r2, r2
 800d47e:	9202      	str	r2, [sp, #8]
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	4b63      	ldr	r3, [pc, #396]	; (800d610 <tcp_listen_input+0x1e8>)
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	4b63      	ldr	r3, [pc, #396]	; (800d614 <tcp_listen_input+0x1ec>)
 800d488:	4602      	mov	r2, r0
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f003 fbe8 	bl	8010c60 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d490:	e0aa      	b.n	800d5e8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800d492:	4b57      	ldr	r3, [pc, #348]	; (800d5f0 <tcp_listen_input+0x1c8>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	f003 0302 	and.w	r3, r3, #2
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 80a4 	beq.w	800d5e8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	7d5b      	ldrb	r3, [r3, #21]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7ff f85d 	bl	800c564 <tcp_alloc>
 800d4aa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d111      	bne.n	800d4d6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	699b      	ldr	r3, [r3, #24]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <tcp_listen_input+0xa8>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	699b      	ldr	r3, [r3, #24]
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	6910      	ldr	r0, [r2, #16]
 800d4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	4798      	blx	r3
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	73bb      	strb	r3, [r7, #14]
      return;
 800d4ce:	e08c      	b.n	800d5ea <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d4d0:	23f0      	movs	r3, #240	; 0xf0
 800d4d2:	73bb      	strb	r3, [r7, #14]
      return;
 800d4d4:	e089      	b.n	800d5ea <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d4d6:	4b50      	ldr	r3, [pc, #320]	; (800d618 <tcp_listen_input+0x1f0>)
 800d4d8:	695a      	ldr	r2, [r3, #20]
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d4de:	4b4e      	ldr	r3, [pc, #312]	; (800d618 <tcp_listen_input+0x1f0>)
 800d4e0:	691a      	ldr	r2, [r3, #16]
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	8ada      	ldrh	r2, [r3, #22]
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d4ee:	4b47      	ldr	r3, [pc, #284]	; (800d60c <tcp_listen_input+0x1e4>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	881b      	ldrh	r3, [r3, #0]
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	2203      	movs	r2, #3
 800d4fe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d500:	4b41      	ldr	r3, [pc, #260]	; (800d608 <tcp_listen_input+0x1e0>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	1c5a      	adds	r2, r3, #1
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d512:	6978      	ldr	r0, [r7, #20]
 800d514:	f7ff fa5c 	bl	800c9d0 <tcp_next_iss>
 800d518:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	693a      	ldr	r2, [r7, #16]
 800d524:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	693a      	ldr	r2, [r7, #16]
 800d52a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d532:	4b35      	ldr	r3, [pc, #212]	; (800d608 <tcp_listen_input+0x1e0>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	1e5a      	subs	r2, r3, #1
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	691a      	ldr	r2, [r3, #16]
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	7a5b      	ldrb	r3, [r3, #9]
 800d54e:	f003 030c 	and.w	r3, r3, #12
 800d552:	b2da      	uxtb	r2, r3
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	7a1a      	ldrb	r2, [r3, #8]
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d560:	4b2e      	ldr	r3, [pc, #184]	; (800d61c <tcp_listen_input+0x1f4>)
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	60da      	str	r2, [r3, #12]
 800d568:	4a2c      	ldr	r2, [pc, #176]	; (800d61c <tcp_listen_input+0x1f4>)
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	f003 fd39 	bl	8010fe4 <tcp_timer_needed>
 800d572:	4b2b      	ldr	r3, [pc, #172]	; (800d620 <tcp_listen_input+0x1f8>)
 800d574:	2201      	movs	r2, #1
 800d576:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d578:	6978      	ldr	r0, [r7, #20]
 800d57a:	f001 fd8f 	bl	800f09c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d57e:	4b23      	ldr	r3, [pc, #140]	; (800d60c <tcp_listen_input+0x1e4>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	89db      	ldrh	r3, [r3, #14]
 800d584:	b29a      	uxth	r2, r3
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	3304      	adds	r3, #4
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f005 fa71 	bl	8012a88 <ip4_route>
 800d5a6:	4601      	mov	r1, r0
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	3304      	adds	r3, #4
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f7ff fa34 	bl	800ca1c <tcp_eff_send_mss_netif>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d5bc:	2112      	movs	r1, #18
 800d5be:	6978      	ldr	r0, [r7, #20]
 800d5c0:	f002 fc9c 	bl	800fefc <tcp_enqueue_flags>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d004      	beq.n	800d5da <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	6978      	ldr	r0, [r7, #20]
 800d5d4:	f7fd ff10 	bl	800b3f8 <tcp_abandon>
      return;
 800d5d8:	e007      	b.n	800d5ea <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800d5da:	6978      	ldr	r0, [r7, #20]
 800d5dc:	f002 fd7c 	bl	80100d8 <tcp_output>
  return;
 800d5e0:	bf00      	nop
 800d5e2:	e001      	b.n	800d5e8 <tcp_listen_input+0x1c0>
    return;
 800d5e4:	bf00      	nop
 800d5e6:	e000      	b.n	800d5ea <tcp_listen_input+0x1c2>
  return;
 800d5e8:	bf00      	nop
}
 800d5ea:	371c      	adds	r7, #28
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd90      	pop	{r4, r7, pc}
 800d5f0:	200042c8 	.word	0x200042c8
 800d5f4:	08017030 	.word	0x08017030
 800d5f8:	08017228 	.word	0x08017228
 800d5fc:	0801707c 	.word	0x0801707c
 800d600:	200042c0 	.word	0x200042c0
 800d604:	200042c6 	.word	0x200042c6
 800d608:	200042bc 	.word	0x200042bc
 800d60c:	200042ac 	.word	0x200042ac
 800d610:	200075b8 	.word	0x200075b8
 800d614:	200075bc 	.word	0x200075bc
 800d618:	200075a8 	.word	0x200075a8
 800d61c:	2000acbc 	.word	0x2000acbc
 800d620:	2000acb8 	.word	0x2000acb8

0800d624 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af04      	add	r7, sp, #16
 800d62a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d62c:	4b30      	ldr	r3, [pc, #192]	; (800d6f0 <tcp_timewait_input+0xcc>)
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	f003 0304 	and.w	r3, r3, #4
 800d634:	2b00      	cmp	r3, #0
 800d636:	d154      	bne.n	800d6e2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d106      	bne.n	800d64c <tcp_timewait_input+0x28>
 800d63e:	4b2d      	ldr	r3, [pc, #180]	; (800d6f4 <tcp_timewait_input+0xd0>)
 800d640:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d644:	492c      	ldr	r1, [pc, #176]	; (800d6f8 <tcp_timewait_input+0xd4>)
 800d646:	482d      	ldr	r0, [pc, #180]	; (800d6fc <tcp_timewait_input+0xd8>)
 800d648:	f006 fe26 	bl	8014298 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d64c:	4b28      	ldr	r3, [pc, #160]	; (800d6f0 <tcp_timewait_input+0xcc>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	f003 0302 	and.w	r3, r3, #2
 800d654:	2b00      	cmp	r3, #0
 800d656:	d02a      	beq.n	800d6ae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d658:	4b29      	ldr	r3, [pc, #164]	; (800d700 <tcp_timewait_input+0xdc>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	2b00      	cmp	r3, #0
 800d664:	db2d      	blt.n	800d6c2 <tcp_timewait_input+0x9e>
 800d666:	4b26      	ldr	r3, [pc, #152]	; (800d700 <tcp_timewait_input+0xdc>)
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66e:	6879      	ldr	r1, [r7, #4]
 800d670:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d672:	440b      	add	r3, r1
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	2b00      	cmp	r3, #0
 800d678:	dc23      	bgt.n	800d6c2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d67a:	4b22      	ldr	r3, [pc, #136]	; (800d704 <tcp_timewait_input+0xe0>)
 800d67c:	6819      	ldr	r1, [r3, #0]
 800d67e:	4b22      	ldr	r3, [pc, #136]	; (800d708 <tcp_timewait_input+0xe4>)
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	461a      	mov	r2, r3
 800d684:	4b1e      	ldr	r3, [pc, #120]	; (800d700 <tcp_timewait_input+0xdc>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d68a:	4b20      	ldr	r3, [pc, #128]	; (800d70c <tcp_timewait_input+0xe8>)
 800d68c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d68e:	885b      	ldrh	r3, [r3, #2]
 800d690:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d692:	4a1e      	ldr	r2, [pc, #120]	; (800d70c <tcp_timewait_input+0xe8>)
 800d694:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d696:	8812      	ldrh	r2, [r2, #0]
 800d698:	b292      	uxth	r2, r2
 800d69a:	9202      	str	r2, [sp, #8]
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	4b1c      	ldr	r3, [pc, #112]	; (800d710 <tcp_timewait_input+0xec>)
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	4b1c      	ldr	r3, [pc, #112]	; (800d714 <tcp_timewait_input+0xf0>)
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f003 fada 	bl	8010c60 <tcp_rst>
      return;
 800d6ac:	e01c      	b.n	800d6e8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800d6ae:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <tcp_timewait_input+0xcc>)
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d003      	beq.n	800d6c2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d6ba:	4b17      	ldr	r3, [pc, #92]	; (800d718 <tcp_timewait_input+0xf4>)
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d6c2:	4b11      	ldr	r3, [pc, #68]	; (800d708 <tcp_timewait_input+0xe4>)
 800d6c4:	881b      	ldrh	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00d      	beq.n	800d6e6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	8b5b      	ldrh	r3, [r3, #26]
 800d6ce:	f043 0302 	orr.w	r3, r3, #2
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f002 fcfd 	bl	80100d8 <tcp_output>
  }
  return;
 800d6de:	bf00      	nop
 800d6e0:	e001      	b.n	800d6e6 <tcp_timewait_input+0xc2>
    return;
 800d6e2:	bf00      	nop
 800d6e4:	e000      	b.n	800d6e8 <tcp_timewait_input+0xc4>
  return;
 800d6e6:	bf00      	nop
}
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	200042c8 	.word	0x200042c8
 800d6f4:	08017030 	.word	0x08017030
 800d6f8:	08017248 	.word	0x08017248
 800d6fc:	0801707c 	.word	0x0801707c
 800d700:	200042bc 	.word	0x200042bc
 800d704:	200042c0 	.word	0x200042c0
 800d708:	200042c6 	.word	0x200042c6
 800d70c:	200042ac 	.word	0x200042ac
 800d710:	200075b8 	.word	0x200075b8
 800d714:	200075bc 	.word	0x200075bc
 800d718:	2000acc0 	.word	0x2000acc0

0800d71c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d71c:	b590      	push	{r4, r7, lr}
 800d71e:	b08d      	sub	sp, #52	; 0x34
 800d720:	af04      	add	r7, sp, #16
 800d722:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d724:	2300      	movs	r3, #0
 800d726:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d106      	bne.n	800d740 <tcp_process+0x24>
 800d732:	4ba5      	ldr	r3, [pc, #660]	; (800d9c8 <tcp_process+0x2ac>)
 800d734:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d738:	49a4      	ldr	r1, [pc, #656]	; (800d9cc <tcp_process+0x2b0>)
 800d73a:	48a5      	ldr	r0, [pc, #660]	; (800d9d0 <tcp_process+0x2b4>)
 800d73c:	f006 fdac 	bl	8014298 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d740:	4ba4      	ldr	r3, [pc, #656]	; (800d9d4 <tcp_process+0x2b8>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	f003 0304 	and.w	r3, r3, #4
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d04e      	beq.n	800d7ea <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	7d1b      	ldrb	r3, [r3, #20]
 800d750:	2b02      	cmp	r3, #2
 800d752:	d108      	bne.n	800d766 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d758:	4b9f      	ldr	r3, [pc, #636]	; (800d9d8 <tcp_process+0x2bc>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d123      	bne.n	800d7a8 <tcp_process+0x8c>
        acceptable = 1;
 800d760:	2301      	movs	r3, #1
 800d762:	76fb      	strb	r3, [r7, #27]
 800d764:	e020      	b.n	800d7a8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d76a:	4b9c      	ldr	r3, [pc, #624]	; (800d9dc <tcp_process+0x2c0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d102      	bne.n	800d778 <tcp_process+0x5c>
        acceptable = 1;
 800d772:	2301      	movs	r3, #1
 800d774:	76fb      	strb	r3, [r7, #27]
 800d776:	e017      	b.n	800d7a8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d778:	4b98      	ldr	r3, [pc, #608]	; (800d9dc <tcp_process+0x2c0>)
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	2b00      	cmp	r3, #0
 800d784:	db10      	blt.n	800d7a8 <tcp_process+0x8c>
 800d786:	4b95      	ldr	r3, [pc, #596]	; (800d9dc <tcp_process+0x2c0>)
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78e:	6879      	ldr	r1, [r7, #4]
 800d790:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d792:	440b      	add	r3, r1
 800d794:	1ad3      	subs	r3, r2, r3
 800d796:	2b00      	cmp	r3, #0
 800d798:	dc06      	bgt.n	800d7a8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	8b5b      	ldrh	r3, [r3, #26]
 800d79e:	f043 0302 	orr.w	r3, r3, #2
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d7a8:	7efb      	ldrb	r3, [r7, #27]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d01b      	beq.n	800d7e6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7d1b      	ldrb	r3, [r3, #20]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <tcp_process+0xa8>
 800d7b6:	4b84      	ldr	r3, [pc, #528]	; (800d9c8 <tcp_process+0x2ac>)
 800d7b8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d7bc:	4988      	ldr	r1, [pc, #544]	; (800d9e0 <tcp_process+0x2c4>)
 800d7be:	4884      	ldr	r0, [pc, #528]	; (800d9d0 <tcp_process+0x2b4>)
 800d7c0:	f006 fd6a 	bl	8014298 <iprintf>
      recv_flags |= TF_RESET;
 800d7c4:	4b87      	ldr	r3, [pc, #540]	; (800d9e4 <tcp_process+0x2c8>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	f043 0308 	orr.w	r3, r3, #8
 800d7cc:	b2da      	uxtb	r2, r3
 800d7ce:	4b85      	ldr	r3, [pc, #532]	; (800d9e4 <tcp_process+0x2c8>)
 800d7d0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	8b5b      	ldrh	r3, [r3, #26]
 800d7d6:	f023 0301 	bic.w	r3, r3, #1
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d7e0:	f06f 030d 	mvn.w	r3, #13
 800d7e4:	e37a      	b.n	800dedc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	e378      	b.n	800dedc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d7ea:	4b7a      	ldr	r3, [pc, #488]	; (800d9d4 <tcp_process+0x2b8>)
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	f003 0302 	and.w	r3, r3, #2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d010      	beq.n	800d818 <tcp_process+0xfc>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	7d1b      	ldrb	r3, [r3, #20]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d00c      	beq.n	800d818 <tcp_process+0xfc>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	7d1b      	ldrb	r3, [r3, #20]
 800d802:	2b03      	cmp	r3, #3
 800d804:	d008      	beq.n	800d818 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	8b5b      	ldrh	r3, [r3, #26]
 800d80a:	f043 0302 	orr.w	r3, r3, #2
 800d80e:	b29a      	uxth	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d814:	2300      	movs	r3, #0
 800d816:	e361      	b.n	800dedc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	8b5b      	ldrh	r3, [r3, #26]
 800d81c:	f003 0310 	and.w	r3, r3, #16
 800d820:	2b00      	cmp	r3, #0
 800d822:	d103      	bne.n	800d82c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d824:	4b70      	ldr	r3, [pc, #448]	; (800d9e8 <tcp_process+0x2cc>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f001 fc2d 	bl	800f09c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	7d1b      	ldrb	r3, [r3, #20]
 800d846:	3b02      	subs	r3, #2
 800d848:	2b07      	cmp	r3, #7
 800d84a:	f200 8337 	bhi.w	800debc <tcp_process+0x7a0>
 800d84e:	a201      	add	r2, pc, #4	; (adr r2, 800d854 <tcp_process+0x138>)
 800d850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d854:	0800d875 	.word	0x0800d875
 800d858:	0800daa5 	.word	0x0800daa5
 800d85c:	0800dc1d 	.word	0x0800dc1d
 800d860:	0800dc47 	.word	0x0800dc47
 800d864:	0800dd6b 	.word	0x0800dd6b
 800d868:	0800dc1d 	.word	0x0800dc1d
 800d86c:	0800ddf7 	.word	0x0800ddf7
 800d870:	0800de87 	.word	0x0800de87
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d874:	4b57      	ldr	r3, [pc, #348]	; (800d9d4 <tcp_process+0x2b8>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 0310 	and.w	r3, r3, #16
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f000 80e4 	beq.w	800da4a <tcp_process+0x32e>
 800d882:	4b54      	ldr	r3, [pc, #336]	; (800d9d4 <tcp_process+0x2b8>)
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	f003 0302 	and.w	r3, r3, #2
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 80dd 	beq.w	800da4a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d894:	1c5a      	adds	r2, r3, #1
 800d896:	4b50      	ldr	r3, [pc, #320]	; (800d9d8 <tcp_process+0x2bc>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	f040 80d5 	bne.w	800da4a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d8a0:	4b4e      	ldr	r3, [pc, #312]	; (800d9dc <tcp_process+0x2c0>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	1c5a      	adds	r2, r3, #1
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d8b2:	4b49      	ldr	r3, [pc, #292]	; (800d9d8 <tcp_process+0x2bc>)
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d8ba:	4b4c      	ldr	r3, [pc, #304]	; (800d9ec <tcp_process+0x2d0>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	89db      	ldrh	r3, [r3, #14]
 800d8c0:	b29a      	uxth	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d8d4:	4b41      	ldr	r3, [pc, #260]	; (800d9dc <tcp_process+0x2c0>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	1e5a      	subs	r2, r3, #1
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f005 f8cb 	bl	8012a88 <ip4_route>
 800d8f2:	4601      	mov	r1, r0
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	3304      	adds	r3, #4
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f7ff f88e 	bl	800ca1c <tcp_eff_send_mss_netif>
 800d900:	4603      	mov	r3, r0
 800d902:	461a      	mov	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d90c:	009a      	lsls	r2, r3, #2
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	f241 111c 	movw	r1, #4380	; 0x111c
 800d918:	428b      	cmp	r3, r1
 800d91a:	bf38      	it	cc
 800d91c:	460b      	movcc	r3, r1
 800d91e:	429a      	cmp	r2, r3
 800d920:	d204      	bcs.n	800d92c <tcp_process+0x210>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	b29b      	uxth	r3, r3
 800d92a:	e00d      	b.n	800d948 <tcp_process+0x22c>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	f241 121c 	movw	r2, #4380	; 0x111c
 800d936:	4293      	cmp	r3, r2
 800d938:	d904      	bls.n	800d944 <tcp_process+0x228>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d93e:	005b      	lsls	r3, r3, #1
 800d940:	b29b      	uxth	r3, r3
 800d942:	e001      	b.n	800d948 <tcp_process+0x22c>
 800d944:	f241 131c 	movw	r3, #4380	; 0x111c
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d954:	2b00      	cmp	r3, #0
 800d956:	d106      	bne.n	800d966 <tcp_process+0x24a>
 800d958:	4b1b      	ldr	r3, [pc, #108]	; (800d9c8 <tcp_process+0x2ac>)
 800d95a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d95e:	4924      	ldr	r1, [pc, #144]	; (800d9f0 <tcp_process+0x2d4>)
 800d960:	481b      	ldr	r0, [pc, #108]	; (800d9d0 <tcp_process+0x2b4>)
 800d962:	f006 fc99 	bl	8014298 <iprintf>
        --pcb->snd_queuelen;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d96c:	3b01      	subs	r3, #1
 800d96e:	b29a      	uxth	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d97a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d111      	bne.n	800d9a6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d986:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d106      	bne.n	800d99c <tcp_process+0x280>
 800d98e:	4b0e      	ldr	r3, [pc, #56]	; (800d9c8 <tcp_process+0x2ac>)
 800d990:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d994:	4917      	ldr	r1, [pc, #92]	; (800d9f4 <tcp_process+0x2d8>)
 800d996:	480e      	ldr	r0, [pc, #56]	; (800d9d0 <tcp_process+0x2b4>)
 800d998:	f006 fc7e 	bl	8014298 <iprintf>
          pcb->unsent = rseg->next;
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	66da      	str	r2, [r3, #108]	; 0x6c
 800d9a4:	e003      	b.n	800d9ae <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800d9a6:	69fb      	ldr	r3, [r7, #28]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d9ae:	69f8      	ldr	r0, [r7, #28]
 800d9b0:	f7fe fc70 	bl	800c294 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d11d      	bne.n	800d9f8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9c2:	861a      	strh	r2, [r3, #48]	; 0x30
 800d9c4:	e01f      	b.n	800da06 <tcp_process+0x2ea>
 800d9c6:	bf00      	nop
 800d9c8:	08017030 	.word	0x08017030
 800d9cc:	08017268 	.word	0x08017268
 800d9d0:	0801707c 	.word	0x0801707c
 800d9d4:	200042c8 	.word	0x200042c8
 800d9d8:	200042c0 	.word	0x200042c0
 800d9dc:	200042bc 	.word	0x200042bc
 800d9e0:	08017284 	.word	0x08017284
 800d9e4:	200042c9 	.word	0x200042c9
 800d9e8:	2000acc0 	.word	0x2000acc0
 800d9ec:	200042ac 	.word	0x200042ac
 800d9f0:	080172a4 	.word	0x080172a4
 800d9f4:	080172bc 	.word	0x080172bc
        } else {
          pcb->rtime = 0;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00a      	beq.n	800da26 <tcp_process+0x30a>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	6910      	ldr	r0, [r2, #16]
 800da1a:	2200      	movs	r2, #0
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	4798      	blx	r3
 800da20:	4603      	mov	r3, r0
 800da22:	76bb      	strb	r3, [r7, #26]
 800da24:	e001      	b.n	800da2a <tcp_process+0x30e>
 800da26:	2300      	movs	r3, #0
 800da28:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800da2a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800da2e:	f113 0f0d 	cmn.w	r3, #13
 800da32:	d102      	bne.n	800da3a <tcp_process+0x31e>
          return ERR_ABRT;
 800da34:	f06f 030c 	mvn.w	r3, #12
 800da38:	e250      	b.n	800dedc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	8b5b      	ldrh	r3, [r3, #26]
 800da3e:	f043 0302 	orr.w	r3, r3, #2
 800da42:	b29a      	uxth	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800da48:	e23a      	b.n	800dec0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800da4a:	4b9d      	ldr	r3, [pc, #628]	; (800dcc0 <tcp_process+0x5a4>)
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	f003 0310 	and.w	r3, r3, #16
 800da52:	2b00      	cmp	r3, #0
 800da54:	f000 8234 	beq.w	800dec0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da58:	4b9a      	ldr	r3, [pc, #616]	; (800dcc4 <tcp_process+0x5a8>)
 800da5a:	6819      	ldr	r1, [r3, #0]
 800da5c:	4b9a      	ldr	r3, [pc, #616]	; (800dcc8 <tcp_process+0x5ac>)
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	461a      	mov	r2, r3
 800da62:	4b9a      	ldr	r3, [pc, #616]	; (800dccc <tcp_process+0x5b0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da68:	4b99      	ldr	r3, [pc, #612]	; (800dcd0 <tcp_process+0x5b4>)
 800da6a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da6c:	885b      	ldrh	r3, [r3, #2]
 800da6e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da70:	4a97      	ldr	r2, [pc, #604]	; (800dcd0 <tcp_process+0x5b4>)
 800da72:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da74:	8812      	ldrh	r2, [r2, #0]
 800da76:	b292      	uxth	r2, r2
 800da78:	9202      	str	r2, [sp, #8]
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	4b95      	ldr	r3, [pc, #596]	; (800dcd4 <tcp_process+0x5b8>)
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	4b95      	ldr	r3, [pc, #596]	; (800dcd8 <tcp_process+0x5bc>)
 800da82:	4602      	mov	r2, r0
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f003 f8eb 	bl	8010c60 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da90:	2b05      	cmp	r3, #5
 800da92:	f200 8215 	bhi.w	800dec0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f002 feab 	bl	80107f8 <tcp_rexmit_rto>
      break;
 800daa2:	e20d      	b.n	800dec0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800daa4:	4b86      	ldr	r3, [pc, #536]	; (800dcc0 <tcp_process+0x5a4>)
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	f003 0310 	and.w	r3, r3, #16
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 80a1 	beq.w	800dbf4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dab2:	4b84      	ldr	r3, [pc, #528]	; (800dcc4 <tcp_process+0x5a8>)
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daba:	1ad3      	subs	r3, r2, r3
 800dabc:	3b01      	subs	r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	db7e      	blt.n	800dbc0 <tcp_process+0x4a4>
 800dac2:	4b80      	ldr	r3, [pc, #512]	; (800dcc4 <tcp_process+0x5a8>)
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	2b00      	cmp	r3, #0
 800dace:	dc77      	bgt.n	800dbc0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2204      	movs	r2, #4
 800dad4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d102      	bne.n	800dae4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800dade:	23fa      	movs	r3, #250	; 0xfa
 800dae0:	76bb      	strb	r3, [r7, #26]
 800dae2:	e01d      	b.n	800db20 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d106      	bne.n	800dafc <tcp_process+0x3e0>
 800daee:	4b7b      	ldr	r3, [pc, #492]	; (800dcdc <tcp_process+0x5c0>)
 800daf0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800daf4:	497a      	ldr	r1, [pc, #488]	; (800dce0 <tcp_process+0x5c4>)
 800daf6:	487b      	ldr	r0, [pc, #492]	; (800dce4 <tcp_process+0x5c8>)
 800daf8:	f006 fbce 	bl	8014298 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db00:	699b      	ldr	r3, [r3, #24]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00a      	beq.n	800db1c <tcp_process+0x400>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	6910      	ldr	r0, [r2, #16]
 800db10:	2200      	movs	r2, #0
 800db12:	6879      	ldr	r1, [r7, #4]
 800db14:	4798      	blx	r3
 800db16:	4603      	mov	r3, r0
 800db18:	76bb      	strb	r3, [r7, #26]
 800db1a:	e001      	b.n	800db20 <tcp_process+0x404>
 800db1c:	23f0      	movs	r3, #240	; 0xf0
 800db1e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800db20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00a      	beq.n	800db3e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800db28:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800db2c:	f113 0f0d 	cmn.w	r3, #13
 800db30:	d002      	beq.n	800db38 <tcp_process+0x41c>
              tcp_abort(pcb);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fd fd1e 	bl	800b574 <tcp_abort>
            }
            return ERR_ABRT;
 800db38:	f06f 030c 	mvn.w	r3, #12
 800db3c:	e1ce      	b.n	800dedc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fae0 	bl	800e104 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800db44:	4b68      	ldr	r3, [pc, #416]	; (800dce8 <tcp_process+0x5cc>)
 800db46:	881b      	ldrh	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d005      	beq.n	800db58 <tcp_process+0x43c>
            recv_acked--;
 800db4c:	4b66      	ldr	r3, [pc, #408]	; (800dce8 <tcp_process+0x5cc>)
 800db4e:	881b      	ldrh	r3, [r3, #0]
 800db50:	3b01      	subs	r3, #1
 800db52:	b29a      	uxth	r2, r3
 800db54:	4b64      	ldr	r3, [pc, #400]	; (800dce8 <tcp_process+0x5cc>)
 800db56:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db5c:	009a      	lsls	r2, r3, #2
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db62:	005b      	lsls	r3, r3, #1
 800db64:	f241 111c 	movw	r1, #4380	; 0x111c
 800db68:	428b      	cmp	r3, r1
 800db6a:	bf38      	it	cc
 800db6c:	460b      	movcc	r3, r1
 800db6e:	429a      	cmp	r2, r3
 800db70:	d204      	bcs.n	800db7c <tcp_process+0x460>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	b29b      	uxth	r3, r3
 800db7a:	e00d      	b.n	800db98 <tcp_process+0x47c>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db80:	005b      	lsls	r3, r3, #1
 800db82:	f241 121c 	movw	r2, #4380	; 0x111c
 800db86:	4293      	cmp	r3, r2
 800db88:	d904      	bls.n	800db94 <tcp_process+0x478>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db8e:	005b      	lsls	r3, r3, #1
 800db90:	b29b      	uxth	r3, r3
 800db92:	e001      	b.n	800db98 <tcp_process+0x47c>
 800db94:	f241 131c 	movw	r3, #4380	; 0x111c
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800db9e:	4b53      	ldr	r3, [pc, #332]	; (800dcec <tcp_process+0x5d0>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d037      	beq.n	800dc1a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	8b5b      	ldrh	r3, [r3, #26]
 800dbae:	f043 0302 	orr.w	r3, r3, #2
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2207      	movs	r2, #7
 800dbbc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800dbbe:	e02c      	b.n	800dc1a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbc0:	4b40      	ldr	r3, [pc, #256]	; (800dcc4 <tcp_process+0x5a8>)
 800dbc2:	6819      	ldr	r1, [r3, #0]
 800dbc4:	4b40      	ldr	r3, [pc, #256]	; (800dcc8 <tcp_process+0x5ac>)
 800dbc6:	881b      	ldrh	r3, [r3, #0]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	4b40      	ldr	r3, [pc, #256]	; (800dccc <tcp_process+0x5b0>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbd0:	4b3f      	ldr	r3, [pc, #252]	; (800dcd0 <tcp_process+0x5b4>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbd4:	885b      	ldrh	r3, [r3, #2]
 800dbd6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbd8:	4a3d      	ldr	r2, [pc, #244]	; (800dcd0 <tcp_process+0x5b4>)
 800dbda:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbdc:	8812      	ldrh	r2, [r2, #0]
 800dbde:	b292      	uxth	r2, r2
 800dbe0:	9202      	str	r2, [sp, #8]
 800dbe2:	9301      	str	r3, [sp, #4]
 800dbe4:	4b3b      	ldr	r3, [pc, #236]	; (800dcd4 <tcp_process+0x5b8>)
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	4b3b      	ldr	r3, [pc, #236]	; (800dcd8 <tcp_process+0x5bc>)
 800dbea:	4602      	mov	r2, r0
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f003 f837 	bl	8010c60 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800dbf2:	e167      	b.n	800dec4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800dbf4:	4b32      	ldr	r3, [pc, #200]	; (800dcc0 <tcp_process+0x5a4>)
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	f003 0302 	and.w	r3, r3, #2
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f000 8161 	beq.w	800dec4 <tcp_process+0x7a8>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc06:	1e5a      	subs	r2, r3, #1
 800dc08:	4b30      	ldr	r3, [pc, #192]	; (800dccc <tcp_process+0x5b0>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	f040 8159 	bne.w	800dec4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f002 fe12 	bl	801083c <tcp_rexmit>
      break;
 800dc18:	e154      	b.n	800dec4 <tcp_process+0x7a8>
 800dc1a:	e153      	b.n	800dec4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fa71 	bl	800e104 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800dc22:	4b32      	ldr	r3, [pc, #200]	; (800dcec <tcp_process+0x5d0>)
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	f003 0320 	and.w	r3, r3, #32
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f000 814c 	beq.w	800dec8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	8b5b      	ldrh	r3, [r3, #26]
 800dc34:	f043 0302 	orr.w	r3, r3, #2
 800dc38:	b29a      	uxth	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2207      	movs	r2, #7
 800dc42:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc44:	e140      	b.n	800dec8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 fa5c 	bl	800e104 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dc4c:	4b27      	ldr	r3, [pc, #156]	; (800dcec <tcp_process+0x5d0>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	f003 0320 	and.w	r3, r3, #32
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d071      	beq.n	800dd3c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dc58:	4b19      	ldr	r3, [pc, #100]	; (800dcc0 <tcp_process+0x5a4>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	f003 0310 	and.w	r3, r3, #16
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d060      	beq.n	800dd26 <tcp_process+0x60a>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc68:	4b16      	ldr	r3, [pc, #88]	; (800dcc4 <tcp_process+0x5a8>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d15a      	bne.n	800dd26 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d156      	bne.n	800dd26 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	8b5b      	ldrh	r3, [r3, #26]
 800dc7c:	f043 0302 	orr.w	r3, r3, #2
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7fe fdbe 	bl	800c808 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800dc8c:	4b18      	ldr	r3, [pc, #96]	; (800dcf0 <tcp_process+0x5d4>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d105      	bne.n	800dca2 <tcp_process+0x586>
 800dc96:	4b16      	ldr	r3, [pc, #88]	; (800dcf0 <tcp_process+0x5d4>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	4a14      	ldr	r2, [pc, #80]	; (800dcf0 <tcp_process+0x5d4>)
 800dc9e:	6013      	str	r3, [r2, #0]
 800dca0:	e02e      	b.n	800dd00 <tcp_process+0x5e4>
 800dca2:	4b13      	ldr	r3, [pc, #76]	; (800dcf0 <tcp_process+0x5d4>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	617b      	str	r3, [r7, #20]
 800dca8:	e027      	b.n	800dcfa <tcp_process+0x5de>
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d11f      	bne.n	800dcf4 <tcp_process+0x5d8>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	68da      	ldr	r2, [r3, #12]
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	60da      	str	r2, [r3, #12]
 800dcbc:	e020      	b.n	800dd00 <tcp_process+0x5e4>
 800dcbe:	bf00      	nop
 800dcc0:	200042c8 	.word	0x200042c8
 800dcc4:	200042c0 	.word	0x200042c0
 800dcc8:	200042c6 	.word	0x200042c6
 800dccc:	200042bc 	.word	0x200042bc
 800dcd0:	200042ac 	.word	0x200042ac
 800dcd4:	200075b8 	.word	0x200075b8
 800dcd8:	200075bc 	.word	0x200075bc
 800dcdc:	08017030 	.word	0x08017030
 800dce0:	080172d0 	.word	0x080172d0
 800dce4:	0801707c 	.word	0x0801707c
 800dce8:	200042c4 	.word	0x200042c4
 800dcec:	200042c9 	.word	0x200042c9
 800dcf0:	2000acbc 	.word	0x2000acbc
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	617b      	str	r3, [r7, #20]
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1d4      	bne.n	800dcaa <tcp_process+0x58e>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	60da      	str	r2, [r3, #12]
 800dd06:	4b77      	ldr	r3, [pc, #476]	; (800dee4 <tcp_process+0x7c8>)
 800dd08:	2201      	movs	r2, #1
 800dd0a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	220a      	movs	r2, #10
 800dd10:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800dd12:	4b75      	ldr	r3, [pc, #468]	; (800dee8 <tcp_process+0x7cc>)
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	60da      	str	r2, [r3, #12]
 800dd1a:	4a73      	ldr	r2, [pc, #460]	; (800dee8 <tcp_process+0x7cc>)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	f003 f960 	bl	8010fe4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800dd24:	e0d2      	b.n	800decc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	8b5b      	ldrh	r3, [r3, #26]
 800dd2a:	f043 0302 	orr.w	r3, r3, #2
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2208      	movs	r2, #8
 800dd38:	751a      	strb	r2, [r3, #20]
      break;
 800dd3a:	e0c7      	b.n	800decc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dd3c:	4b6b      	ldr	r3, [pc, #428]	; (800deec <tcp_process+0x7d0>)
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	f003 0310 	and.w	r3, r3, #16
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f000 80c1 	beq.w	800decc <tcp_process+0x7b0>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd4e:	4b68      	ldr	r3, [pc, #416]	; (800def0 <tcp_process+0x7d4>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	f040 80ba 	bne.w	800decc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f040 80b5 	bne.w	800decc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2206      	movs	r2, #6
 800dd66:	751a      	strb	r2, [r3, #20]
      break;
 800dd68:	e0b0      	b.n	800decc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f9ca 	bl	800e104 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dd70:	4b60      	ldr	r3, [pc, #384]	; (800def4 <tcp_process+0x7d8>)
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	f003 0320 	and.w	r3, r3, #32
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f000 80a9 	beq.w	800ded0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	8b5b      	ldrh	r3, [r3, #26]
 800dd82:	f043 0302 	orr.w	r3, r3, #2
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7fe fd3b 	bl	800c808 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dd92:	4b59      	ldr	r3, [pc, #356]	; (800def8 <tcp_process+0x7dc>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d105      	bne.n	800dda8 <tcp_process+0x68c>
 800dd9c:	4b56      	ldr	r3, [pc, #344]	; (800def8 <tcp_process+0x7dc>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	4a55      	ldr	r2, [pc, #340]	; (800def8 <tcp_process+0x7dc>)
 800dda4:	6013      	str	r3, [r2, #0]
 800dda6:	e013      	b.n	800ddd0 <tcp_process+0x6b4>
 800dda8:	4b53      	ldr	r3, [pc, #332]	; (800def8 <tcp_process+0x7dc>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	613b      	str	r3, [r7, #16]
 800ddae:	e00c      	b.n	800ddca <tcp_process+0x6ae>
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d104      	bne.n	800ddc4 <tcp_process+0x6a8>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	68da      	ldr	r2, [r3, #12]
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	60da      	str	r2, [r3, #12]
 800ddc2:	e005      	b.n	800ddd0 <tcp_process+0x6b4>
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	613b      	str	r3, [r7, #16]
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1ef      	bne.n	800ddb0 <tcp_process+0x694>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	60da      	str	r2, [r3, #12]
 800ddd6:	4b43      	ldr	r3, [pc, #268]	; (800dee4 <tcp_process+0x7c8>)
 800ddd8:	2201      	movs	r2, #1
 800ddda:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	220a      	movs	r2, #10
 800dde0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dde2:	4b41      	ldr	r3, [pc, #260]	; (800dee8 <tcp_process+0x7cc>)
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	60da      	str	r2, [r3, #12]
 800ddea:	4a3f      	ldr	r2, [pc, #252]	; (800dee8 <tcp_process+0x7cc>)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6013      	str	r3, [r2, #0]
 800ddf0:	f003 f8f8 	bl	8010fe4 <tcp_timer_needed>
      }
      break;
 800ddf4:	e06c      	b.n	800ded0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 f984 	bl	800e104 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ddfc:	4b3b      	ldr	r3, [pc, #236]	; (800deec <tcp_process+0x7d0>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	f003 0310 	and.w	r3, r3, #16
 800de04:	2b00      	cmp	r3, #0
 800de06:	d065      	beq.n	800ded4 <tcp_process+0x7b8>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de0c:	4b38      	ldr	r3, [pc, #224]	; (800def0 <tcp_process+0x7d4>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	429a      	cmp	r2, r3
 800de12:	d15f      	bne.n	800ded4 <tcp_process+0x7b8>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d15b      	bne.n	800ded4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f7fe fcf3 	bl	800c808 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800de22:	4b35      	ldr	r3, [pc, #212]	; (800def8 <tcp_process+0x7dc>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d105      	bne.n	800de38 <tcp_process+0x71c>
 800de2c:	4b32      	ldr	r3, [pc, #200]	; (800def8 <tcp_process+0x7dc>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	4a31      	ldr	r2, [pc, #196]	; (800def8 <tcp_process+0x7dc>)
 800de34:	6013      	str	r3, [r2, #0]
 800de36:	e013      	b.n	800de60 <tcp_process+0x744>
 800de38:	4b2f      	ldr	r3, [pc, #188]	; (800def8 <tcp_process+0x7dc>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	60fb      	str	r3, [r7, #12]
 800de3e:	e00c      	b.n	800de5a <tcp_process+0x73e>
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	429a      	cmp	r2, r3
 800de48:	d104      	bne.n	800de54 <tcp_process+0x738>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	68da      	ldr	r2, [r3, #12]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	60da      	str	r2, [r3, #12]
 800de52:	e005      	b.n	800de60 <tcp_process+0x744>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	60fb      	str	r3, [r7, #12]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d1ef      	bne.n	800de40 <tcp_process+0x724>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	60da      	str	r2, [r3, #12]
 800de66:	4b1f      	ldr	r3, [pc, #124]	; (800dee4 <tcp_process+0x7c8>)
 800de68:	2201      	movs	r2, #1
 800de6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	220a      	movs	r2, #10
 800de70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800de72:	4b1d      	ldr	r3, [pc, #116]	; (800dee8 <tcp_process+0x7cc>)
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	60da      	str	r2, [r3, #12]
 800de7a:	4a1b      	ldr	r2, [pc, #108]	; (800dee8 <tcp_process+0x7cc>)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6013      	str	r3, [r2, #0]
 800de80:	f003 f8b0 	bl	8010fe4 <tcp_timer_needed>
      }
      break;
 800de84:	e026      	b.n	800ded4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f93c 	bl	800e104 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800de8c:	4b17      	ldr	r3, [pc, #92]	; (800deec <tcp_process+0x7d0>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	f003 0310 	and.w	r3, r3, #16
 800de94:	2b00      	cmp	r3, #0
 800de96:	d01f      	beq.n	800ded8 <tcp_process+0x7bc>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de9c:	4b14      	ldr	r3, [pc, #80]	; (800def0 <tcp_process+0x7d4>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d119      	bne.n	800ded8 <tcp_process+0x7bc>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d115      	bne.n	800ded8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800deac:	4b11      	ldr	r3, [pc, #68]	; (800def4 <tcp_process+0x7d8>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	f043 0310 	orr.w	r3, r3, #16
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	4b0f      	ldr	r3, [pc, #60]	; (800def4 <tcp_process+0x7d8>)
 800deb8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800deba:	e00d      	b.n	800ded8 <tcp_process+0x7bc>
    default:
      break;
 800debc:	bf00      	nop
 800debe:	e00c      	b.n	800deda <tcp_process+0x7be>
      break;
 800dec0:	bf00      	nop
 800dec2:	e00a      	b.n	800deda <tcp_process+0x7be>
      break;
 800dec4:	bf00      	nop
 800dec6:	e008      	b.n	800deda <tcp_process+0x7be>
      break;
 800dec8:	bf00      	nop
 800deca:	e006      	b.n	800deda <tcp_process+0x7be>
      break;
 800decc:	bf00      	nop
 800dece:	e004      	b.n	800deda <tcp_process+0x7be>
      break;
 800ded0:	bf00      	nop
 800ded2:	e002      	b.n	800deda <tcp_process+0x7be>
      break;
 800ded4:	bf00      	nop
 800ded6:	e000      	b.n	800deda <tcp_process+0x7be>
      break;
 800ded8:	bf00      	nop
  }
  return ERR_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3724      	adds	r7, #36	; 0x24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd90      	pop	{r4, r7, pc}
 800dee4:	2000acb8 	.word	0x2000acb8
 800dee8:	2000accc 	.word	0x2000accc
 800deec:	200042c8 	.word	0x200042c8
 800def0:	200042c0 	.word	0x200042c0
 800def4:	200042c9 	.word	0x200042c9
 800def8:	2000acbc 	.word	0x2000acbc

0800defc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800defc:	b590      	push	{r4, r7, lr}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d106      	bne.n	800df1a <tcp_oos_insert_segment+0x1e>
 800df0c:	4b3b      	ldr	r3, [pc, #236]	; (800dffc <tcp_oos_insert_segment+0x100>)
 800df0e:	f240 421f 	movw	r2, #1055	; 0x41f
 800df12:	493b      	ldr	r1, [pc, #236]	; (800e000 <tcp_oos_insert_segment+0x104>)
 800df14:	483b      	ldr	r0, [pc, #236]	; (800e004 <tcp_oos_insert_segment+0x108>)
 800df16:	f006 f9bf 	bl	8014298 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	899b      	ldrh	r3, [r3, #12]
 800df20:	b29b      	uxth	r3, r3
 800df22:	4618      	mov	r0, r3
 800df24:	f7fb f998 	bl	8009258 <lwip_htons>
 800df28:	4603      	mov	r3, r0
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	f003 0301 	and.w	r3, r3, #1
 800df30:	2b00      	cmp	r3, #0
 800df32:	d028      	beq.n	800df86 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800df34:	6838      	ldr	r0, [r7, #0]
 800df36:	f7fe f999 	bl	800c26c <tcp_segs_free>
    next = NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	603b      	str	r3, [r7, #0]
 800df3e:	e056      	b.n	800dfee <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	899b      	ldrh	r3, [r3, #12]
 800df46:	b29b      	uxth	r3, r3
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fb f985 	bl	8009258 <lwip_htons>
 800df4e:	4603      	mov	r3, r0
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00d      	beq.n	800df76 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	899b      	ldrh	r3, [r3, #12]
 800df60:	b29c      	uxth	r4, r3
 800df62:	2001      	movs	r0, #1
 800df64:	f7fb f978 	bl	8009258 <lwip_htons>
 800df68:	4603      	mov	r3, r0
 800df6a:	461a      	mov	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	4322      	orrs	r2, r4
 800df72:	b292      	uxth	r2, r2
 800df74:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f7fe f987 	bl	800c294 <tcp_seg_free>
    while (next &&
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00e      	beq.n	800dfaa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	891b      	ldrh	r3, [r3, #8]
 800df90:	461a      	mov	r2, r3
 800df92:	4b1d      	ldr	r3, [pc, #116]	; (800e008 <tcp_oos_insert_segment+0x10c>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	441a      	add	r2, r3
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	6839      	ldr	r1, [r7, #0]
 800dfa0:	8909      	ldrh	r1, [r1, #8]
 800dfa2:	440b      	add	r3, r1
 800dfa4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	daca      	bge.n	800df40 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d01e      	beq.n	800dfee <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	891b      	ldrh	r3, [r3, #8]
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	4b14      	ldr	r3, [pc, #80]	; (800e008 <tcp_oos_insert_segment+0x10c>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	441a      	add	r2, r3
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	dd12      	ble.n	800dfee <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	4b0d      	ldr	r3, [pc, #52]	; (800e008 <tcp_oos_insert_segment+0x10c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	685a      	ldr	r2, [r3, #4]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	891b      	ldrh	r3, [r3, #8]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	4610      	mov	r0, r2
 800dfea:	f7fc fb57 	bl	800a69c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	601a      	str	r2, [r3, #0]
}
 800dff4:	bf00      	nop
 800dff6:	3714      	adds	r7, #20
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd90      	pop	{r4, r7, pc}
 800dffc:	08017030 	.word	0x08017030
 800e000:	080172f0 	.word	0x080172f0
 800e004:	0801707c 	.word	0x0801707c
 800e008:	200042bc 	.word	0x200042bc

0800e00c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e00c:	b5b0      	push	{r4, r5, r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
 800e018:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e01a:	e03e      	b.n	800e09a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fc fd4a 	bl	800aac4 <pbuf_clen>
 800e030:	4603      	mov	r3, r0
 800e032:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e03a:	8a7a      	ldrh	r2, [r7, #18]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d906      	bls.n	800e04e <tcp_free_acked_segments+0x42>
 800e040:	4b2a      	ldr	r3, [pc, #168]	; (800e0ec <tcp_free_acked_segments+0xe0>)
 800e042:	f240 4257 	movw	r2, #1111	; 0x457
 800e046:	492a      	ldr	r1, [pc, #168]	; (800e0f0 <tcp_free_acked_segments+0xe4>)
 800e048:	482a      	ldr	r0, [pc, #168]	; (800e0f4 <tcp_free_acked_segments+0xe8>)
 800e04a:	f006 f925 	bl	8014298 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e054:	8a7b      	ldrh	r3, [r7, #18]
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	b29a      	uxth	r2, r3
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	891a      	ldrh	r2, [r3, #8]
 800e064:	4b24      	ldr	r3, [pc, #144]	; (800e0f8 <tcp_free_acked_segments+0xec>)
 800e066:	881b      	ldrh	r3, [r3, #0]
 800e068:	4413      	add	r3, r2
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	4b22      	ldr	r3, [pc, #136]	; (800e0f8 <tcp_free_acked_segments+0xec>)
 800e06e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e070:	6978      	ldr	r0, [r7, #20]
 800e072:	f7fe f90f 	bl	800c294 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00c      	beq.n	800e09a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d109      	bne.n	800e09a <tcp_free_acked_segments+0x8e>
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d106      	bne.n	800e09a <tcp_free_acked_segments+0x8e>
 800e08c:	4b17      	ldr	r3, [pc, #92]	; (800e0ec <tcp_free_acked_segments+0xe0>)
 800e08e:	f240 4262 	movw	r2, #1122	; 0x462
 800e092:	491a      	ldr	r1, [pc, #104]	; (800e0fc <tcp_free_acked_segments+0xf0>)
 800e094:	4817      	ldr	r0, [pc, #92]	; (800e0f4 <tcp_free_acked_segments+0xe8>)
 800e096:	f006 f8ff 	bl	8014298 <iprintf>
  while (seg_list != NULL &&
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d020      	beq.n	800e0e2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fb f8eb 	bl	8009282 <lwip_htonl>
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	891b      	ldrh	r3, [r3, #8]
 800e0b2:	461d      	mov	r5, r3
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	899b      	ldrh	r3, [r3, #12]
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fb f8cb 	bl	8009258 <lwip_htons>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	f003 0303 	and.w	r3, r3, #3
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <tcp_free_acked_segments+0xc6>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e000      	b.n	800e0d4 <tcp_free_acked_segments+0xc8>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	442b      	add	r3, r5
 800e0d6:	18e2      	adds	r2, r4, r3
 800e0d8:	4b09      	ldr	r3, [pc, #36]	; (800e100 <tcp_free_acked_segments+0xf4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	dd9c      	ble.n	800e01c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e0e2:	68bb      	ldr	r3, [r7, #8]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3718      	adds	r7, #24
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bdb0      	pop	{r4, r5, r7, pc}
 800e0ec:	08017030 	.word	0x08017030
 800e0f0:	08017318 	.word	0x08017318
 800e0f4:	0801707c 	.word	0x0801707c
 800e0f8:	200042c4 	.word	0x200042c4
 800e0fc:	08017340 	.word	0x08017340
 800e100:	200042c0 	.word	0x200042c0

0800e104 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e104:	b5b0      	push	{r4, r5, r7, lr}
 800e106:	b094      	sub	sp, #80	; 0x50
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d106      	bne.n	800e124 <tcp_receive+0x20>
 800e116:	4ba6      	ldr	r3, [pc, #664]	; (800e3b0 <tcp_receive+0x2ac>)
 800e118:	f240 427b 	movw	r2, #1147	; 0x47b
 800e11c:	49a5      	ldr	r1, [pc, #660]	; (800e3b4 <tcp_receive+0x2b0>)
 800e11e:	48a6      	ldr	r0, [pc, #664]	; (800e3b8 <tcp_receive+0x2b4>)
 800e120:	f006 f8ba 	bl	8014298 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	7d1b      	ldrb	r3, [r3, #20]
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d806      	bhi.n	800e13a <tcp_receive+0x36>
 800e12c:	4ba0      	ldr	r3, [pc, #640]	; (800e3b0 <tcp_receive+0x2ac>)
 800e12e:	f240 427c 	movw	r2, #1148	; 0x47c
 800e132:	49a2      	ldr	r1, [pc, #648]	; (800e3bc <tcp_receive+0x2b8>)
 800e134:	48a0      	ldr	r0, [pc, #640]	; (800e3b8 <tcp_receive+0x2b4>)
 800e136:	f006 f8af 	bl	8014298 <iprintf>

  if (flags & TCP_ACK) {
 800e13a:	4ba1      	ldr	r3, [pc, #644]	; (800e3c0 <tcp_receive+0x2bc>)
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	f003 0310 	and.w	r3, r3, #16
 800e142:	2b00      	cmp	r3, #0
 800e144:	f000 8263 	beq.w	800e60e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e14e:	461a      	mov	r2, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e154:	4413      	add	r3, r2
 800e156:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e15c:	4b99      	ldr	r3, [pc, #612]	; (800e3c4 <tcp_receive+0x2c0>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	2b00      	cmp	r3, #0
 800e164:	db1b      	blt.n	800e19e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e16a:	4b96      	ldr	r3, [pc, #600]	; (800e3c4 <tcp_receive+0x2c0>)
 800e16c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e16e:	429a      	cmp	r2, r3
 800e170:	d106      	bne.n	800e180 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e176:	4b94      	ldr	r3, [pc, #592]	; (800e3c8 <tcp_receive+0x2c4>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	db0e      	blt.n	800e19e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e184:	4b90      	ldr	r3, [pc, #576]	; (800e3c8 <tcp_receive+0x2c4>)
 800e186:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e188:	429a      	cmp	r2, r3
 800e18a:	d125      	bne.n	800e1d8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e18c:	4b8f      	ldr	r3, [pc, #572]	; (800e3cc <tcp_receive+0x2c8>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	89db      	ldrh	r3, [r3, #14]
 800e192:	b29a      	uxth	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d91c      	bls.n	800e1d8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e19e:	4b8b      	ldr	r3, [pc, #556]	; (800e3cc <tcp_receive+0x2c8>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	89db      	ldrh	r3, [r3, #14]
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d205      	bcs.n	800e1c8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e1c8:	4b7e      	ldr	r3, [pc, #504]	; (800e3c4 <tcp_receive+0x2c0>)
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e1d0:	4b7d      	ldr	r3, [pc, #500]	; (800e3c8 <tcp_receive+0x2c4>)
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e1d8:	4b7b      	ldr	r3, [pc, #492]	; (800e3c8 <tcp_receive+0x2c4>)
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1e0:	1ad3      	subs	r3, r2, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	dc58      	bgt.n	800e298 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e1e6:	4b7a      	ldr	r3, [pc, #488]	; (800e3d0 <tcp_receive+0x2cc>)
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d14b      	bne.n	800e286 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e1f8:	4413      	add	r3, r2
 800e1fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d142      	bne.n	800e286 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e206:	2b00      	cmp	r3, #0
 800e208:	db3d      	blt.n	800e286 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e20e:	4b6e      	ldr	r3, [pc, #440]	; (800e3c8 <tcp_receive+0x2c4>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	429a      	cmp	r2, r3
 800e214:	d137      	bne.n	800e286 <tcp_receive+0x182>
              found_dupack = 1;
 800e216:	2301      	movs	r3, #1
 800e218:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e220:	2bff      	cmp	r3, #255	; 0xff
 800e222:	d007      	beq.n	800e234 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e22a:	3301      	adds	r3, #1
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e23a:	2b03      	cmp	r3, #3
 800e23c:	d91b      	bls.n	800e276 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e248:	4413      	add	r3, r2
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e252:	429a      	cmp	r2, r3
 800e254:	d30a      	bcc.n	800e26c <tcp_receive+0x168>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e260:	4413      	add	r3, r2
 800e262:	b29a      	uxth	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e26a:	e004      	b.n	800e276 <tcp_receive+0x172>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e272:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e27c:	2b02      	cmp	r3, #2
 800e27e:	d902      	bls.n	800e286 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f002 fb47 	bl	8010914 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f040 8160 	bne.w	800e54e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e296:	e15a      	b.n	800e54e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e298:	4b4b      	ldr	r3, [pc, #300]	; (800e3c8 <tcp_receive+0x2c4>)
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2a0:	1ad3      	subs	r3, r2, r3
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f2c0 814d 	blt.w	800e544 <tcp_receive+0x440>
 800e2aa:	4b47      	ldr	r3, [pc, #284]	; (800e3c8 <tcp_receive+0x2c4>)
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f300 8145 	bgt.w	800e544 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	8b5b      	ldrh	r3, [r3, #26]
 800e2be:	f003 0304 	and.w	r3, r3, #4
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d010      	beq.n	800e2e8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	8b5b      	ldrh	r3, [r3, #26]
 800e2ca:	f023 0304 	bic.w	r3, r3, #4
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e2f6:	10db      	asrs	r3, r3, #3
 800e2f8:	b21b      	sxth	r3, r3
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e302:	b29b      	uxth	r3, r3
 800e304:	4413      	add	r3, r2
 800e306:	b29b      	uxth	r3, r3
 800e308:	b21a      	sxth	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e310:	4b2d      	ldr	r3, [pc, #180]	; (800e3c8 <tcp_receive+0x2c4>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	b29a      	uxth	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	1ad3      	subs	r3, r2, r3
 800e31e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e328:	4b27      	ldr	r3, [pc, #156]	; (800e3c8 <tcp_receive+0x2c4>)
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	7d1b      	ldrb	r3, [r3, #20]
 800e334:	2b03      	cmp	r3, #3
 800e336:	f240 8096 	bls.w	800e466 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e346:	429a      	cmp	r2, r3
 800e348:	d244      	bcs.n	800e3d4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	8b5b      	ldrh	r3, [r3, #26]
 800e34e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <tcp_receive+0x256>
 800e356:	2301      	movs	r3, #1
 800e358:	e000      	b.n	800e35c <tcp_receive+0x258>
 800e35a:	2302      	movs	r3, #2
 800e35c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e360:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e364:	b29a      	uxth	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e36a:	fb12 f303 	smulbb	r3, r2, r3
 800e36e:	b29b      	uxth	r3, r3
 800e370:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e372:	4293      	cmp	r3, r2
 800e374:	bf28      	it	cs
 800e376:	4613      	movcs	r3, r2
 800e378:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e380:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e382:	4413      	add	r3, r2
 800e384:	b29a      	uxth	r2, r3
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d309      	bcc.n	800e3a4 <tcp_receive+0x2a0>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e396:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e398:	4413      	add	r3, r2
 800e39a:	b29a      	uxth	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e3a2:	e060      	b.n	800e466 <tcp_receive+0x362>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e3ae:	e05a      	b.n	800e466 <tcp_receive+0x362>
 800e3b0:	08017030 	.word	0x08017030
 800e3b4:	08017360 	.word	0x08017360
 800e3b8:	0801707c 	.word	0x0801707c
 800e3bc:	0801737c 	.word	0x0801737c
 800e3c0:	200042c8 	.word	0x200042c8
 800e3c4:	200042bc 	.word	0x200042bc
 800e3c8:	200042c0 	.word	0x200042c0
 800e3cc:	200042ac 	.word	0x200042ac
 800e3d0:	200042c6 	.word	0x200042c6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e3da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e3dc:	4413      	add	r3, r2
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d309      	bcc.n	800e3fe <tcp_receive+0x2fa>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e3f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e3f2:	4413      	add	r3, r2
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3fc:	e004      	b.n	800e408 <tcp_receive+0x304>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e414:	429a      	cmp	r2, r3
 800e416:	d326      	bcc.n	800e466 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e424:	1ad3      	subs	r3, r2, r3
 800e426:	b29a      	uxth	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e438:	4413      	add	r3, r2
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e442:	429a      	cmp	r2, r3
 800e444:	d30a      	bcc.n	800e45c <tcp_receive+0x358>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e450:	4413      	add	r3, r2
 800e452:	b29a      	uxth	r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e45a:	e004      	b.n	800e466 <tcp_receive+0x362>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e462:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e46e:	4a98      	ldr	r2, [pc, #608]	; (800e6d0 <tcp_receive+0x5cc>)
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f7ff fdcb 	bl	800e00c <tcp_free_acked_segments>
 800e476:	4602      	mov	r2, r0
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e484:	4a93      	ldr	r2, [pc, #588]	; (800e6d4 <tcp_receive+0x5d0>)
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f7ff fdc0 	bl	800e00c <tcp_free_acked_segments>
 800e48c:	4602      	mov	r2, r0
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e496:	2b00      	cmp	r3, #0
 800e498:	d104      	bne.n	800e4a4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4a0:	861a      	strh	r2, [r3, #48]	; 0x30
 800e4a2:	e002      	b.n	800e4aa <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d103      	bne.n	800e4c0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e4c6:	4b84      	ldr	r3, [pc, #528]	; (800e6d8 <tcp_receive+0x5d4>)
 800e4c8:	881b      	ldrh	r3, [r3, #0]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	8b5b      	ldrh	r3, [r3, #26]
 800e4d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d035      	beq.n	800e54c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d118      	bne.n	800e51a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00c      	beq.n	800e50a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fa fec0 	bl	8009282 <lwip_htonl>
 800e502:	4603      	mov	r3, r0
 800e504:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e506:	2b00      	cmp	r3, #0
 800e508:	dc20      	bgt.n	800e54c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	8b5b      	ldrh	r3, [r3, #26]
 800e50e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e512:	b29a      	uxth	r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e518:	e018      	b.n	800e54c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	4618      	mov	r0, r3
 800e528:	f7fa feab 	bl	8009282 <lwip_htonl>
 800e52c:	4603      	mov	r3, r0
 800e52e:	1ae3      	subs	r3, r4, r3
 800e530:	2b00      	cmp	r3, #0
 800e532:	dc0b      	bgt.n	800e54c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	8b5b      	ldrh	r3, [r3, #26]
 800e538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e542:	e003      	b.n	800e54c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f002 fbdd 	bl	8010d04 <tcp_send_empty_ack>
 800e54a:	e000      	b.n	800e54e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e54c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e552:	2b00      	cmp	r3, #0
 800e554:	d05b      	beq.n	800e60e <tcp_receive+0x50a>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e55a:	4b60      	ldr	r3, [pc, #384]	; (800e6dc <tcp_receive+0x5d8>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	1ad3      	subs	r3, r2, r3
 800e560:	2b00      	cmp	r3, #0
 800e562:	da54      	bge.n	800e60e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e564:	4b5e      	ldr	r3, [pc, #376]	; (800e6e0 <tcp_receive+0x5dc>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	b29a      	uxth	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e56e:	b29b      	uxth	r3, r3
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	b29b      	uxth	r3, r3
 800e574:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e578:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e582:	10db      	asrs	r3, r3, #3
 800e584:	b21b      	sxth	r3, r3
 800e586:	b29b      	uxth	r3, r3
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e596:	b29a      	uxth	r2, r3
 800e598:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e59c:	4413      	add	r3, r2
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	b21a      	sxth	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e5a6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	da05      	bge.n	800e5ba <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800e5ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e5b2:	425b      	negs	r3, r3
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e5ba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e5c4:	109b      	asrs	r3, r3, #2
 800e5c6:	b21b      	sxth	r3, r3
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e5de:	4413      	add	r3, r2
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	b21a      	sxth	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e5ee:	10db      	asrs	r3, r3, #3
 800e5f0:	b21b      	sxth	r3, r3
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	4413      	add	r3, r2
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	b21a      	sxth	r2, r3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2200      	movs	r2, #0
 800e60c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e60e:	4b35      	ldr	r3, [pc, #212]	; (800e6e4 <tcp_receive+0x5e0>)
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	f000 84e1 	beq.w	800efda <tcp_receive+0xed6>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	7d1b      	ldrb	r3, [r3, #20]
 800e61c:	2b06      	cmp	r3, #6
 800e61e:	f200 84dc 	bhi.w	800efda <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e626:	4b30      	ldr	r3, [pc, #192]	; (800e6e8 <tcp_receive+0x5e4>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	3b01      	subs	r3, #1
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f2c0 808e 	blt.w	800e750 <tcp_receive+0x64c>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e638:	4b2a      	ldr	r3, [pc, #168]	; (800e6e4 <tcp_receive+0x5e0>)
 800e63a:	881b      	ldrh	r3, [r3, #0]
 800e63c:	4619      	mov	r1, r3
 800e63e:	4b2a      	ldr	r3, [pc, #168]	; (800e6e8 <tcp_receive+0x5e4>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	440b      	add	r3, r1
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	3301      	adds	r3, #1
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f300 8081 	bgt.w	800e750 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e64e:	4b27      	ldr	r3, [pc, #156]	; (800e6ec <tcp_receive+0x5e8>)
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e658:	4b23      	ldr	r3, [pc, #140]	; (800e6e8 <tcp_receive+0x5e4>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	1ad3      	subs	r3, r2, r3
 800e65e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e660:	4b22      	ldr	r3, [pc, #136]	; (800e6ec <tcp_receive+0x5e8>)
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d106      	bne.n	800e676 <tcp_receive+0x572>
 800e668:	4b21      	ldr	r3, [pc, #132]	; (800e6f0 <tcp_receive+0x5ec>)
 800e66a:	f240 5294 	movw	r2, #1428	; 0x594
 800e66e:	4921      	ldr	r1, [pc, #132]	; (800e6f4 <tcp_receive+0x5f0>)
 800e670:	4821      	ldr	r0, [pc, #132]	; (800e6f8 <tcp_receive+0x5f4>)
 800e672:	f005 fe11 	bl	8014298 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e678:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e67c:	4293      	cmp	r3, r2
 800e67e:	d906      	bls.n	800e68e <tcp_receive+0x58a>
 800e680:	4b1b      	ldr	r3, [pc, #108]	; (800e6f0 <tcp_receive+0x5ec>)
 800e682:	f240 5295 	movw	r2, #1429	; 0x595
 800e686:	491d      	ldr	r1, [pc, #116]	; (800e6fc <tcp_receive+0x5f8>)
 800e688:	481b      	ldr	r0, [pc, #108]	; (800e6f8 <tcp_receive+0x5f4>)
 800e68a:	f005 fe05 	bl	8014298 <iprintf>
      off = (u16_t)off32;
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e694:	4b15      	ldr	r3, [pc, #84]	; (800e6ec <tcp_receive+0x5e8>)
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	891b      	ldrh	r3, [r3, #8]
 800e69a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d906      	bls.n	800e6b0 <tcp_receive+0x5ac>
 800e6a2:	4b13      	ldr	r3, [pc, #76]	; (800e6f0 <tcp_receive+0x5ec>)
 800e6a4:	f240 5297 	movw	r2, #1431	; 0x597
 800e6a8:	4915      	ldr	r1, [pc, #84]	; (800e700 <tcp_receive+0x5fc>)
 800e6aa:	4813      	ldr	r0, [pc, #76]	; (800e6f8 <tcp_receive+0x5f4>)
 800e6ac:	f005 fdf4 	bl	8014298 <iprintf>
      inseg.len -= off;
 800e6b0:	4b0e      	ldr	r3, [pc, #56]	; (800e6ec <tcp_receive+0x5e8>)
 800e6b2:	891a      	ldrh	r2, [r3, #8]
 800e6b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	4b0b      	ldr	r3, [pc, #44]	; (800e6ec <tcp_receive+0x5e8>)
 800e6be:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e6c0:	4b0a      	ldr	r3, [pc, #40]	; (800e6ec <tcp_receive+0x5e8>)
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	891a      	ldrh	r2, [r3, #8]
 800e6c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6ca:	1ad3      	subs	r3, r2, r3
 800e6cc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e6ce:	e029      	b.n	800e724 <tcp_receive+0x620>
 800e6d0:	08017398 	.word	0x08017398
 800e6d4:	080173a0 	.word	0x080173a0
 800e6d8:	200042c4 	.word	0x200042c4
 800e6dc:	200042c0 	.word	0x200042c0
 800e6e0:	2000acc0 	.word	0x2000acc0
 800e6e4:	200042c6 	.word	0x200042c6
 800e6e8:	200042bc 	.word	0x200042bc
 800e6ec:	2000429c 	.word	0x2000429c
 800e6f0:	08017030 	.word	0x08017030
 800e6f4:	080173a8 	.word	0x080173a8
 800e6f8:	0801707c 	.word	0x0801707c
 800e6fc:	080173b8 	.word	0x080173b8
 800e700:	080173c8 	.word	0x080173c8
        off -= p->len;
 800e704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e706:	895b      	ldrh	r3, [r3, #10]
 800e708:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e70c:	1ad3      	subs	r3, r2, r3
 800e70e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e714:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e716:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e71a:	2200      	movs	r2, #0
 800e71c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e71e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e726:	895b      	ldrh	r3, [r3, #10]
 800e728:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d8e9      	bhi.n	800e704 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e730:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e734:	4619      	mov	r1, r3
 800e736:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e738:	f7fc f8b0 	bl	800a89c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e740:	4a91      	ldr	r2, [pc, #580]	; (800e988 <tcp_receive+0x884>)
 800e742:	6013      	str	r3, [r2, #0]
 800e744:	4b91      	ldr	r3, [pc, #580]	; (800e98c <tcp_receive+0x888>)
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	4a8f      	ldr	r2, [pc, #572]	; (800e988 <tcp_receive+0x884>)
 800e74a:	6812      	ldr	r2, [r2, #0]
 800e74c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e74e:	e00d      	b.n	800e76c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e750:	4b8d      	ldr	r3, [pc, #564]	; (800e988 <tcp_receive+0x884>)
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e758:	1ad3      	subs	r3, r2, r3
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	da06      	bge.n	800e76c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	8b5b      	ldrh	r3, [r3, #26]
 800e762:	f043 0302 	orr.w	r3, r3, #2
 800e766:	b29a      	uxth	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e76c:	4b86      	ldr	r3, [pc, #536]	; (800e988 <tcp_receive+0x884>)
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	f2c0 842a 	blt.w	800efd0 <tcp_receive+0xecc>
 800e77c:	4b82      	ldr	r3, [pc, #520]	; (800e988 <tcp_receive+0x884>)
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e784:	6879      	ldr	r1, [r7, #4]
 800e786:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e788:	440b      	add	r3, r1
 800e78a:	1ad3      	subs	r3, r2, r3
 800e78c:	3301      	adds	r3, #1
 800e78e:	2b00      	cmp	r3, #0
 800e790:	f300 841e 	bgt.w	800efd0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e798:	4b7b      	ldr	r3, [pc, #492]	; (800e988 <tcp_receive+0x884>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	f040 829a 	bne.w	800ecd6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e7a2:	4b7a      	ldr	r3, [pc, #488]	; (800e98c <tcp_receive+0x888>)
 800e7a4:	891c      	ldrh	r4, [r3, #8]
 800e7a6:	4b79      	ldr	r3, [pc, #484]	; (800e98c <tcp_receive+0x888>)
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	899b      	ldrh	r3, [r3, #12]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fa fd52 	bl	8009258 <lwip_htons>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	f003 0303 	and.w	r3, r3, #3
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d001      	beq.n	800e7c4 <tcp_receive+0x6c0>
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e000      	b.n	800e7c6 <tcp_receive+0x6c2>
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	4423      	add	r3, r4
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	4b71      	ldr	r3, [pc, #452]	; (800e990 <tcp_receive+0x88c>)
 800e7cc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e7d2:	4b6f      	ldr	r3, [pc, #444]	; (800e990 <tcp_receive+0x88c>)
 800e7d4:	881b      	ldrh	r3, [r3, #0]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d275      	bcs.n	800e8c6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e7da:	4b6c      	ldr	r3, [pc, #432]	; (800e98c <tcp_receive+0x888>)
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	899b      	ldrh	r3, [r3, #12]
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fa fd38 	bl	8009258 <lwip_htons>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	f003 0301 	and.w	r3, r3, #1
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d01f      	beq.n	800e834 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e7f4:	4b65      	ldr	r3, [pc, #404]	; (800e98c <tcp_receive+0x888>)
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	899b      	ldrh	r3, [r3, #12]
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	b21b      	sxth	r3, r3
 800e7fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e802:	b21c      	sxth	r4, r3
 800e804:	4b61      	ldr	r3, [pc, #388]	; (800e98c <tcp_receive+0x888>)
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	899b      	ldrh	r3, [r3, #12]
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fa fd23 	bl	8009258 <lwip_htons>
 800e812:	4603      	mov	r3, r0
 800e814:	b2db      	uxtb	r3, r3
 800e816:	b29b      	uxth	r3, r3
 800e818:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	4618      	mov	r0, r3
 800e820:	f7fa fd1a 	bl	8009258 <lwip_htons>
 800e824:	4603      	mov	r3, r0
 800e826:	b21b      	sxth	r3, r3
 800e828:	4323      	orrs	r3, r4
 800e82a:	b21a      	sxth	r2, r3
 800e82c:	4b57      	ldr	r3, [pc, #348]	; (800e98c <tcp_receive+0x888>)
 800e82e:	68db      	ldr	r3, [r3, #12]
 800e830:	b292      	uxth	r2, r2
 800e832:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e838:	4b54      	ldr	r3, [pc, #336]	; (800e98c <tcp_receive+0x888>)
 800e83a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e83c:	4b53      	ldr	r3, [pc, #332]	; (800e98c <tcp_receive+0x888>)
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	899b      	ldrh	r3, [r3, #12]
 800e842:	b29b      	uxth	r3, r3
 800e844:	4618      	mov	r0, r3
 800e846:	f7fa fd07 	bl	8009258 <lwip_htons>
 800e84a:	4603      	mov	r3, r0
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	f003 0302 	and.w	r3, r3, #2
 800e852:	2b00      	cmp	r3, #0
 800e854:	d005      	beq.n	800e862 <tcp_receive+0x75e>
            inseg.len -= 1;
 800e856:	4b4d      	ldr	r3, [pc, #308]	; (800e98c <tcp_receive+0x888>)
 800e858:	891b      	ldrh	r3, [r3, #8]
 800e85a:	3b01      	subs	r3, #1
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	4b4b      	ldr	r3, [pc, #300]	; (800e98c <tcp_receive+0x888>)
 800e860:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e862:	4b4a      	ldr	r3, [pc, #296]	; (800e98c <tcp_receive+0x888>)
 800e864:	685a      	ldr	r2, [r3, #4]
 800e866:	4b49      	ldr	r3, [pc, #292]	; (800e98c <tcp_receive+0x888>)
 800e868:	891b      	ldrh	r3, [r3, #8]
 800e86a:	4619      	mov	r1, r3
 800e86c:	4610      	mov	r0, r2
 800e86e:	f7fb ff15 	bl	800a69c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e872:	4b46      	ldr	r3, [pc, #280]	; (800e98c <tcp_receive+0x888>)
 800e874:	891c      	ldrh	r4, [r3, #8]
 800e876:	4b45      	ldr	r3, [pc, #276]	; (800e98c <tcp_receive+0x888>)
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	899b      	ldrh	r3, [r3, #12]
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fa fcea 	bl	8009258 <lwip_htons>
 800e884:	4603      	mov	r3, r0
 800e886:	b2db      	uxtb	r3, r3
 800e888:	f003 0303 	and.w	r3, r3, #3
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d001      	beq.n	800e894 <tcp_receive+0x790>
 800e890:	2301      	movs	r3, #1
 800e892:	e000      	b.n	800e896 <tcp_receive+0x792>
 800e894:	2300      	movs	r3, #0
 800e896:	4423      	add	r3, r4
 800e898:	b29a      	uxth	r2, r3
 800e89a:	4b3d      	ldr	r3, [pc, #244]	; (800e990 <tcp_receive+0x88c>)
 800e89c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e89e:	4b3c      	ldr	r3, [pc, #240]	; (800e990 <tcp_receive+0x88c>)
 800e8a0:	881b      	ldrh	r3, [r3, #0]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	4b38      	ldr	r3, [pc, #224]	; (800e988 <tcp_receive+0x884>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	441a      	add	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ae:	6879      	ldr	r1, [r7, #4]
 800e8b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8b2:	440b      	add	r3, r1
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d006      	beq.n	800e8c6 <tcp_receive+0x7c2>
 800e8b8:	4b36      	ldr	r3, [pc, #216]	; (800e994 <tcp_receive+0x890>)
 800e8ba:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800e8be:	4936      	ldr	r1, [pc, #216]	; (800e998 <tcp_receive+0x894>)
 800e8c0:	4836      	ldr	r0, [pc, #216]	; (800e99c <tcp_receive+0x898>)
 800e8c2:	f005 fce9 	bl	8014298 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	f000 80e7 	beq.w	800ea9e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e8d0:	4b2e      	ldr	r3, [pc, #184]	; (800e98c <tcp_receive+0x888>)
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	899b      	ldrh	r3, [r3, #12]
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7fa fcbd 	bl	8009258 <lwip_htons>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d010      	beq.n	800e90c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e8ea:	e00a      	b.n	800e902 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8f0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e8fc:	68f8      	ldr	r0, [r7, #12]
 800e8fe:	f7fd fcc9 	bl	800c294 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1f0      	bne.n	800e8ec <tcp_receive+0x7e8>
 800e90a:	e0c8      	b.n	800ea9e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e910:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e912:	e052      	b.n	800e9ba <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	899b      	ldrh	r3, [r3, #12]
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7fa fc9b 	bl	8009258 <lwip_htons>
 800e922:	4603      	mov	r3, r0
 800e924:	b2db      	uxtb	r3, r3
 800e926:	f003 0301 	and.w	r3, r3, #1
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d03d      	beq.n	800e9aa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e92e:	4b17      	ldr	r3, [pc, #92]	; (800e98c <tcp_receive+0x888>)
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	899b      	ldrh	r3, [r3, #12]
 800e934:	b29b      	uxth	r3, r3
 800e936:	4618      	mov	r0, r3
 800e938:	f7fa fc8e 	bl	8009258 <lwip_htons>
 800e93c:	4603      	mov	r3, r0
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e944:	2b00      	cmp	r3, #0
 800e946:	d130      	bne.n	800e9aa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e948:	4b10      	ldr	r3, [pc, #64]	; (800e98c <tcp_receive+0x888>)
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	899b      	ldrh	r3, [r3, #12]
 800e94e:	b29c      	uxth	r4, r3
 800e950:	2001      	movs	r0, #1
 800e952:	f7fa fc81 	bl	8009258 <lwip_htons>
 800e956:	4603      	mov	r3, r0
 800e958:	461a      	mov	r2, r3
 800e95a:	4b0c      	ldr	r3, [pc, #48]	; (800e98c <tcp_receive+0x888>)
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	4322      	orrs	r2, r4
 800e960:	b292      	uxth	r2, r2
 800e962:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e964:	4b09      	ldr	r3, [pc, #36]	; (800e98c <tcp_receive+0x888>)
 800e966:	891c      	ldrh	r4, [r3, #8]
 800e968:	4b08      	ldr	r3, [pc, #32]	; (800e98c <tcp_receive+0x888>)
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	899b      	ldrh	r3, [r3, #12]
 800e96e:	b29b      	uxth	r3, r3
 800e970:	4618      	mov	r0, r3
 800e972:	f7fa fc71 	bl	8009258 <lwip_htons>
 800e976:	4603      	mov	r3, r0
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	f003 0303 	and.w	r3, r3, #3
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00e      	beq.n	800e9a0 <tcp_receive+0x89c>
 800e982:	2301      	movs	r3, #1
 800e984:	e00d      	b.n	800e9a2 <tcp_receive+0x89e>
 800e986:	bf00      	nop
 800e988:	200042bc 	.word	0x200042bc
 800e98c:	2000429c 	.word	0x2000429c
 800e990:	200042c6 	.word	0x200042c6
 800e994:	08017030 	.word	0x08017030
 800e998:	080173d8 	.word	0x080173d8
 800e99c:	0801707c 	.word	0x0801707c
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4423      	add	r3, r4
 800e9a4:	b29a      	uxth	r2, r3
 800e9a6:	4b98      	ldr	r3, [pc, #608]	; (800ec08 <tcp_receive+0xb04>)
 800e9a8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ac:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e9b4:	6938      	ldr	r0, [r7, #16]
 800e9b6:	f7fd fc6d 	bl	800c294 <tcp_seg_free>
            while (next &&
 800e9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00e      	beq.n	800e9de <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e9c0:	4b91      	ldr	r3, [pc, #580]	; (800ec08 <tcp_receive+0xb04>)
 800e9c2:	881b      	ldrh	r3, [r3, #0]
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	4b91      	ldr	r3, [pc, #580]	; (800ec0c <tcp_receive+0xb08>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	441a      	add	r2, r3
 800e9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9d4:	8909      	ldrh	r1, [r1, #8]
 800e9d6:	440b      	add	r3, r1
 800e9d8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	da9a      	bge.n	800e914 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e9de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d059      	beq.n	800ea98 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e9e4:	4b88      	ldr	r3, [pc, #544]	; (800ec08 <tcp_receive+0xb04>)
 800e9e6:	881b      	ldrh	r3, [r3, #0]
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	4b88      	ldr	r3, [pc, #544]	; (800ec0c <tcp_receive+0xb08>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	441a      	add	r2, r3
 800e9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	dd4d      	ble.n	800ea98 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	4b81      	ldr	r3, [pc, #516]	; (800ec0c <tcp_receive+0xb08>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	4b80      	ldr	r3, [pc, #512]	; (800ec10 <tcp_receive+0xb0c>)
 800ea10:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ea12:	4b7f      	ldr	r3, [pc, #508]	; (800ec10 <tcp_receive+0xb0c>)
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	899b      	ldrh	r3, [r3, #12]
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fa fc1c 	bl	8009258 <lwip_htons>
 800ea20:	4603      	mov	r3, r0
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	f003 0302 	and.w	r3, r3, #2
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d005      	beq.n	800ea38 <tcp_receive+0x934>
                inseg.len -= 1;
 800ea2c:	4b78      	ldr	r3, [pc, #480]	; (800ec10 <tcp_receive+0xb0c>)
 800ea2e:	891b      	ldrh	r3, [r3, #8]
 800ea30:	3b01      	subs	r3, #1
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	4b76      	ldr	r3, [pc, #472]	; (800ec10 <tcp_receive+0xb0c>)
 800ea36:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ea38:	4b75      	ldr	r3, [pc, #468]	; (800ec10 <tcp_receive+0xb0c>)
 800ea3a:	685a      	ldr	r2, [r3, #4]
 800ea3c:	4b74      	ldr	r3, [pc, #464]	; (800ec10 <tcp_receive+0xb0c>)
 800ea3e:	891b      	ldrh	r3, [r3, #8]
 800ea40:	4619      	mov	r1, r3
 800ea42:	4610      	mov	r0, r2
 800ea44:	f7fb fe2a 	bl	800a69c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ea48:	4b71      	ldr	r3, [pc, #452]	; (800ec10 <tcp_receive+0xb0c>)
 800ea4a:	891c      	ldrh	r4, [r3, #8]
 800ea4c:	4b70      	ldr	r3, [pc, #448]	; (800ec10 <tcp_receive+0xb0c>)
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	899b      	ldrh	r3, [r3, #12]
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fa fbff 	bl	8009258 <lwip_htons>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	f003 0303 	and.w	r3, r3, #3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d001      	beq.n	800ea6a <tcp_receive+0x966>
 800ea66:	2301      	movs	r3, #1
 800ea68:	e000      	b.n	800ea6c <tcp_receive+0x968>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	4423      	add	r3, r4
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	4b65      	ldr	r3, [pc, #404]	; (800ec08 <tcp_receive+0xb04>)
 800ea72:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ea74:	4b64      	ldr	r3, [pc, #400]	; (800ec08 <tcp_receive+0xb04>)
 800ea76:	881b      	ldrh	r3, [r3, #0]
 800ea78:	461a      	mov	r2, r3
 800ea7a:	4b64      	ldr	r3, [pc, #400]	; (800ec0c <tcp_receive+0xb08>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	441a      	add	r2, r3
 800ea80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d006      	beq.n	800ea98 <tcp_receive+0x994>
 800ea8a:	4b62      	ldr	r3, [pc, #392]	; (800ec14 <tcp_receive+0xb10>)
 800ea8c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800ea90:	4961      	ldr	r1, [pc, #388]	; (800ec18 <tcp_receive+0xb14>)
 800ea92:	4862      	ldr	r0, [pc, #392]	; (800ec1c <tcp_receive+0xb18>)
 800ea94:	f005 fc00 	bl	8014298 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea9c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ea9e:	4b5a      	ldr	r3, [pc, #360]	; (800ec08 <tcp_receive+0xb04>)
 800eaa0:	881b      	ldrh	r3, [r3, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	4b59      	ldr	r3, [pc, #356]	; (800ec0c <tcp_receive+0xb08>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	441a      	add	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eab2:	4b55      	ldr	r3, [pc, #340]	; (800ec08 <tcp_receive+0xb04>)
 800eab4:	881b      	ldrh	r3, [r3, #0]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d206      	bcs.n	800eac8 <tcp_receive+0x9c4>
 800eaba:	4b56      	ldr	r3, [pc, #344]	; (800ec14 <tcp_receive+0xb10>)
 800eabc:	f240 6207 	movw	r2, #1543	; 0x607
 800eac0:	4957      	ldr	r1, [pc, #348]	; (800ec20 <tcp_receive+0xb1c>)
 800eac2:	4856      	ldr	r0, [pc, #344]	; (800ec1c <tcp_receive+0xb18>)
 800eac4:	f005 fbe8 	bl	8014298 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eacc:	4b4e      	ldr	r3, [pc, #312]	; (800ec08 <tcp_receive+0xb04>)
 800eace:	881b      	ldrh	r3, [r3, #0]
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7fc feb9 	bl	800b850 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800eade:	4b4c      	ldr	r3, [pc, #304]	; (800ec10 <tcp_receive+0xb0c>)
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	891b      	ldrh	r3, [r3, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d006      	beq.n	800eaf6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800eae8:	4b49      	ldr	r3, [pc, #292]	; (800ec10 <tcp_receive+0xb0c>)
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	4a4d      	ldr	r2, [pc, #308]	; (800ec24 <tcp_receive+0xb20>)
 800eaee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800eaf0:	4b47      	ldr	r3, [pc, #284]	; (800ec10 <tcp_receive+0xb0c>)
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eaf6:	4b46      	ldr	r3, [pc, #280]	; (800ec10 <tcp_receive+0xb0c>)
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	899b      	ldrh	r3, [r3, #12]
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fa fbaa 	bl	8009258 <lwip_htons>
 800eb04:	4603      	mov	r3, r0
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	f003 0301 	and.w	r3, r3, #1
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 80b8 	beq.w	800ec82 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800eb12:	4b45      	ldr	r3, [pc, #276]	; (800ec28 <tcp_receive+0xb24>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	f043 0320 	orr.w	r3, r3, #32
 800eb1a:	b2da      	uxtb	r2, r3
 800eb1c:	4b42      	ldr	r3, [pc, #264]	; (800ec28 <tcp_receive+0xb24>)
 800eb1e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800eb20:	e0af      	b.n	800ec82 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb26:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	4a36      	ldr	r2, [pc, #216]	; (800ec0c <tcp_receive+0xb08>)
 800eb32:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	891b      	ldrh	r3, [r3, #8]
 800eb38:	461c      	mov	r4, r3
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	899b      	ldrh	r3, [r3, #12]
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fa fb88 	bl	8009258 <lwip_htons>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	f003 0303 	and.w	r3, r3, #3
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <tcp_receive+0xa54>
 800eb54:	2301      	movs	r3, #1
 800eb56:	e000      	b.n	800eb5a <tcp_receive+0xa56>
 800eb58:	2300      	movs	r3, #0
 800eb5a:	191a      	adds	r2, r3, r4
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb60:	441a      	add	r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb6a:	461c      	mov	r4, r3
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	891b      	ldrh	r3, [r3, #8]
 800eb70:	461d      	mov	r5, r3
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	899b      	ldrh	r3, [r3, #12]
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fa fb6c 	bl	8009258 <lwip_htons>
 800eb80:	4603      	mov	r3, r0
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	f003 0303 	and.w	r3, r3, #3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d001      	beq.n	800eb90 <tcp_receive+0xa8c>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e000      	b.n	800eb92 <tcp_receive+0xa8e>
 800eb90:	2300      	movs	r3, #0
 800eb92:	442b      	add	r3, r5
 800eb94:	429c      	cmp	r4, r3
 800eb96:	d206      	bcs.n	800eba6 <tcp_receive+0xaa2>
 800eb98:	4b1e      	ldr	r3, [pc, #120]	; (800ec14 <tcp_receive+0xb10>)
 800eb9a:	f240 622c 	movw	r2, #1580	; 0x62c
 800eb9e:	4923      	ldr	r1, [pc, #140]	; (800ec2c <tcp_receive+0xb28>)
 800eba0:	481e      	ldr	r0, [pc, #120]	; (800ec1c <tcp_receive+0xb18>)
 800eba2:	f005 fb79 	bl	8014298 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	891b      	ldrh	r3, [r3, #8]
 800ebaa:	461c      	mov	r4, r3
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	899b      	ldrh	r3, [r3, #12]
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fa fb4f 	bl	8009258 <lwip_htons>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	f003 0303 	and.w	r3, r3, #3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d001      	beq.n	800ebca <tcp_receive+0xac6>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e000      	b.n	800ebcc <tcp_receive+0xac8>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	1919      	adds	r1, r3, r4
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ebd2:	b28b      	uxth	r3, r1
 800ebd4:	1ad3      	subs	r3, r2, r3
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7fc fe37 	bl	800b850 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	891b      	ldrh	r3, [r3, #8]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d028      	beq.n	800ec3e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ebec:	4b0d      	ldr	r3, [pc, #52]	; (800ec24 <tcp_receive+0xb20>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d01d      	beq.n	800ec30 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ebf4:	4b0b      	ldr	r3, [pc, #44]	; (800ec24 <tcp_receive+0xb20>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	4610      	mov	r0, r2
 800ec00:	f7fb ffa0 	bl	800ab44 <pbuf_cat>
 800ec04:	e018      	b.n	800ec38 <tcp_receive+0xb34>
 800ec06:	bf00      	nop
 800ec08:	200042c6 	.word	0x200042c6
 800ec0c:	200042bc 	.word	0x200042bc
 800ec10:	2000429c 	.word	0x2000429c
 800ec14:	08017030 	.word	0x08017030
 800ec18:	08017410 	.word	0x08017410
 800ec1c:	0801707c 	.word	0x0801707c
 800ec20:	0801744c 	.word	0x0801744c
 800ec24:	200042cc 	.word	0x200042cc
 800ec28:	200042c9 	.word	0x200042c9
 800ec2c:	0801746c 	.word	0x0801746c
            } else {
              recv_data = cseg->p;
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	4a70      	ldr	r2, [pc, #448]	; (800edf8 <tcp_receive+0xcf4>)
 800ec36:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	899b      	ldrh	r3, [r3, #12]
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fa fb06 	bl	8009258 <lwip_htons>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	f003 0301 	and.w	r3, r3, #1
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d00d      	beq.n	800ec74 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ec58:	4b68      	ldr	r3, [pc, #416]	; (800edfc <tcp_receive+0xcf8>)
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	f043 0320 	orr.w	r3, r3, #32
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	4b66      	ldr	r3, [pc, #408]	; (800edfc <tcp_receive+0xcf8>)
 800ec64:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	7d1b      	ldrb	r3, [r3, #20]
 800ec6a:	2b04      	cmp	r3, #4
 800ec6c:	d102      	bne.n	800ec74 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2207      	movs	r2, #7
 800ec72:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ec7c:	68b8      	ldr	r0, [r7, #8]
 800ec7e:	f7fd fb09 	bl	800c294 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d008      	beq.n	800ec9c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	685a      	ldr	r2, [r3, #4]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ec96:	429a      	cmp	r2, r3
 800ec98:	f43f af43 	beq.w	800eb22 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	8b5b      	ldrh	r3, [r3, #26]
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00e      	beq.n	800ecc6 <tcp_receive+0xbc2>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	8b5b      	ldrh	r3, [r3, #26]
 800ecac:	f023 0301 	bic.w	r3, r3, #1
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	835a      	strh	r2, [r3, #26]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	8b5b      	ldrh	r3, [r3, #26]
 800ecba:	f043 0302 	orr.w	r3, r3, #2
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ecc4:	e188      	b.n	800efd8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	8b5b      	ldrh	r3, [r3, #26]
 800ecca:	f043 0301 	orr.w	r3, r3, #1
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ecd4:	e180      	b.n	800efd8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d106      	bne.n	800ecec <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ecde:	4848      	ldr	r0, [pc, #288]	; (800ee00 <tcp_receive+0xcfc>)
 800ece0:	f7fd faf0 	bl	800c2c4 <tcp_seg_copy>
 800ece4:	4602      	mov	r2, r0
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	675a      	str	r2, [r3, #116]	; 0x74
 800ecea:	e16d      	b.n	800efc8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ecec:	2300      	movs	r3, #0
 800ecee:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecf4:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecf6:	e157      	b.n	800efa8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ecf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	685a      	ldr	r2, [r3, #4]
 800ecfe:	4b41      	ldr	r3, [pc, #260]	; (800ee04 <tcp_receive+0xd00>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d11d      	bne.n	800ed42 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ed06:	4b3e      	ldr	r3, [pc, #248]	; (800ee00 <tcp_receive+0xcfc>)
 800ed08:	891a      	ldrh	r2, [r3, #8]
 800ed0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0c:	891b      	ldrh	r3, [r3, #8]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	f240 814f 	bls.w	800efb2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed14:	483a      	ldr	r0, [pc, #232]	; (800ee00 <tcp_receive+0xcfc>)
 800ed16:	f7fd fad5 	bl	800c2c4 <tcp_seg_copy>
 800ed1a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 8149 	beq.w	800efb6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ed24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d003      	beq.n	800ed32 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ed2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed2c:	697a      	ldr	r2, [r7, #20]
 800ed2e:	601a      	str	r2, [r3, #0]
 800ed30:	e002      	b.n	800ed38 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	697a      	ldr	r2, [r7, #20]
 800ed36:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ed38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed3a:	6978      	ldr	r0, [r7, #20]
 800ed3c:	f7ff f8de 	bl	800defc <tcp_oos_insert_segment>
                }
                break;
 800ed40:	e139      	b.n	800efb6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ed42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d117      	bne.n	800ed78 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ed48:	4b2e      	ldr	r3, [pc, #184]	; (800ee04 <tcp_receive+0xd00>)
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	da57      	bge.n	800ee08 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed58:	4829      	ldr	r0, [pc, #164]	; (800ee00 <tcp_receive+0xcfc>)
 800ed5a:	f7fd fab3 	bl	800c2c4 <tcp_seg_copy>
 800ed5e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 8129 	beq.w	800efba <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	69ba      	ldr	r2, [r7, #24]
 800ed6c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ed6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed70:	69b8      	ldr	r0, [r7, #24]
 800ed72:	f7ff f8c3 	bl	800defc <tcp_oos_insert_segment>
                  }
                  break;
 800ed76:	e120      	b.n	800efba <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ed78:	4b22      	ldr	r3, [pc, #136]	; (800ee04 <tcp_receive+0xd00>)
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	3b01      	subs	r3, #1
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	db3e      	blt.n	800ee08 <tcp_receive+0xd04>
 800ed8a:	4b1e      	ldr	r3, [pc, #120]	; (800ee04 <tcp_receive+0xd00>)
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed90:	68db      	ldr	r3, [r3, #12]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	3301      	adds	r3, #1
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	dc35      	bgt.n	800ee08 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed9c:	4818      	ldr	r0, [pc, #96]	; (800ee00 <tcp_receive+0xcfc>)
 800ed9e:	f7fd fa91 	bl	800c2c4 <tcp_seg_copy>
 800eda2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f000 8109 	beq.w	800efbe <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800edac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edb4:	8912      	ldrh	r2, [r2, #8]
 800edb6:	441a      	add	r2, r3
 800edb8:	4b12      	ldr	r3, [pc, #72]	; (800ee04 <tcp_receive+0xd00>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	dd12      	ble.n	800ede8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800edc2:	4b10      	ldr	r3, [pc, #64]	; (800ee04 <tcp_receive+0xd00>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edca:	68db      	ldr	r3, [r3, #12]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	b29b      	uxth	r3, r3
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edd6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800edd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edda:	685a      	ldr	r2, [r3, #4]
 800eddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edde:	891b      	ldrh	r3, [r3, #8]
 800ede0:	4619      	mov	r1, r3
 800ede2:	4610      	mov	r0, r2
 800ede4:	f7fb fc5a 	bl	800a69c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ede8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edea:	69fa      	ldr	r2, [r7, #28]
 800edec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800edee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800edf0:	69f8      	ldr	r0, [r7, #28]
 800edf2:	f7ff f883 	bl	800defc <tcp_oos_insert_segment>
                  }
                  break;
 800edf6:	e0e2      	b.n	800efbe <tcp_receive+0xeba>
 800edf8:	200042cc 	.word	0x200042cc
 800edfc:	200042c9 	.word	0x200042c9
 800ee00:	2000429c 	.word	0x2000429c
 800ee04:	200042bc 	.word	0x200042bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ee08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f040 80c6 	bne.w	800efa2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ee16:	4b80      	ldr	r3, [pc, #512]	; (800f018 <tcp_receive+0xf14>)
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f340 80bd 	ble.w	800efa2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ee28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	899b      	ldrh	r3, [r3, #12]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fa fa11 	bl	8009258 <lwip_htons>
 800ee36:	4603      	mov	r3, r0
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	f003 0301 	and.w	r3, r3, #1
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f040 80bf 	bne.w	800efc2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ee44:	4875      	ldr	r0, [pc, #468]	; (800f01c <tcp_receive+0xf18>)
 800ee46:	f7fd fa3d 	bl	800c2c4 <tcp_seg_copy>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ee50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f000 80b6 	beq.w	800efc6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee62:	8912      	ldrh	r2, [r2, #8]
 800ee64:	441a      	add	r2, r3
 800ee66:	4b6c      	ldr	r3, [pc, #432]	; (800f018 <tcp_receive+0xf14>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	dd12      	ble.n	800ee96 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ee70:	4b69      	ldr	r3, [pc, #420]	; (800f018 <tcp_receive+0xf14>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	1ad3      	subs	r3, r2, r3
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee84:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ee86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee88:	685a      	ldr	r2, [r3, #4]
 800ee8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8c:	891b      	ldrh	r3, [r3, #8]
 800ee8e:	4619      	mov	r1, r3
 800ee90:	4610      	mov	r0, r2
 800ee92:	f7fb fc03 	bl	800a69c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ee96:	4b62      	ldr	r3, [pc, #392]	; (800f020 <tcp_receive+0xf1c>)
 800ee98:	881b      	ldrh	r3, [r3, #0]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	4b5e      	ldr	r3, [pc, #376]	; (800f018 <tcp_receive+0xf14>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	441a      	add	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea6:	6879      	ldr	r1, [r7, #4]
 800eea8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eeaa:	440b      	add	r3, r1
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f340 8089 	ble.w	800efc6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	899b      	ldrh	r3, [r3, #12]
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fa f9ca 	bl	8009258 <lwip_htons>
 800eec4:	4603      	mov	r3, r0
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	f003 0301 	and.w	r3, r3, #1
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d022      	beq.n	800ef16 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800eed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	899b      	ldrh	r3, [r3, #12]
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	b21b      	sxth	r3, r3
 800eedc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eee0:	b21c      	sxth	r4, r3
 800eee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	899b      	ldrh	r3, [r3, #12]
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fa f9b3 	bl	8009258 <lwip_htons>
 800eef2:	4603      	mov	r3, r0
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fa f9aa 	bl	8009258 <lwip_htons>
 800ef04:	4603      	mov	r3, r0
 800ef06:	b21b      	sxth	r3, r3
 800ef08:	4323      	orrs	r3, r4
 800ef0a:	b21a      	sxth	r2, r3
 800ef0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	b292      	uxth	r2, r2
 800ef14:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef20:	4413      	add	r3, r2
 800ef22:	b299      	uxth	r1, r3
 800ef24:	4b3c      	ldr	r3, [pc, #240]	; (800f018 <tcp_receive+0xf14>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	b29a      	uxth	r2, r3
 800ef2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	1a8a      	subs	r2, r1, r2
 800ef30:	b292      	uxth	r2, r2
 800ef32:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ef34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	685a      	ldr	r2, [r3, #4]
 800ef3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	891b      	ldrh	r3, [r3, #8]
 800ef40:	4619      	mov	r1, r3
 800ef42:	4610      	mov	r0, r2
 800ef44:	f7fb fbaa 	bl	800a69c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ef48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	891c      	ldrh	r4, [r3, #8]
 800ef4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	899b      	ldrh	r3, [r3, #12]
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fa f97d 	bl	8009258 <lwip_htons>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	f003 0303 	and.w	r3, r3, #3
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d001      	beq.n	800ef6e <tcp_receive+0xe6a>
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e000      	b.n	800ef70 <tcp_receive+0xe6c>
 800ef6e:	2300      	movs	r3, #0
 800ef70:	4423      	add	r3, r4
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	4b2a      	ldr	r3, [pc, #168]	; (800f020 <tcp_receive+0xf1c>)
 800ef76:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ef78:	4b29      	ldr	r3, [pc, #164]	; (800f020 <tcp_receive+0xf1c>)
 800ef7a:	881b      	ldrh	r3, [r3, #0]
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	4b26      	ldr	r3, [pc, #152]	; (800f018 <tcp_receive+0xf14>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	441a      	add	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef88:	6879      	ldr	r1, [r7, #4]
 800ef8a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef8c:	440b      	add	r3, r1
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d019      	beq.n	800efc6 <tcp_receive+0xec2>
 800ef92:	4b24      	ldr	r3, [pc, #144]	; (800f024 <tcp_receive+0xf20>)
 800ef94:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ef98:	4923      	ldr	r1, [pc, #140]	; (800f028 <tcp_receive+0xf24>)
 800ef9a:	4824      	ldr	r0, [pc, #144]	; (800f02c <tcp_receive+0xf28>)
 800ef9c:	f005 f97c 	bl	8014298 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800efa0:	e011      	b.n	800efc6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800efa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	63bb      	str	r3, [r7, #56]	; 0x38
 800efa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f47f aea4 	bne.w	800ecf8 <tcp_receive+0xbf4>
 800efb0:	e00a      	b.n	800efc8 <tcp_receive+0xec4>
                break;
 800efb2:	bf00      	nop
 800efb4:	e008      	b.n	800efc8 <tcp_receive+0xec4>
                break;
 800efb6:	bf00      	nop
 800efb8:	e006      	b.n	800efc8 <tcp_receive+0xec4>
                  break;
 800efba:	bf00      	nop
 800efbc:	e004      	b.n	800efc8 <tcp_receive+0xec4>
                  break;
 800efbe:	bf00      	nop
 800efc0:	e002      	b.n	800efc8 <tcp_receive+0xec4>
                  break;
 800efc2:	bf00      	nop
 800efc4:	e000      	b.n	800efc8 <tcp_receive+0xec4>
                break;
 800efc6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f001 fe9b 	bl	8010d04 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800efce:	e003      	b.n	800efd8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f001 fe97 	bl	8010d04 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800efd6:	e01a      	b.n	800f00e <tcp_receive+0xf0a>
 800efd8:	e019      	b.n	800f00e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800efda:	4b0f      	ldr	r3, [pc, #60]	; (800f018 <tcp_receive+0xf14>)
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	db0a      	blt.n	800effe <tcp_receive+0xefa>
 800efe8:	4b0b      	ldr	r3, [pc, #44]	; (800f018 <tcp_receive+0xf14>)
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff0:	6879      	ldr	r1, [r7, #4]
 800eff2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eff4:	440b      	add	r3, r1
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	3301      	adds	r3, #1
 800effa:	2b00      	cmp	r3, #0
 800effc:	dd07      	ble.n	800f00e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	8b5b      	ldrh	r3, [r3, #26]
 800f002:	f043 0302 	orr.w	r3, r3, #2
 800f006:	b29a      	uxth	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f00c:	e7ff      	b.n	800f00e <tcp_receive+0xf0a>
 800f00e:	bf00      	nop
 800f010:	3750      	adds	r7, #80	; 0x50
 800f012:	46bd      	mov	sp, r7
 800f014:	bdb0      	pop	{r4, r5, r7, pc}
 800f016:	bf00      	nop
 800f018:	200042bc 	.word	0x200042bc
 800f01c:	2000429c 	.word	0x2000429c
 800f020:	200042c6 	.word	0x200042c6
 800f024:	08017030 	.word	0x08017030
 800f028:	080173d8 	.word	0x080173d8
 800f02c:	0801707c 	.word	0x0801707c

0800f030 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f036:	4b15      	ldr	r3, [pc, #84]	; (800f08c <tcp_get_next_optbyte+0x5c>)
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	1c5a      	adds	r2, r3, #1
 800f03c:	b291      	uxth	r1, r2
 800f03e:	4a13      	ldr	r2, [pc, #76]	; (800f08c <tcp_get_next_optbyte+0x5c>)
 800f040:	8011      	strh	r1, [r2, #0]
 800f042:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f044:	4b12      	ldr	r3, [pc, #72]	; (800f090 <tcp_get_next_optbyte+0x60>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d004      	beq.n	800f056 <tcp_get_next_optbyte+0x26>
 800f04c:	4b11      	ldr	r3, [pc, #68]	; (800f094 <tcp_get_next_optbyte+0x64>)
 800f04e:	881b      	ldrh	r3, [r3, #0]
 800f050:	88fa      	ldrh	r2, [r7, #6]
 800f052:	429a      	cmp	r2, r3
 800f054:	d208      	bcs.n	800f068 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f056:	4b10      	ldr	r3, [pc, #64]	; (800f098 <tcp_get_next_optbyte+0x68>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	3314      	adds	r3, #20
 800f05c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f05e:	88fb      	ldrh	r3, [r7, #6]
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	4413      	add	r3, r2
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	e00b      	b.n	800f080 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f068:	88fb      	ldrh	r3, [r7, #6]
 800f06a:	b2da      	uxtb	r2, r3
 800f06c:	4b09      	ldr	r3, [pc, #36]	; (800f094 <tcp_get_next_optbyte+0x64>)
 800f06e:	881b      	ldrh	r3, [r3, #0]
 800f070:	b2db      	uxtb	r3, r3
 800f072:	1ad3      	subs	r3, r2, r3
 800f074:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f076:	4b06      	ldr	r3, [pc, #24]	; (800f090 <tcp_get_next_optbyte+0x60>)
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	797b      	ldrb	r3, [r7, #5]
 800f07c:	4413      	add	r3, r2
 800f07e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f080:	4618      	mov	r0, r3
 800f082:	370c      	adds	r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr
 800f08c:	200042b8 	.word	0x200042b8
 800f090:	200042b4 	.word	0x200042b4
 800f094:	200042b2 	.word	0x200042b2
 800f098:	200042ac 	.word	0x200042ac

0800f09c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d106      	bne.n	800f0b8 <tcp_parseopt+0x1c>
 800f0aa:	4b31      	ldr	r3, [pc, #196]	; (800f170 <tcp_parseopt+0xd4>)
 800f0ac:	f240 727d 	movw	r2, #1917	; 0x77d
 800f0b0:	4930      	ldr	r1, [pc, #192]	; (800f174 <tcp_parseopt+0xd8>)
 800f0b2:	4831      	ldr	r0, [pc, #196]	; (800f178 <tcp_parseopt+0xdc>)
 800f0b4:	f005 f8f0 	bl	8014298 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f0b8:	4b30      	ldr	r3, [pc, #192]	; (800f17c <tcp_parseopt+0xe0>)
 800f0ba:	881b      	ldrh	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d053      	beq.n	800f168 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f0c0:	4b2f      	ldr	r3, [pc, #188]	; (800f180 <tcp_parseopt+0xe4>)
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	801a      	strh	r2, [r3, #0]
 800f0c6:	e043      	b.n	800f150 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800f0c8:	f7ff ffb2 	bl	800f030 <tcp_get_next_optbyte>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d03c      	beq.n	800f150 <tcp_parseopt+0xb4>
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	d002      	beq.n	800f0e0 <tcp_parseopt+0x44>
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d03f      	beq.n	800f15e <tcp_parseopt+0xc2>
 800f0de:	e026      	b.n	800f12e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f0e0:	f7ff ffa6 	bl	800f030 <tcp_get_next_optbyte>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b04      	cmp	r3, #4
 800f0e8:	d13b      	bne.n	800f162 <tcp_parseopt+0xc6>
 800f0ea:	4b25      	ldr	r3, [pc, #148]	; (800f180 <tcp_parseopt+0xe4>)
 800f0ec:	881b      	ldrh	r3, [r3, #0]
 800f0ee:	3302      	adds	r3, #2
 800f0f0:	4a22      	ldr	r2, [pc, #136]	; (800f17c <tcp_parseopt+0xe0>)
 800f0f2:	8812      	ldrh	r2, [r2, #0]
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	dc34      	bgt.n	800f162 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f0f8:	f7ff ff9a 	bl	800f030 <tcp_get_next_optbyte>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	021b      	lsls	r3, r3, #8
 800f102:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f104:	f7ff ff94 	bl	800f030 <tcp_get_next_optbyte>
 800f108:	4603      	mov	r3, r0
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	89bb      	ldrh	r3, [r7, #12]
 800f10e:	4313      	orrs	r3, r2
 800f110:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f112:	89bb      	ldrh	r3, [r7, #12]
 800f114:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f118:	d804      	bhi.n	800f124 <tcp_parseopt+0x88>
 800f11a:	89bb      	ldrh	r3, [r7, #12]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d001      	beq.n	800f124 <tcp_parseopt+0x88>
 800f120:	89ba      	ldrh	r2, [r7, #12]
 800f122:	e001      	b.n	800f128 <tcp_parseopt+0x8c>
 800f124:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f12c:	e010      	b.n	800f150 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f12e:	f7ff ff7f 	bl	800f030 <tcp_get_next_optbyte>
 800f132:	4603      	mov	r3, r0
 800f134:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f136:	7afb      	ldrb	r3, [r7, #11]
 800f138:	2b01      	cmp	r3, #1
 800f13a:	d914      	bls.n	800f166 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f13c:	7afb      	ldrb	r3, [r7, #11]
 800f13e:	b29a      	uxth	r2, r3
 800f140:	4b0f      	ldr	r3, [pc, #60]	; (800f180 <tcp_parseopt+0xe4>)
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	4413      	add	r3, r2
 800f146:	b29b      	uxth	r3, r3
 800f148:	3b02      	subs	r3, #2
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	4b0c      	ldr	r3, [pc, #48]	; (800f180 <tcp_parseopt+0xe4>)
 800f14e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f150:	4b0b      	ldr	r3, [pc, #44]	; (800f180 <tcp_parseopt+0xe4>)
 800f152:	881a      	ldrh	r2, [r3, #0]
 800f154:	4b09      	ldr	r3, [pc, #36]	; (800f17c <tcp_parseopt+0xe0>)
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d3b5      	bcc.n	800f0c8 <tcp_parseopt+0x2c>
 800f15c:	e004      	b.n	800f168 <tcp_parseopt+0xcc>
          return;
 800f15e:	bf00      	nop
 800f160:	e002      	b.n	800f168 <tcp_parseopt+0xcc>
            return;
 800f162:	bf00      	nop
 800f164:	e000      	b.n	800f168 <tcp_parseopt+0xcc>
            return;
 800f166:	bf00      	nop
      }
    }
  }
}
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	08017030 	.word	0x08017030
 800f174:	08017494 	.word	0x08017494
 800f178:	0801707c 	.word	0x0801707c
 800f17c:	200042b0 	.word	0x200042b0
 800f180:	200042b8 	.word	0x200042b8

0800f184 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f184:	b480      	push	{r7}
 800f186:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f188:	4b05      	ldr	r3, [pc, #20]	; (800f1a0 <tcp_trigger_input_pcb_close+0x1c>)
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	f043 0310 	orr.w	r3, r3, #16
 800f190:	b2da      	uxtb	r2, r3
 800f192:	4b03      	ldr	r3, [pc, #12]	; (800f1a0 <tcp_trigger_input_pcb_close+0x1c>)
 800f194:	701a      	strb	r2, [r3, #0]
}
 800f196:	bf00      	nop
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr
 800f1a0:	200042c9 	.word	0x200042c9

0800f1a4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00a      	beq.n	800f1cc <tcp_route+0x28>
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	7a1b      	ldrb	r3, [r3, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d006      	beq.n	800f1cc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	7a1b      	ldrb	r3, [r3, #8]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fb f866 	bl	800a294 <netif_get_by_index>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	e003      	b.n	800f1d4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f003 fc5b 	bl	8012a88 <ip4_route>
 800f1d2:	4603      	mov	r3, r0
  }
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3710      	adds	r7, #16
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f1dc:	b590      	push	{r4, r7, lr}
 800f1de:	b087      	sub	sp, #28
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	603b      	str	r3, [r7, #0]
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d105      	bne.n	800f1fe <tcp_create_segment+0x22>
 800f1f2:	4b44      	ldr	r3, [pc, #272]	; (800f304 <tcp_create_segment+0x128>)
 800f1f4:	22a3      	movs	r2, #163	; 0xa3
 800f1f6:	4944      	ldr	r1, [pc, #272]	; (800f308 <tcp_create_segment+0x12c>)
 800f1f8:	4844      	ldr	r0, [pc, #272]	; (800f30c <tcp_create_segment+0x130>)
 800f1fa:	f005 f84d 	bl	8014298 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d105      	bne.n	800f210 <tcp_create_segment+0x34>
 800f204:	4b3f      	ldr	r3, [pc, #252]	; (800f304 <tcp_create_segment+0x128>)
 800f206:	22a4      	movs	r2, #164	; 0xa4
 800f208:	4941      	ldr	r1, [pc, #260]	; (800f310 <tcp_create_segment+0x134>)
 800f20a:	4840      	ldr	r0, [pc, #256]	; (800f30c <tcp_create_segment+0x130>)
 800f20c:	f005 f844 	bl	8014298 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f210:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	b2db      	uxtb	r3, r3
 800f218:	f003 0304 	and.w	r3, r3, #4
 800f21c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f21e:	2003      	movs	r0, #3
 800f220:	f7fa fcd0 	bl	8009bc4 <memp_malloc>
 800f224:	6138      	str	r0, [r7, #16]
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d104      	bne.n	800f236 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f22c:	68b8      	ldr	r0, [r7, #8]
 800f22e:	f7fb fbbb 	bl	800a9a8 <pbuf_free>
    return NULL;
 800f232:	2300      	movs	r3, #0
 800f234:	e061      	b.n	800f2fa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f23c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	2200      	movs	r2, #0
 800f242:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	891a      	ldrh	r2, [r3, #8]
 800f24e:	7dfb      	ldrb	r3, [r7, #23]
 800f250:	b29b      	uxth	r3, r3
 800f252:	429a      	cmp	r2, r3
 800f254:	d205      	bcs.n	800f262 <tcp_create_segment+0x86>
 800f256:	4b2b      	ldr	r3, [pc, #172]	; (800f304 <tcp_create_segment+0x128>)
 800f258:	22b0      	movs	r2, #176	; 0xb0
 800f25a:	492e      	ldr	r1, [pc, #184]	; (800f314 <tcp_create_segment+0x138>)
 800f25c:	482b      	ldr	r0, [pc, #172]	; (800f30c <tcp_create_segment+0x130>)
 800f25e:	f005 f81b 	bl	8014298 <iprintf>
  seg->len = p->tot_len - optlen;
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	891a      	ldrh	r2, [r3, #8]
 800f266:	7dfb      	ldrb	r3, [r7, #23]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f272:	2114      	movs	r1, #20
 800f274:	68b8      	ldr	r0, [r7, #8]
 800f276:	f7fb fb01 	bl	800a87c <pbuf_add_header>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d004      	beq.n	800f28a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f280:	6938      	ldr	r0, [r7, #16]
 800f282:	f7fd f807 	bl	800c294 <tcp_seg_free>
    return NULL;
 800f286:	2300      	movs	r3, #0
 800f288:	e037      	b.n	800f2fa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	685a      	ldr	r2, [r3, #4]
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	8ada      	ldrh	r2, [r3, #22]
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	68dc      	ldr	r4, [r3, #12]
 800f29c:	4610      	mov	r0, r2
 800f29e:	f7f9 ffdb 	bl	8009258 <lwip_htons>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	8b1a      	ldrh	r2, [r3, #24]
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	68dc      	ldr	r4, [r3, #12]
 800f2ae:	4610      	mov	r0, r2
 800f2b0:	f7f9 ffd2 	bl	8009258 <lwip_htons>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	68dc      	ldr	r4, [r3, #12]
 800f2bc:	6838      	ldr	r0, [r7, #0]
 800f2be:	f7f9 ffe0 	bl	8009282 <lwip_htonl>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f2c6:	7dfb      	ldrb	r3, [r7, #23]
 800f2c8:	089b      	lsrs	r3, r3, #2
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	3305      	adds	r3, #5
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	031b      	lsls	r3, r3, #12
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	79fb      	ldrb	r3, [r7, #7]
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	b29a      	uxth	r2, r3
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	68dc      	ldr	r4, [r3, #12]
 800f2e2:	4610      	mov	r0, r2
 800f2e4:	f7f9 ffb8 	bl	8009258 <lwip_htons>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	749a      	strb	r2, [r3, #18]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	74da      	strb	r2, [r3, #19]
  return seg;
 800f2f8:	693b      	ldr	r3, [r7, #16]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	371c      	adds	r7, #28
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd90      	pop	{r4, r7, pc}
 800f302:	bf00      	nop
 800f304:	080174b0 	.word	0x080174b0
 800f308:	080174e4 	.word	0x080174e4
 800f30c:	08017504 	.word	0x08017504
 800f310:	0801752c 	.word	0x0801752c
 800f314:	08017550 	.word	0x08017550

0800f318 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b086      	sub	sp, #24
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	607b      	str	r3, [r7, #4]
 800f320:	4603      	mov	r3, r0
 800f322:	73fb      	strb	r3, [r7, #15]
 800f324:	460b      	mov	r3, r1
 800f326:	81bb      	strh	r3, [r7, #12]
 800f328:	4613      	mov	r3, r2
 800f32a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800f32c:	89bb      	ldrh	r3, [r7, #12]
 800f32e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d105      	bne.n	800f342 <tcp_pbuf_prealloc+0x2a>
 800f336:	4b30      	ldr	r3, [pc, #192]	; (800f3f8 <tcp_pbuf_prealloc+0xe0>)
 800f338:	22e8      	movs	r2, #232	; 0xe8
 800f33a:	4930      	ldr	r1, [pc, #192]	; (800f3fc <tcp_pbuf_prealloc+0xe4>)
 800f33c:	4830      	ldr	r0, [pc, #192]	; (800f400 <tcp_pbuf_prealloc+0xe8>)
 800f33e:	f004 ffab 	bl	8014298 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f342:	6a3b      	ldr	r3, [r7, #32]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d105      	bne.n	800f354 <tcp_pbuf_prealloc+0x3c>
 800f348:	4b2b      	ldr	r3, [pc, #172]	; (800f3f8 <tcp_pbuf_prealloc+0xe0>)
 800f34a:	22e9      	movs	r2, #233	; 0xe9
 800f34c:	492d      	ldr	r1, [pc, #180]	; (800f404 <tcp_pbuf_prealloc+0xec>)
 800f34e:	482c      	ldr	r0, [pc, #176]	; (800f400 <tcp_pbuf_prealloc+0xe8>)
 800f350:	f004 ffa2 	bl	8014298 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f354:	89ba      	ldrh	r2, [r7, #12]
 800f356:	897b      	ldrh	r3, [r7, #10]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d221      	bcs.n	800f3a0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f35c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f360:	f003 0302 	and.w	r3, r3, #2
 800f364:	2b00      	cmp	r3, #0
 800f366:	d111      	bne.n	800f38c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800f368:	6a3b      	ldr	r3, [r7, #32]
 800f36a:	8b5b      	ldrh	r3, [r3, #26]
 800f36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f370:	2b00      	cmp	r3, #0
 800f372:	d115      	bne.n	800f3a0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800f374:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d007      	beq.n	800f38c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800f380:	2b00      	cmp	r3, #0
 800f382:	d103      	bne.n	800f38c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800f384:	6a3b      	ldr	r3, [r7, #32]
 800f386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d009      	beq.n	800f3a0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f38c:	89bb      	ldrh	r3, [r7, #12]
 800f38e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f392:	f023 0203 	bic.w	r2, r3, #3
 800f396:	897b      	ldrh	r3, [r7, #10]
 800f398:	4293      	cmp	r3, r2
 800f39a:	bf28      	it	cs
 800f39c:	4613      	movcs	r3, r2
 800f39e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f3a0:	8af9      	ldrh	r1, [r7, #22]
 800f3a2:	7bfb      	ldrb	r3, [r7, #15]
 800f3a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7fb f81d 	bl	800a3e8 <pbuf_alloc>
 800f3ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d101      	bne.n	800f3ba <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	e019      	b.n	800f3ee <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d006      	beq.n	800f3d0 <tcp_pbuf_prealloc+0xb8>
 800f3c2:	4b0d      	ldr	r3, [pc, #52]	; (800f3f8 <tcp_pbuf_prealloc+0xe0>)
 800f3c4:	f240 120b 	movw	r2, #267	; 0x10b
 800f3c8:	490f      	ldr	r1, [pc, #60]	; (800f408 <tcp_pbuf_prealloc+0xf0>)
 800f3ca:	480d      	ldr	r0, [pc, #52]	; (800f400 <tcp_pbuf_prealloc+0xe8>)
 800f3cc:	f004 ff64 	bl	8014298 <iprintf>
  *oversize = p->len - length;
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	895a      	ldrh	r2, [r3, #10]
 800f3d4:	89bb      	ldrh	r3, [r7, #12]
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	b29a      	uxth	r2, r3
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	89ba      	ldrh	r2, [r7, #12]
 800f3e2:	811a      	strh	r2, [r3, #8]
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	891a      	ldrh	r2, [r3, #8]
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	815a      	strh	r2, [r3, #10]
  return p;
 800f3ec:	693b      	ldr	r3, [r7, #16]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3718      	adds	r7, #24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	080174b0 	.word	0x080174b0
 800f3fc:	08017568 	.word	0x08017568
 800f400:	08017504 	.word	0x08017504
 800f404:	0801758c 	.word	0x0801758c
 800f408:	080175ac 	.word	0x080175ac

0800f40c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	460b      	mov	r3, r1
 800f416:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d106      	bne.n	800f42c <tcp_write_checks+0x20>
 800f41e:	4b33      	ldr	r3, [pc, #204]	; (800f4ec <tcp_write_checks+0xe0>)
 800f420:	f240 1233 	movw	r2, #307	; 0x133
 800f424:	4932      	ldr	r1, [pc, #200]	; (800f4f0 <tcp_write_checks+0xe4>)
 800f426:	4833      	ldr	r0, [pc, #204]	; (800f4f4 <tcp_write_checks+0xe8>)
 800f428:	f004 ff36 	bl	8014298 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	7d1b      	ldrb	r3, [r3, #20]
 800f430:	2b04      	cmp	r3, #4
 800f432:	d00e      	beq.n	800f452 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800f438:	2b07      	cmp	r3, #7
 800f43a:	d00a      	beq.n	800f452 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f440:	2b02      	cmp	r3, #2
 800f442:	d006      	beq.n	800f452 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800f448:	2b03      	cmp	r3, #3
 800f44a:	d002      	beq.n	800f452 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800f44c:	f06f 030a 	mvn.w	r3, #10
 800f450:	e048      	b.n	800f4e4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800f452:	887b      	ldrh	r3, [r7, #2]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d101      	bne.n	800f45c <tcp_write_checks+0x50>
    return ERR_OK;
 800f458:	2300      	movs	r3, #0
 800f45a:	e043      	b.n	800f4e4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f462:	887a      	ldrh	r2, [r7, #2]
 800f464:	429a      	cmp	r2, r3
 800f466:	d909      	bls.n	800f47c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	8b5b      	ldrh	r3, [r3, #26]
 800f46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f470:	b29a      	uxth	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f476:	f04f 33ff 	mov.w	r3, #4294967295
 800f47a:	e033      	b.n	800f4e4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f482:	2b08      	cmp	r3, #8
 800f484:	d909      	bls.n	800f49a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	8b5b      	ldrh	r3, [r3, #26]
 800f48a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f48e:	b29a      	uxth	r2, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f494:	f04f 33ff 	mov.w	r3, #4294967295
 800f498:	e024      	b.n	800f4e4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d00f      	beq.n	800f4c4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d11a      	bne.n	800f4e2 <tcp_write_checks+0xd6>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d116      	bne.n	800f4e2 <tcp_write_checks+0xd6>
 800f4b4:	4b0d      	ldr	r3, [pc, #52]	; (800f4ec <tcp_write_checks+0xe0>)
 800f4b6:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800f4ba:	490f      	ldr	r1, [pc, #60]	; (800f4f8 <tcp_write_checks+0xec>)
 800f4bc:	480d      	ldr	r0, [pc, #52]	; (800f4f4 <tcp_write_checks+0xe8>)
 800f4be:	f004 feeb 	bl	8014298 <iprintf>
 800f4c2:	e00e      	b.n	800f4e2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d103      	bne.n	800f4d4 <tcp_write_checks+0xc8>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d006      	beq.n	800f4e2 <tcp_write_checks+0xd6>
 800f4d4:	4b05      	ldr	r3, [pc, #20]	; (800f4ec <tcp_write_checks+0xe0>)
 800f4d6:	f240 1259 	movw	r2, #345	; 0x159
 800f4da:	4908      	ldr	r1, [pc, #32]	; (800f4fc <tcp_write_checks+0xf0>)
 800f4dc:	4805      	ldr	r0, [pc, #20]	; (800f4f4 <tcp_write_checks+0xe8>)
 800f4de:	f004 fedb 	bl	8014298 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800f4e2:	2300      	movs	r3, #0
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	080174b0 	.word	0x080174b0
 800f4f0:	080175c0 	.word	0x080175c0
 800f4f4:	08017504 	.word	0x08017504
 800f4f8:	080175e0 	.word	0x080175e0
 800f4fc:	0801761c 	.word	0x0801761c

0800f500 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800f500:	b590      	push	{r4, r7, lr}
 800f502:	b09b      	sub	sp, #108	; 0x6c
 800f504:	af04      	add	r7, sp, #16
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	4611      	mov	r1, r2
 800f50c:	461a      	mov	r2, r3
 800f50e:	460b      	mov	r3, r1
 800f510:	80fb      	strh	r3, [r7, #6]
 800f512:	4613      	mov	r3, r2
 800f514:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800f516:	2300      	movs	r3, #0
 800f518:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f51a:	2300      	movs	r3, #0
 800f51c:	653b      	str	r3, [r7, #80]	; 0x50
 800f51e:	2300      	movs	r3, #0
 800f520:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f522:	2300      	movs	r3, #0
 800f524:	64bb      	str	r3, [r7, #72]	; 0x48
 800f526:	2300      	movs	r3, #0
 800f528:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800f52a:	2300      	movs	r3, #0
 800f52c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800f530:	2300      	movs	r3, #0
 800f532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800f536:	2300      	movs	r3, #0
 800f538:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800f53a:	2300      	movs	r3, #0
 800f53c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d109      	bne.n	800f55c <tcp_write+0x5c>
 800f548:	4ba5      	ldr	r3, [pc, #660]	; (800f7e0 <tcp_write+0x2e0>)
 800f54a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800f54e:	49a5      	ldr	r1, [pc, #660]	; (800f7e4 <tcp_write+0x2e4>)
 800f550:	48a5      	ldr	r0, [pc, #660]	; (800f7e8 <tcp_write+0x2e8>)
 800f552:	f004 fea1 	bl	8014298 <iprintf>
 800f556:	f06f 030f 	mvn.w	r3, #15
 800f55a:	e32c      	b.n	800fbb6 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f562:	085b      	lsrs	r3, r3, #1
 800f564:	b29a      	uxth	r2, r3
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f56a:	4293      	cmp	r3, r2
 800f56c:	bf28      	it	cs
 800f56e:	4613      	movcs	r3, r2
 800f570:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800f572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f574:	2b00      	cmp	r3, #0
 800f576:	d102      	bne.n	800f57e <tcp_write+0x7e>
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f57c:	e000      	b.n	800f580 <tcp_write+0x80>
 800f57e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f580:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d109      	bne.n	800f59c <tcp_write+0x9c>
 800f588:	4b95      	ldr	r3, [pc, #596]	; (800f7e0 <tcp_write+0x2e0>)
 800f58a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800f58e:	4997      	ldr	r1, [pc, #604]	; (800f7ec <tcp_write+0x2ec>)
 800f590:	4895      	ldr	r0, [pc, #596]	; (800f7e8 <tcp_write+0x2e8>)
 800f592:	f004 fe81 	bl	8014298 <iprintf>
 800f596:	f06f 030f 	mvn.w	r3, #15
 800f59a:	e30c      	b.n	800fbb6 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800f59c:	88fb      	ldrh	r3, [r7, #6]
 800f59e:	4619      	mov	r1, r3
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f7ff ff33 	bl	800f40c <tcp_write_checks>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800f5ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d002      	beq.n	800f5ba <tcp_write+0xba>
    return err;
 800f5b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f5b8:	e2fd      	b.n	800fbb6 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f5c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f000 80f7 	beq.w	800f7c2 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5d8:	653b      	str	r3, [r7, #80]	; 0x50
 800f5da:	e002      	b.n	800f5e2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800f5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f5e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d1f8      	bne.n	800f5dc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f5ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5ec:	7a9b      	ldrb	r3, [r3, #10]
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	f003 0304 	and.w	r3, r3, #4
 800f5f6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f5f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f5fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5fc:	891b      	ldrh	r3, [r3, #8]
 800f5fe:	4619      	mov	r1, r3
 800f600:	8c3b      	ldrh	r3, [r7, #32]
 800f602:	440b      	add	r3, r1
 800f604:	429a      	cmp	r2, r3
 800f606:	da06      	bge.n	800f616 <tcp_write+0x116>
 800f608:	4b75      	ldr	r3, [pc, #468]	; (800f7e0 <tcp_write+0x2e0>)
 800f60a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f60e:	4978      	ldr	r1, [pc, #480]	; (800f7f0 <tcp_write+0x2f0>)
 800f610:	4875      	ldr	r0, [pc, #468]	; (800f7e8 <tcp_write+0x2e8>)
 800f612:	f004 fe41 	bl	8014298 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f618:	891a      	ldrh	r2, [r3, #8]
 800f61a:	8c3b      	ldrh	r3, [r7, #32]
 800f61c:	4413      	add	r3, r2
 800f61e:	b29b      	uxth	r3, r3
 800f620:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f62c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800f62e:	8a7b      	ldrh	r3, [r7, #18]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d027      	beq.n	800f684 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f634:	8a7b      	ldrh	r3, [r7, #18]
 800f636:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f638:	429a      	cmp	r2, r3
 800f63a:	d206      	bcs.n	800f64a <tcp_write+0x14a>
 800f63c:	4b68      	ldr	r3, [pc, #416]	; (800f7e0 <tcp_write+0x2e0>)
 800f63e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800f642:	496c      	ldr	r1, [pc, #432]	; (800f7f4 <tcp_write+0x2f4>)
 800f644:	4868      	ldr	r0, [pc, #416]	; (800f7e8 <tcp_write+0x2e8>)
 800f646:	f004 fe27 	bl	8014298 <iprintf>
      seg = last_unsent;
 800f64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f64c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f64e:	8a7b      	ldrh	r3, [r7, #18]
 800f650:	88fa      	ldrh	r2, [r7, #6]
 800f652:	429a      	cmp	r2, r3
 800f654:	d901      	bls.n	800f65a <tcp_write+0x15a>
 800f656:	8a7b      	ldrh	r3, [r7, #18]
 800f658:	e000      	b.n	800f65c <tcp_write+0x15c>
 800f65a:	88fb      	ldrh	r3, [r7, #6]
 800f65c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f65e:	4293      	cmp	r3, r2
 800f660:	bfa8      	it	ge
 800f662:	4613      	movge	r3, r2
 800f664:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800f666:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f66a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f66c:	4413      	add	r3, r2
 800f66e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800f672:	8a7a      	ldrh	r2, [r7, #18]
 800f674:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f676:	1ad3      	subs	r3, r2, r3
 800f678:	b29b      	uxth	r3, r3
 800f67a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800f67c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f67e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f684:	8a7b      	ldrh	r3, [r7, #18]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00b      	beq.n	800f6a2 <tcp_write+0x1a2>
 800f68a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f68e:	88fb      	ldrh	r3, [r7, #6]
 800f690:	429a      	cmp	r2, r3
 800f692:	d006      	beq.n	800f6a2 <tcp_write+0x1a2>
 800f694:	4b52      	ldr	r3, [pc, #328]	; (800f7e0 <tcp_write+0x2e0>)
 800f696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f69a:	4957      	ldr	r1, [pc, #348]	; (800f7f8 <tcp_write+0x2f8>)
 800f69c:	4852      	ldr	r0, [pc, #328]	; (800f7e8 <tcp_write+0x2e8>)
 800f69e:	f004 fdfb 	bl	8014298 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f6a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f6a6:	88fb      	ldrh	r3, [r7, #6]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	f080 8168 	bcs.w	800f97e <tcp_write+0x47e>
 800f6ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	f000 8164 	beq.w	800f97e <tcp_write+0x47e>
 800f6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6b8:	891b      	ldrh	r3, [r3, #8]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f000 815f 	beq.w	800f97e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f6c0:	88fa      	ldrh	r2, [r7, #6]
 800f6c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f6c6:	1ad2      	subs	r2, r2, r3
 800f6c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	bfa8      	it	ge
 800f6ce:	4613      	movge	r3, r2
 800f6d0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800f6d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6d4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f6d6:	797b      	ldrb	r3, [r7, #5]
 800f6d8:	f003 0301 	and.w	r3, r3, #1
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d027      	beq.n	800f730 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800f6e0:	f107 0012 	add.w	r0, r7, #18
 800f6e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f6e6:	8bf9      	ldrh	r1, [r7, #30]
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	9302      	str	r3, [sp, #8]
 800f6ec:	797b      	ldrb	r3, [r7, #5]
 800f6ee:	9301      	str	r3, [sp, #4]
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	9300      	str	r3, [sp, #0]
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	f7ff fe0e 	bl	800f318 <tcp_pbuf_prealloc>
 800f6fc:	6578      	str	r0, [r7, #84]	; 0x54
 800f6fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f700:	2b00      	cmp	r3, #0
 800f702:	f000 8226 	beq.w	800fb52 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800f706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f708:	6858      	ldr	r0, [r3, #4]
 800f70a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f70e:	68ba      	ldr	r2, [r7, #8]
 800f710:	4413      	add	r3, r2
 800f712:	8bfa      	ldrh	r2, [r7, #30]
 800f714:	4619      	mov	r1, r3
 800f716:	f004 fdac 	bl	8014272 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800f71a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f71c:	f7fb f9d2 	bl	800aac4 <pbuf_clen>
 800f720:	4603      	mov	r3, r0
 800f722:	461a      	mov	r2, r3
 800f724:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f728:	4413      	add	r3, r2
 800f72a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f72e:	e041      	b.n	800f7b4 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f732:	685b      	ldr	r3, [r3, #4]
 800f734:	637b      	str	r3, [r7, #52]	; 0x34
 800f736:	e002      	b.n	800f73e <tcp_write+0x23e>
 800f738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	637b      	str	r3, [r7, #52]	; 0x34
 800f73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d1f8      	bne.n	800f738 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f748:	7b1b      	ldrb	r3, [r3, #12]
 800f74a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d115      	bne.n	800f77e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f758:	8952      	ldrh	r2, [r2, #10]
 800f75a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d10d      	bne.n	800f77e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f762:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f766:	2b00      	cmp	r3, #0
 800f768:	d006      	beq.n	800f778 <tcp_write+0x278>
 800f76a:	4b1d      	ldr	r3, [pc, #116]	; (800f7e0 <tcp_write+0x2e0>)
 800f76c:	f240 2231 	movw	r2, #561	; 0x231
 800f770:	4922      	ldr	r1, [pc, #136]	; (800f7fc <tcp_write+0x2fc>)
 800f772:	481d      	ldr	r0, [pc, #116]	; (800f7e8 <tcp_write+0x2e8>)
 800f774:	f004 fd90 	bl	8014298 <iprintf>
          extendlen = seglen;
 800f778:	8bfb      	ldrh	r3, [r7, #30]
 800f77a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f77c:	e01a      	b.n	800f7b4 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f77e:	8bfb      	ldrh	r3, [r7, #30]
 800f780:	2201      	movs	r2, #1
 800f782:	4619      	mov	r1, r3
 800f784:	2000      	movs	r0, #0
 800f786:	f7fa fe2f 	bl	800a3e8 <pbuf_alloc>
 800f78a:	6578      	str	r0, [r7, #84]	; 0x54
 800f78c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f78e:	2b00      	cmp	r3, #0
 800f790:	f000 81e1 	beq.w	800fb56 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800f794:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f798:	68ba      	ldr	r2, [r7, #8]
 800f79a:	441a      	add	r2, r3
 800f79c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f79e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800f7a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f7a2:	f7fb f98f 	bl	800aac4 <pbuf_clen>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f7ae:	4413      	add	r3, r2
 800f7b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800f7b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f7b8:	8bfb      	ldrh	r3, [r7, #30]
 800f7ba:	4413      	add	r3, r2
 800f7bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f7c0:	e0dd      	b.n	800f97e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	f000 80d8 	beq.w	800f97e <tcp_write+0x47e>
 800f7ce:	4b04      	ldr	r3, [pc, #16]	; (800f7e0 <tcp_write+0x2e0>)
 800f7d0:	f240 224b 	movw	r2, #587	; 0x24b
 800f7d4:	490a      	ldr	r1, [pc, #40]	; (800f800 <tcp_write+0x300>)
 800f7d6:	4804      	ldr	r0, [pc, #16]	; (800f7e8 <tcp_write+0x2e8>)
 800f7d8:	f004 fd5e 	bl	8014298 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800f7dc:	e0cf      	b.n	800f97e <tcp_write+0x47e>
 800f7de:	bf00      	nop
 800f7e0:	080174b0 	.word	0x080174b0
 800f7e4:	08017650 	.word	0x08017650
 800f7e8:	08017504 	.word	0x08017504
 800f7ec:	08017668 	.word	0x08017668
 800f7f0:	0801769c 	.word	0x0801769c
 800f7f4:	080176b4 	.word	0x080176b4
 800f7f8:	080176d4 	.word	0x080176d4
 800f7fc:	080176f4 	.word	0x080176f4
 800f800:	08017720 	.word	0x08017720
    struct pbuf *p;
    u16_t left = len - pos;
 800f804:	88fa      	ldrh	r2, [r7, #6]
 800f806:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f80a:	1ad3      	subs	r3, r2, r3
 800f80c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800f80e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f812:	b29b      	uxth	r3, r3
 800f814:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f816:	1ad3      	subs	r3, r2, r3
 800f818:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800f81a:	8b7a      	ldrh	r2, [r7, #26]
 800f81c:	8bbb      	ldrh	r3, [r7, #28]
 800f81e:	4293      	cmp	r3, r2
 800f820:	bf28      	it	cs
 800f822:	4613      	movcs	r3, r2
 800f824:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f826:	797b      	ldrb	r3, [r7, #5]
 800f828:	f003 0301 	and.w	r3, r3, #1
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d036      	beq.n	800f89e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800f830:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f834:	b29a      	uxth	r2, r3
 800f836:	8b3b      	ldrh	r3, [r7, #24]
 800f838:	4413      	add	r3, r2
 800f83a:	b299      	uxth	r1, r3
 800f83c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f83e:	2b00      	cmp	r3, #0
 800f840:	bf0c      	ite	eq
 800f842:	2301      	moveq	r3, #1
 800f844:	2300      	movne	r3, #0
 800f846:	b2db      	uxtb	r3, r3
 800f848:	f107 0012 	add.w	r0, r7, #18
 800f84c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f84e:	9302      	str	r3, [sp, #8]
 800f850:	797b      	ldrb	r3, [r7, #5]
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	4603      	mov	r3, r0
 800f85a:	2036      	movs	r0, #54	; 0x36
 800f85c:	f7ff fd5c 	bl	800f318 <tcp_pbuf_prealloc>
 800f860:	6338      	str	r0, [r7, #48]	; 0x30
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	2b00      	cmp	r3, #0
 800f866:	f000 8178 	beq.w	800fb5a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800f86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86c:	895b      	ldrh	r3, [r3, #10]
 800f86e:	8b3a      	ldrh	r2, [r7, #24]
 800f870:	429a      	cmp	r2, r3
 800f872:	d906      	bls.n	800f882 <tcp_write+0x382>
 800f874:	4b8c      	ldr	r3, [pc, #560]	; (800faa8 <tcp_write+0x5a8>)
 800f876:	f240 2267 	movw	r2, #615	; 0x267
 800f87a:	498c      	ldr	r1, [pc, #560]	; (800faac <tcp_write+0x5ac>)
 800f87c:	488c      	ldr	r0, [pc, #560]	; (800fab0 <tcp_write+0x5b0>)
 800f87e:	f004 fd0b 	bl	8014298 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800f882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f884:	685a      	ldr	r2, [r3, #4]
 800f886:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f88a:	18d0      	adds	r0, r2, r3
 800f88c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f890:	68ba      	ldr	r2, [r7, #8]
 800f892:	4413      	add	r3, r2
 800f894:	8b3a      	ldrh	r2, [r7, #24]
 800f896:	4619      	mov	r1, r3
 800f898:	f004 fceb 	bl	8014272 <memcpy>
 800f89c:	e02f      	b.n	800f8fe <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800f89e:	8a7b      	ldrh	r3, [r7, #18]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d006      	beq.n	800f8b2 <tcp_write+0x3b2>
 800f8a4:	4b80      	ldr	r3, [pc, #512]	; (800faa8 <tcp_write+0x5a8>)
 800f8a6:	f240 2271 	movw	r2, #625	; 0x271
 800f8aa:	4982      	ldr	r1, [pc, #520]	; (800fab4 <tcp_write+0x5b4>)
 800f8ac:	4880      	ldr	r0, [pc, #512]	; (800fab0 <tcp_write+0x5b0>)
 800f8ae:	f004 fcf3 	bl	8014298 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800f8b2:	8b3b      	ldrh	r3, [r7, #24]
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	2036      	movs	r0, #54	; 0x36
 800f8ba:	f7fa fd95 	bl	800a3e8 <pbuf_alloc>
 800f8be:	6178      	str	r0, [r7, #20]
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f000 814b 	beq.w	800fb5e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800f8c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8cc:	68ba      	ldr	r2, [r7, #8]
 800f8ce:	441a      	add	r2, r3
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f8d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f8de:	4619      	mov	r1, r3
 800f8e0:	2036      	movs	r0, #54	; 0x36
 800f8e2:	f7fa fd81 	bl	800a3e8 <pbuf_alloc>
 800f8e6:	6338      	str	r0, [r7, #48]	; 0x30
 800f8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d103      	bne.n	800f8f6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800f8ee:	6978      	ldr	r0, [r7, #20]
 800f8f0:	f7fb f85a 	bl	800a9a8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800f8f4:	e136      	b.n	800fb64 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800f8f6:	6979      	ldr	r1, [r7, #20]
 800f8f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8fa:	f7fb f923 	bl	800ab44 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800f8fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f900:	f7fb f8e0 	bl	800aac4 <pbuf_clen>
 800f904:	4603      	mov	r3, r0
 800f906:	461a      	mov	r2, r3
 800f908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f90c:	4413      	add	r3, r2
 800f90e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800f912:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f916:	2b09      	cmp	r3, #9
 800f918:	d903      	bls.n	800f922 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800f91a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f91c:	f7fb f844 	bl	800a9a8 <pbuf_free>
      goto memerr;
 800f920:	e120      	b.n	800fb64 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f926:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f92a:	441a      	add	r2, r3
 800f92c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	4613      	mov	r3, r2
 800f934:	2200      	movs	r2, #0
 800f936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f938:	68f8      	ldr	r0, [r7, #12]
 800f93a:	f7ff fc4f 	bl	800f1dc <tcp_create_segment>
 800f93e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f942:	2b00      	cmp	r3, #0
 800f944:	f000 810d 	beq.w	800fb62 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800f948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d102      	bne.n	800f954 <tcp_write+0x454>
      queue = seg;
 800f94e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f950:	647b      	str	r3, [r7, #68]	; 0x44
 800f952:	e00c      	b.n	800f96e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800f954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f956:	2b00      	cmp	r3, #0
 800f958:	d106      	bne.n	800f968 <tcp_write+0x468>
 800f95a:	4b53      	ldr	r3, [pc, #332]	; (800faa8 <tcp_write+0x5a8>)
 800f95c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f960:	4955      	ldr	r1, [pc, #340]	; (800fab8 <tcp_write+0x5b8>)
 800f962:	4853      	ldr	r0, [pc, #332]	; (800fab0 <tcp_write+0x5b0>)
 800f964:	f004 fc98 	bl	8014298 <iprintf>
      prev_seg->next = seg;
 800f968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f96a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f96c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800f96e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f970:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800f972:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f976:	8b3b      	ldrh	r3, [r7, #24]
 800f978:	4413      	add	r3, r2
 800f97a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800f97e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f982:	88fb      	ldrh	r3, [r7, #6]
 800f984:	429a      	cmp	r2, r3
 800f986:	f4ff af3d 	bcc.w	800f804 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800f98a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d02c      	beq.n	800f9ea <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800f990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f996:	e01e      	b.n	800f9d6 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800f998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99a:	891a      	ldrh	r2, [r3, #8]
 800f99c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f99e:	4413      	add	r3, r2
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800f9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d110      	bne.n	800f9d0 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800f9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9b4:	8952      	ldrh	r2, [r2, #10]
 800f9b6:	4413      	add	r3, r2
 800f9b8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f9ba:	68b9      	ldr	r1, [r7, #8]
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f004 fc58 	bl	8014272 <memcpy>
        p->len += oversize_used;
 800f9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c4:	895a      	ldrh	r2, [r3, #10]
 800f9c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9c8:	4413      	add	r3, r2
 800f9ca:	b29a      	uxth	r2, r3
 800f9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ce:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800f9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1dd      	bne.n	800f998 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800f9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9de:	891a      	ldrh	r2, [r3, #8]
 800f9e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9e2:	4413      	add	r3, r2
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9e8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800f9ea:	8a7a      	ldrh	r2, [r7, #18]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800f9f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d018      	beq.n	800fa2a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800f9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d106      	bne.n	800fa0c <tcp_write+0x50c>
 800f9fe:	4b2a      	ldr	r3, [pc, #168]	; (800faa8 <tcp_write+0x5a8>)
 800fa00:	f240 22e1 	movw	r2, #737	; 0x2e1
 800fa04:	492d      	ldr	r1, [pc, #180]	; (800fabc <tcp_write+0x5bc>)
 800fa06:	482a      	ldr	r0, [pc, #168]	; (800fab0 <tcp_write+0x5b0>)
 800fa08:	f004 fc46 	bl	8014298 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800fa0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fb f896 	bl	800ab44 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800fa18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa1a:	891a      	ldrh	r2, [r3, #8]
 800fa1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa1e:	891b      	ldrh	r3, [r3, #8]
 800fa20:	4413      	add	r3, r2
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa26:	811a      	strh	r2, [r3, #8]
 800fa28:	e037      	b.n	800fa9a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800fa2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d034      	beq.n	800fa9a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800fa30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d003      	beq.n	800fa3e <tcp_write+0x53e>
 800fa36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d106      	bne.n	800fa4c <tcp_write+0x54c>
 800fa3e:	4b1a      	ldr	r3, [pc, #104]	; (800faa8 <tcp_write+0x5a8>)
 800fa40:	f240 22e7 	movw	r2, #743	; 0x2e7
 800fa44:	491e      	ldr	r1, [pc, #120]	; (800fac0 <tcp_write+0x5c0>)
 800fa46:	481a      	ldr	r0, [pc, #104]	; (800fab0 <tcp_write+0x5b0>)
 800fa48:	f004 fc26 	bl	8014298 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fa4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa52:	e009      	b.n	800fa68 <tcp_write+0x568>
      p->tot_len += extendlen;
 800fa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa56:	891a      	ldrh	r2, [r3, #8]
 800fa58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa5a:	4413      	add	r3, r2
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa60:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1f1      	bne.n	800fa54 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800fa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa72:	891a      	ldrh	r2, [r3, #8]
 800fa74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa76:	4413      	add	r3, r2
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800fa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa80:	895a      	ldrh	r2, [r3, #10]
 800fa82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa84:	4413      	add	r3, r2
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa8a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800fa8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa8e:	891a      	ldrh	r2, [r3, #8]
 800fa90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa92:	4413      	add	r3, r2
 800fa94:	b29a      	uxth	r2, r3
 800fa96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa98:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800fa9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d111      	bne.n	800fac4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800faa4:	66da      	str	r2, [r3, #108]	; 0x6c
 800faa6:	e010      	b.n	800faca <tcp_write+0x5ca>
 800faa8:	080174b0 	.word	0x080174b0
 800faac:	08017750 	.word	0x08017750
 800fab0:	08017504 	.word	0x08017504
 800fab4:	08017790 	.word	0x08017790
 800fab8:	080177a0 	.word	0x080177a0
 800fabc:	080177b4 	.word	0x080177b4
 800fac0:	080177ec 	.word	0x080177ec
  } else {
    last_unsent->next = queue;
 800fac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fac8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800face:	88fb      	ldrh	r3, [r7, #6]
 800fad0:	441a      	add	r2, r3
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fadc:	88fb      	ldrh	r3, [r7, #6]
 800fade:	1ad3      	subs	r3, r2, r3
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800faee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d00e      	beq.n	800fb1a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d10a      	bne.n	800fb1a <tcp_write+0x61a>
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d106      	bne.n	800fb1a <tcp_write+0x61a>
 800fb0c:	4b2c      	ldr	r3, [pc, #176]	; (800fbc0 <tcp_write+0x6c0>)
 800fb0e:	f240 3213 	movw	r2, #787	; 0x313
 800fb12:	492c      	ldr	r1, [pc, #176]	; (800fbc4 <tcp_write+0x6c4>)
 800fb14:	482c      	ldr	r0, [pc, #176]	; (800fbc8 <tcp_write+0x6c8>)
 800fb16:	f004 fbbf 	bl	8014298 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800fb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d016      	beq.n	800fb4e <tcp_write+0x64e>
 800fb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d012      	beq.n	800fb4e <tcp_write+0x64e>
 800fb28:	797b      	ldrb	r3, [r7, #5]
 800fb2a:	f003 0302 	and.w	r3, r3, #2
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d10d      	bne.n	800fb4e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800fb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	899b      	ldrh	r3, [r3, #12]
 800fb38:	b29c      	uxth	r4, r3
 800fb3a:	2008      	movs	r0, #8
 800fb3c:	f7f9 fb8c 	bl	8009258 <lwip_htons>
 800fb40:	4603      	mov	r3, r0
 800fb42:	461a      	mov	r2, r3
 800fb44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	4322      	orrs	r2, r4
 800fb4a:	b292      	uxth	r2, r2
 800fb4c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	e031      	b.n	800fbb6 <tcp_write+0x6b6>
          goto memerr;
 800fb52:	bf00      	nop
 800fb54:	e006      	b.n	800fb64 <tcp_write+0x664>
            goto memerr;
 800fb56:	bf00      	nop
 800fb58:	e004      	b.n	800fb64 <tcp_write+0x664>
        goto memerr;
 800fb5a:	bf00      	nop
 800fb5c:	e002      	b.n	800fb64 <tcp_write+0x664>
        goto memerr;
 800fb5e:	bf00      	nop
 800fb60:	e000      	b.n	800fb64 <tcp_write+0x664>
      goto memerr;
 800fb62:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	8b5b      	ldrh	r3, [r3, #26]
 800fb68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800fb72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d002      	beq.n	800fb7e <tcp_write+0x67e>
    pbuf_free(concat_p);
 800fb78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fb7a:	f7fa ff15 	bl	800a9a8 <pbuf_free>
  }
  if (queue != NULL) {
 800fb7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d002      	beq.n	800fb8a <tcp_write+0x68a>
    tcp_segs_free(queue);
 800fb84:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb86:	f7fc fb71 	bl	800c26c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00e      	beq.n	800fbb2 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d10a      	bne.n	800fbb2 <tcp_write+0x6b2>
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d106      	bne.n	800fbb2 <tcp_write+0x6b2>
 800fba4:	4b06      	ldr	r3, [pc, #24]	; (800fbc0 <tcp_write+0x6c0>)
 800fba6:	f44f 724a 	mov.w	r2, #808	; 0x328
 800fbaa:	4906      	ldr	r1, [pc, #24]	; (800fbc4 <tcp_write+0x6c4>)
 800fbac:	4806      	ldr	r0, [pc, #24]	; (800fbc8 <tcp_write+0x6c8>)
 800fbae:	f004 fb73 	bl	8014298 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800fbb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	375c      	adds	r7, #92	; 0x5c
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd90      	pop	{r4, r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	080174b0 	.word	0x080174b0
 800fbc4:	08017824 	.word	0x08017824
 800fbc8:	08017504 	.word	0x08017504

0800fbcc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fbcc:	b590      	push	{r4, r7, lr}
 800fbce:	b08b      	sub	sp, #44	; 0x2c
 800fbd0:	af02      	add	r7, sp, #8
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	61fb      	str	r3, [r7, #28]
 800fbdc:	2300      	movs	r3, #0
 800fbde:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d106      	bne.n	800fbf8 <tcp_split_unsent_seg+0x2c>
 800fbea:	4b95      	ldr	r3, [pc, #596]	; (800fe40 <tcp_split_unsent_seg+0x274>)
 800fbec:	f240 324b 	movw	r2, #843	; 0x34b
 800fbf0:	4994      	ldr	r1, [pc, #592]	; (800fe44 <tcp_split_unsent_seg+0x278>)
 800fbf2:	4895      	ldr	r0, [pc, #596]	; (800fe48 <tcp_split_unsent_seg+0x27c>)
 800fbf4:	f004 fb50 	bl	8014298 <iprintf>

  useg = pcb->unsent;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbfc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d102      	bne.n	800fc0a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fc04:	f04f 33ff 	mov.w	r3, #4294967295
 800fc08:	e116      	b.n	800fe38 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fc0a:	887b      	ldrh	r3, [r7, #2]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d109      	bne.n	800fc24 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fc10:	4b8b      	ldr	r3, [pc, #556]	; (800fe40 <tcp_split_unsent_seg+0x274>)
 800fc12:	f240 3253 	movw	r2, #851	; 0x353
 800fc16:	498d      	ldr	r1, [pc, #564]	; (800fe4c <tcp_split_unsent_seg+0x280>)
 800fc18:	488b      	ldr	r0, [pc, #556]	; (800fe48 <tcp_split_unsent_seg+0x27c>)
 800fc1a:	f004 fb3d 	bl	8014298 <iprintf>
    return ERR_VAL;
 800fc1e:	f06f 0305 	mvn.w	r3, #5
 800fc22:	e109      	b.n	800fe38 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	891b      	ldrh	r3, [r3, #8]
 800fc28:	887a      	ldrh	r2, [r7, #2]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d301      	bcc.n	800fc32 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	e102      	b.n	800fe38 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc36:	887a      	ldrh	r2, [r7, #2]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d906      	bls.n	800fc4a <tcp_split_unsent_seg+0x7e>
 800fc3c:	4b80      	ldr	r3, [pc, #512]	; (800fe40 <tcp_split_unsent_seg+0x274>)
 800fc3e:	f240 325b 	movw	r2, #859	; 0x35b
 800fc42:	4983      	ldr	r1, [pc, #524]	; (800fe50 <tcp_split_unsent_seg+0x284>)
 800fc44:	4880      	ldr	r0, [pc, #512]	; (800fe48 <tcp_split_unsent_seg+0x27c>)
 800fc46:	f004 fb27 	bl	8014298 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	891b      	ldrh	r3, [r3, #8]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d106      	bne.n	800fc60 <tcp_split_unsent_seg+0x94>
 800fc52:	4b7b      	ldr	r3, [pc, #492]	; (800fe40 <tcp_split_unsent_seg+0x274>)
 800fc54:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fc58:	497e      	ldr	r1, [pc, #504]	; (800fe54 <tcp_split_unsent_seg+0x288>)
 800fc5a:	487b      	ldr	r0, [pc, #492]	; (800fe48 <tcp_split_unsent_seg+0x27c>)
 800fc5c:	f004 fb1c 	bl	8014298 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	7a9b      	ldrb	r3, [r3, #10]
 800fc64:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fc66:	7bfb      	ldrb	r3, [r7, #15]
 800fc68:	009b      	lsls	r3, r3, #2
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	f003 0304 	and.w	r3, r3, #4
 800fc70:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	891a      	ldrh	r2, [r3, #8]
 800fc76:	887b      	ldrh	r3, [r7, #2]
 800fc78:	1ad3      	subs	r3, r2, r3
 800fc7a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fc7c:	7bbb      	ldrb	r3, [r7, #14]
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	89bb      	ldrh	r3, [r7, #12]
 800fc82:	4413      	add	r3, r2
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	2036      	movs	r0, #54	; 0x36
 800fc8e:	f7fa fbab 	bl	800a3e8 <pbuf_alloc>
 800fc92:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f000 80b7 	beq.w	800fe0a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	891a      	ldrh	r2, [r3, #8]
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	891b      	ldrh	r3, [r3, #8]
 800fca6:	1ad3      	subs	r3, r2, r3
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	887b      	ldrh	r3, [r7, #2]
 800fcac:	4413      	add	r3, r2
 800fcae:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	6858      	ldr	r0, [r3, #4]
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	685a      	ldr	r2, [r3, #4]
 800fcb8:	7bbb      	ldrb	r3, [r7, #14]
 800fcba:	18d1      	adds	r1, r2, r3
 800fcbc:	897b      	ldrh	r3, [r7, #10]
 800fcbe:	89ba      	ldrh	r2, [r7, #12]
 800fcc0:	f7fb f868 	bl	800ad94 <pbuf_copy_partial>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	89bb      	ldrh	r3, [r7, #12]
 800fcca:	4293      	cmp	r3, r2
 800fccc:	f040 809f 	bne.w	800fe0e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	899b      	ldrh	r3, [r3, #12]
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7f9 fabd 	bl	8009258 <lwip_htons>
 800fcde:	4603      	mov	r3, r0
 800fce0:	b2db      	uxtb	r3, r3
 800fce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fce6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fce8:	2300      	movs	r3, #0
 800fcea:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fcec:	7efb      	ldrb	r3, [r7, #27]
 800fcee:	f003 0308 	and.w	r3, r3, #8
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d007      	beq.n	800fd06 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fcf6:	7efb      	ldrb	r3, [r7, #27]
 800fcf8:	f023 0308 	bic.w	r3, r3, #8
 800fcfc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fcfe:	7ebb      	ldrb	r3, [r7, #26]
 800fd00:	f043 0308 	orr.w	r3, r3, #8
 800fd04:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fd06:	7efb      	ldrb	r3, [r7, #27]
 800fd08:	f003 0301 	and.w	r3, r3, #1
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d007      	beq.n	800fd20 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fd10:	7efb      	ldrb	r3, [r7, #27]
 800fd12:	f023 0301 	bic.w	r3, r3, #1
 800fd16:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fd18:	7ebb      	ldrb	r3, [r7, #26]
 800fd1a:	f043 0301 	orr.w	r3, r3, #1
 800fd1e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7f9 faab 	bl	8009282 <lwip_htonl>
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	887b      	ldrh	r3, [r7, #2]
 800fd30:	18d1      	adds	r1, r2, r3
 800fd32:	7eba      	ldrb	r2, [r7, #26]
 800fd34:	7bfb      	ldrb	r3, [r7, #15]
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	460b      	mov	r3, r1
 800fd3a:	6939      	ldr	r1, [r7, #16]
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff fa4d 	bl	800f1dc <tcp_create_segment>
 800fd42:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d063      	beq.n	800fe12 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fa feb8 	bl	800aac4 <pbuf_clen>
 800fd54:	4603      	mov	r3, r0
 800fd56:	461a      	mov	r2, r3
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fd5e:	1a9b      	subs	r3, r3, r2
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	6858      	ldr	r0, [r3, #4]
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	891a      	ldrh	r2, [r3, #8]
 800fd72:	89bb      	ldrh	r3, [r7, #12]
 800fd74:	1ad3      	subs	r3, r2, r3
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	4619      	mov	r1, r3
 800fd7a:	f7fa fc8f 	bl	800a69c <pbuf_realloc>
  useg->len -= remainder;
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	891a      	ldrh	r2, [r3, #8]
 800fd82:	89bb      	ldrh	r3, [r7, #12]
 800fd84:	1ad3      	subs	r3, r2, r3
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	899b      	ldrh	r3, [r3, #12]
 800fd92:	b29c      	uxth	r4, r3
 800fd94:	7efb      	ldrb	r3, [r7, #27]
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7f9 fa5d 	bl	8009258 <lwip_htons>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	461a      	mov	r2, r3
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	4322      	orrs	r2, r4
 800fda8:	b292      	uxth	r2, r2
 800fdaa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7fa fe87 	bl	800aac4 <pbuf_clen>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	461a      	mov	r2, r3
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fdc0:	4413      	add	r3, r2
 800fdc2:	b29a      	uxth	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7fa fe78 	bl	800aac4 <pbuf_clen>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fdde:	4413      	add	r3, r2
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	69fa      	ldr	r2, [r7, #28]
 800fdf4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d103      	bne.n	800fe06 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2200      	movs	r2, #0
 800fe02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fe06:	2300      	movs	r3, #0
 800fe08:	e016      	b.n	800fe38 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fe0a:	bf00      	nop
 800fe0c:	e002      	b.n	800fe14 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fe0e:	bf00      	nop
 800fe10:	e000      	b.n	800fe14 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fe12:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d006      	beq.n	800fe28 <tcp_split_unsent_seg+0x25c>
 800fe1a:	4b09      	ldr	r3, [pc, #36]	; (800fe40 <tcp_split_unsent_seg+0x274>)
 800fe1c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fe20:	490d      	ldr	r1, [pc, #52]	; (800fe58 <tcp_split_unsent_seg+0x28c>)
 800fe22:	4809      	ldr	r0, [pc, #36]	; (800fe48 <tcp_split_unsent_seg+0x27c>)
 800fe24:	f004 fa38 	bl	8014298 <iprintf>
  if (p != NULL) {
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d002      	beq.n	800fe34 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fe2e:	6938      	ldr	r0, [r7, #16]
 800fe30:	f7fa fdba 	bl	800a9a8 <pbuf_free>
  }

  return ERR_MEM;
 800fe34:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3724      	adds	r7, #36	; 0x24
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd90      	pop	{r4, r7, pc}
 800fe40:	080174b0 	.word	0x080174b0
 800fe44:	08017844 	.word	0x08017844
 800fe48:	08017504 	.word	0x08017504
 800fe4c:	08017868 	.word	0x08017868
 800fe50:	0801788c 	.word	0x0801788c
 800fe54:	0801789c 	.word	0x0801789c
 800fe58:	080178ac 	.word	0x080178ac

0800fe5c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fe5c:	b590      	push	{r4, r7, lr}
 800fe5e:	b085      	sub	sp, #20
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d106      	bne.n	800fe78 <tcp_send_fin+0x1c>
 800fe6a:	4b21      	ldr	r3, [pc, #132]	; (800fef0 <tcp_send_fin+0x94>)
 800fe6c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fe70:	4920      	ldr	r1, [pc, #128]	; (800fef4 <tcp_send_fin+0x98>)
 800fe72:	4821      	ldr	r0, [pc, #132]	; (800fef8 <tcp_send_fin+0x9c>)
 800fe74:	f004 fa10 	bl	8014298 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d02e      	beq.n	800fede <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe84:	60fb      	str	r3, [r7, #12]
 800fe86:	e002      	b.n	800fe8e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1f8      	bne.n	800fe88 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	899b      	ldrh	r3, [r3, #12]
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7f9 f9da 	bl	8009258 <lwip_htons>
 800fea4:	4603      	mov	r3, r0
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	f003 0307 	and.w	r3, r3, #7
 800feac:	2b00      	cmp	r3, #0
 800feae:	d116      	bne.n	800fede <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	899b      	ldrh	r3, [r3, #12]
 800feb6:	b29c      	uxth	r4, r3
 800feb8:	2001      	movs	r0, #1
 800feba:	f7f9 f9cd 	bl	8009258 <lwip_htons>
 800febe:	4603      	mov	r3, r0
 800fec0:	461a      	mov	r2, r3
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	4322      	orrs	r2, r4
 800fec8:	b292      	uxth	r2, r2
 800feca:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	8b5b      	ldrh	r3, [r3, #26]
 800fed0:	f043 0320 	orr.w	r3, r3, #32
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800feda:	2300      	movs	r3, #0
 800fedc:	e004      	b.n	800fee8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fede:	2101      	movs	r1, #1
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 f80b 	bl	800fefc <tcp_enqueue_flags>
 800fee6:	4603      	mov	r3, r0
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3714      	adds	r7, #20
 800feec:	46bd      	mov	sp, r7
 800feee:	bd90      	pop	{r4, r7, pc}
 800fef0:	080174b0 	.word	0x080174b0
 800fef4:	080178b8 	.word	0x080178b8
 800fef8:	08017504 	.word	0x08017504

0800fefc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b08a      	sub	sp, #40	; 0x28
 800ff00:	af02      	add	r7, sp, #8
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	460b      	mov	r3, r1
 800ff06:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ff10:	78fb      	ldrb	r3, [r7, #3]
 800ff12:	f003 0303 	and.w	r3, r3, #3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d106      	bne.n	800ff28 <tcp_enqueue_flags+0x2c>
 800ff1a:	4b67      	ldr	r3, [pc, #412]	; (80100b8 <tcp_enqueue_flags+0x1bc>)
 800ff1c:	f240 4212 	movw	r2, #1042	; 0x412
 800ff20:	4966      	ldr	r1, [pc, #408]	; (80100bc <tcp_enqueue_flags+0x1c0>)
 800ff22:	4867      	ldr	r0, [pc, #412]	; (80100c0 <tcp_enqueue_flags+0x1c4>)
 800ff24:	f004 f9b8 	bl	8014298 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d106      	bne.n	800ff3c <tcp_enqueue_flags+0x40>
 800ff2e:	4b62      	ldr	r3, [pc, #392]	; (80100b8 <tcp_enqueue_flags+0x1bc>)
 800ff30:	f240 4213 	movw	r2, #1043	; 0x413
 800ff34:	4963      	ldr	r1, [pc, #396]	; (80100c4 <tcp_enqueue_flags+0x1c8>)
 800ff36:	4862      	ldr	r0, [pc, #392]	; (80100c0 <tcp_enqueue_flags+0x1c4>)
 800ff38:	f004 f9ae 	bl	8014298 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ff3c:	78fb      	ldrb	r3, [r7, #3]
 800ff3e:	f003 0302 	and.w	r3, r3, #2
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d001      	beq.n	800ff4a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ff46:	2301      	movs	r3, #1
 800ff48:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ff4a:	7ffb      	ldrb	r3, [r7, #31]
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	f003 0304 	and.w	r3, r3, #4
 800ff54:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ff56:	7dfb      	ldrb	r3, [r7, #23]
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff5e:	4619      	mov	r1, r3
 800ff60:	2036      	movs	r0, #54	; 0x36
 800ff62:	f7fa fa41 	bl	800a3e8 <pbuf_alloc>
 800ff66:	6138      	str	r0, [r7, #16]
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d109      	bne.n	800ff82 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	8b5b      	ldrh	r3, [r3, #26]
 800ff72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ff7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff80:	e095      	b.n	80100ae <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	895a      	ldrh	r2, [r3, #10]
 800ff86:	7dfb      	ldrb	r3, [r7, #23]
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d206      	bcs.n	800ff9c <tcp_enqueue_flags+0xa0>
 800ff8e:	4b4a      	ldr	r3, [pc, #296]	; (80100b8 <tcp_enqueue_flags+0x1bc>)
 800ff90:	f240 423a 	movw	r2, #1082	; 0x43a
 800ff94:	494c      	ldr	r1, [pc, #304]	; (80100c8 <tcp_enqueue_flags+0x1cc>)
 800ff96:	484a      	ldr	r0, [pc, #296]	; (80100c0 <tcp_enqueue_flags+0x1c4>)
 800ff98:	f004 f97e 	bl	8014298 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ffa0:	78fa      	ldrb	r2, [r7, #3]
 800ffa2:	7ffb      	ldrb	r3, [r7, #31]
 800ffa4:	9300      	str	r3, [sp, #0]
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	6939      	ldr	r1, [r7, #16]
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f7ff f916 	bl	800f1dc <tcp_create_segment>
 800ffb0:	60f8      	str	r0, [r7, #12]
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d109      	bne.n	800ffcc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	8b5b      	ldrh	r3, [r3, #26]
 800ffbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ffc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffca:	e070      	b.n	80100ae <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	f003 0303 	and.w	r3, r3, #3
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d006      	beq.n	800ffe6 <tcp_enqueue_flags+0xea>
 800ffd8:	4b37      	ldr	r3, [pc, #220]	; (80100b8 <tcp_enqueue_flags+0x1bc>)
 800ffda:	f240 4242 	movw	r2, #1090	; 0x442
 800ffde:	493b      	ldr	r1, [pc, #236]	; (80100cc <tcp_enqueue_flags+0x1d0>)
 800ffe0:	4837      	ldr	r0, [pc, #220]	; (80100c0 <tcp_enqueue_flags+0x1c4>)
 800ffe2:	f004 f959 	bl	8014298 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	891b      	ldrh	r3, [r3, #8]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d006      	beq.n	800fffc <tcp_enqueue_flags+0x100>
 800ffee:	4b32      	ldr	r3, [pc, #200]	; (80100b8 <tcp_enqueue_flags+0x1bc>)
 800fff0:	f240 4243 	movw	r2, #1091	; 0x443
 800fff4:	4936      	ldr	r1, [pc, #216]	; (80100d0 <tcp_enqueue_flags+0x1d4>)
 800fff6:	4832      	ldr	r0, [pc, #200]	; (80100c0 <tcp_enqueue_flags+0x1c4>)
 800fff8:	f004 f94e 	bl	8014298 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010000:	2b00      	cmp	r3, #0
 8010002:	d103      	bne.n	801000c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	68fa      	ldr	r2, [r7, #12]
 8010008:	66da      	str	r2, [r3, #108]	; 0x6c
 801000a:	e00d      	b.n	8010028 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010010:	61bb      	str	r3, [r7, #24]
 8010012:	e002      	b.n	801001a <tcp_enqueue_flags+0x11e>
 8010014:	69bb      	ldr	r3, [r7, #24]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	61bb      	str	r3, [r7, #24]
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d1f8      	bne.n	8010014 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	68fa      	ldr	r2, [r7, #12]
 8010026:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2200      	movs	r2, #0
 801002c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010030:	78fb      	ldrb	r3, [r7, #3]
 8010032:	f003 0302 	and.w	r3, r3, #2
 8010036:	2b00      	cmp	r3, #0
 8010038:	d104      	bne.n	8010044 <tcp_enqueue_flags+0x148>
 801003a:	78fb      	ldrb	r3, [r7, #3]
 801003c:	f003 0301 	and.w	r3, r3, #1
 8010040:	2b00      	cmp	r3, #0
 8010042:	d004      	beq.n	801004e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010048:	1c5a      	adds	r2, r3, #1
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801004e:	78fb      	ldrb	r3, [r7, #3]
 8010050:	f003 0301 	and.w	r3, r3, #1
 8010054:	2b00      	cmp	r3, #0
 8010056:	d006      	beq.n	8010066 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	8b5b      	ldrh	r3, [r3, #26]
 801005c:	f043 0320 	orr.w	r3, r3, #32
 8010060:	b29a      	uxth	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	4618      	mov	r0, r3
 801006c:	f7fa fd2a 	bl	800aac4 <pbuf_clen>
 8010070:	4603      	mov	r3, r0
 8010072:	461a      	mov	r2, r3
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801007a:	4413      	add	r3, r2
 801007c:	b29a      	uxth	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801008a:	2b00      	cmp	r3, #0
 801008c:	d00e      	beq.n	80100ac <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10a      	bne.n	80100ac <tcp_enqueue_flags+0x1b0>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801009a:	2b00      	cmp	r3, #0
 801009c:	d106      	bne.n	80100ac <tcp_enqueue_flags+0x1b0>
 801009e:	4b06      	ldr	r3, [pc, #24]	; (80100b8 <tcp_enqueue_flags+0x1bc>)
 80100a0:	f240 4266 	movw	r2, #1126	; 0x466
 80100a4:	490b      	ldr	r1, [pc, #44]	; (80100d4 <tcp_enqueue_flags+0x1d8>)
 80100a6:	4806      	ldr	r0, [pc, #24]	; (80100c0 <tcp_enqueue_flags+0x1c4>)
 80100a8:	f004 f8f6 	bl	8014298 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80100ac:	2300      	movs	r3, #0
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3720      	adds	r7, #32
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	080174b0 	.word	0x080174b0
 80100bc:	080178d4 	.word	0x080178d4
 80100c0:	08017504 	.word	0x08017504
 80100c4:	0801792c 	.word	0x0801792c
 80100c8:	0801794c 	.word	0x0801794c
 80100cc:	08017988 	.word	0x08017988
 80100d0:	080179a0 	.word	0x080179a0
 80100d4:	080179cc 	.word	0x080179cc

080100d8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80100d8:	b5b0      	push	{r4, r5, r7, lr}
 80100da:	b08a      	sub	sp, #40	; 0x28
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d106      	bne.n	80100f4 <tcp_output+0x1c>
 80100e6:	4ba0      	ldr	r3, [pc, #640]	; (8010368 <tcp_output+0x290>)
 80100e8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80100ec:	499f      	ldr	r1, [pc, #636]	; (801036c <tcp_output+0x294>)
 80100ee:	48a0      	ldr	r0, [pc, #640]	; (8010370 <tcp_output+0x298>)
 80100f0:	f004 f8d2 	bl	8014298 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	7d1b      	ldrb	r3, [r3, #20]
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d106      	bne.n	801010a <tcp_output+0x32>
 80100fc:	4b9a      	ldr	r3, [pc, #616]	; (8010368 <tcp_output+0x290>)
 80100fe:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8010102:	499c      	ldr	r1, [pc, #624]	; (8010374 <tcp_output+0x29c>)
 8010104:	489a      	ldr	r0, [pc, #616]	; (8010370 <tcp_output+0x298>)
 8010106:	f004 f8c7 	bl	8014298 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801010a:	4b9b      	ldr	r3, [pc, #620]	; (8010378 <tcp_output+0x2a0>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	429a      	cmp	r2, r3
 8010112:	d101      	bne.n	8010118 <tcp_output+0x40>
    return ERR_OK;
 8010114:	2300      	movs	r3, #0
 8010116:	e1d2      	b.n	80104be <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010124:	429a      	cmp	r2, r3
 8010126:	d203      	bcs.n	8010130 <tcp_output+0x58>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801012e:	e002      	b.n	8010136 <tcp_output+0x5e>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010136:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801013c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801013e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010140:	2b00      	cmp	r3, #0
 8010142:	d10b      	bne.n	801015c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	8b5b      	ldrh	r3, [r3, #26]
 8010148:	f003 0302 	and.w	r3, r3, #2
 801014c:	2b00      	cmp	r3, #0
 801014e:	f000 81a9 	beq.w	80104a4 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 fdd6 	bl	8010d04 <tcp_send_empty_ack>
 8010158:	4603      	mov	r3, r0
 801015a:	e1b0      	b.n	80104be <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801015c:	6879      	ldr	r1, [r7, #4]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	3304      	adds	r3, #4
 8010162:	461a      	mov	r2, r3
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7ff f81d 	bl	800f1a4 <tcp_route>
 801016a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d102      	bne.n	8010178 <tcp_output+0xa0>
    return ERR_RTE;
 8010172:	f06f 0303 	mvn.w	r3, #3
 8010176:	e1a2      	b.n	80104be <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d003      	beq.n	8010186 <tcp_output+0xae>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d111      	bne.n	80101aa <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d002      	beq.n	8010192 <tcp_output+0xba>
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	3304      	adds	r3, #4
 8010190:	e000      	b.n	8010194 <tcp_output+0xbc>
 8010192:	2300      	movs	r3, #0
 8010194:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d102      	bne.n	80101a2 <tcp_output+0xca>
      return ERR_RTE;
 801019c:	f06f 0303 	mvn.w	r3, #3
 80101a0:	e18d      	b.n	80104be <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	681a      	ldr	r2, [r3, #0]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	68db      	ldr	r3, [r3, #12]
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7f9 f866 	bl	8009282 <lwip_htonl>
 80101b6:	4602      	mov	r2, r0
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101bc:	1ad3      	subs	r3, r2, r3
 80101be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101c0:	8912      	ldrh	r2, [r2, #8]
 80101c2:	4413      	add	r3, r2
 80101c4:	69ba      	ldr	r2, [r7, #24]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d227      	bcs.n	801021a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101d0:	461a      	mov	r2, r3
 80101d2:	69bb      	ldr	r3, [r7, #24]
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d114      	bne.n	8010202 <tcp_output+0x12a>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d110      	bne.n	8010202 <tcp_output+0x12a>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d10b      	bne.n	8010202 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2200      	movs	r2, #0
 80101ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2201      	movs	r2, #1
 80101f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	8b5b      	ldrh	r3, [r3, #26]
 8010206:	f003 0302 	and.w	r3, r3, #2
 801020a:	2b00      	cmp	r3, #0
 801020c:	f000 814c 	beq.w	80104a8 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 fd77 	bl	8010d04 <tcp_send_empty_ack>
 8010216:	4603      	mov	r3, r0
 8010218:	e151      	b.n	80104be <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2200      	movs	r2, #0
 801021e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010226:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010228:	6a3b      	ldr	r3, [r7, #32]
 801022a:	2b00      	cmp	r3, #0
 801022c:	f000 811b 	beq.w	8010466 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8010230:	e002      	b.n	8010238 <tcp_output+0x160>
 8010232:	6a3b      	ldr	r3, [r7, #32]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	623b      	str	r3, [r7, #32]
 8010238:	6a3b      	ldr	r3, [r7, #32]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d1f8      	bne.n	8010232 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010240:	e111      	b.n	8010466 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	899b      	ldrh	r3, [r3, #12]
 8010248:	b29b      	uxth	r3, r3
 801024a:	4618      	mov	r0, r3
 801024c:	f7f9 f804 	bl	8009258 <lwip_htons>
 8010250:	4603      	mov	r3, r0
 8010252:	b2db      	uxtb	r3, r3
 8010254:	f003 0304 	and.w	r3, r3, #4
 8010258:	2b00      	cmp	r3, #0
 801025a:	d006      	beq.n	801026a <tcp_output+0x192>
 801025c:	4b42      	ldr	r3, [pc, #264]	; (8010368 <tcp_output+0x290>)
 801025e:	f240 5237 	movw	r2, #1335	; 0x537
 8010262:	4946      	ldr	r1, [pc, #280]	; (801037c <tcp_output+0x2a4>)
 8010264:	4842      	ldr	r0, [pc, #264]	; (8010370 <tcp_output+0x298>)
 8010266:	f004 f817 	bl	8014298 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801026e:	2b00      	cmp	r3, #0
 8010270:	d01f      	beq.n	80102b2 <tcp_output+0x1da>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	8b5b      	ldrh	r3, [r3, #26]
 8010276:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801027a:	2b00      	cmp	r3, #0
 801027c:	d119      	bne.n	80102b2 <tcp_output+0x1da>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00b      	beq.n	801029e <tcp_output+0x1c6>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d110      	bne.n	80102b2 <tcp_output+0x1da>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010294:	891a      	ldrh	r2, [r3, #8]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801029a:	429a      	cmp	r2, r3
 801029c:	d209      	bcs.n	80102b2 <tcp_output+0x1da>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d004      	beq.n	80102b2 <tcp_output+0x1da>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102ae:	2b08      	cmp	r3, #8
 80102b0:	d901      	bls.n	80102b6 <tcp_output+0x1de>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e000      	b.n	80102b8 <tcp_output+0x1e0>
 80102b6:	2300      	movs	r3, #0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d106      	bne.n	80102ca <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	8b5b      	ldrh	r3, [r3, #26]
 80102c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	f000 80e3 	beq.w	8010490 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	7d1b      	ldrb	r3, [r3, #20]
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d00d      	beq.n	80102ee <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80102d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d4:	68db      	ldr	r3, [r3, #12]
 80102d6:	899b      	ldrh	r3, [r3, #12]
 80102d8:	b29c      	uxth	r4, r3
 80102da:	2010      	movs	r0, #16
 80102dc:	f7f8 ffbc 	bl	8009258 <lwip_htons>
 80102e0:	4603      	mov	r3, r0
 80102e2:	461a      	mov	r2, r3
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	4322      	orrs	r2, r4
 80102ea:	b292      	uxth	r2, r2
 80102ec:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80102ee:	697a      	ldr	r2, [r7, #20]
 80102f0:	6879      	ldr	r1, [r7, #4]
 80102f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102f4:	f000 f908 	bl	8010508 <tcp_output_segment>
 80102f8:	4603      	mov	r3, r0
 80102fa:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80102fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d009      	beq.n	8010318 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	8b5b      	ldrh	r3, [r3, #26]
 8010308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801030c:	b29a      	uxth	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	835a      	strh	r2, [r3, #26]
      return err;
 8010312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010316:	e0d2      	b.n	80104be <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	7d1b      	ldrb	r3, [r3, #20]
 8010324:	2b02      	cmp	r3, #2
 8010326:	d006      	beq.n	8010336 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	8b5b      	ldrh	r3, [r3, #26]
 801032c:	f023 0303 	bic.w	r3, r3, #3
 8010330:	b29a      	uxth	r2, r3
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010338:	68db      	ldr	r3, [r3, #12]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	4618      	mov	r0, r3
 801033e:	f7f8 ffa0 	bl	8009282 <lwip_htonl>
 8010342:	4604      	mov	r4, r0
 8010344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010346:	891b      	ldrh	r3, [r3, #8]
 8010348:	461d      	mov	r5, r3
 801034a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034c:	68db      	ldr	r3, [r3, #12]
 801034e:	899b      	ldrh	r3, [r3, #12]
 8010350:	b29b      	uxth	r3, r3
 8010352:	4618      	mov	r0, r3
 8010354:	f7f8 ff80 	bl	8009258 <lwip_htons>
 8010358:	4603      	mov	r3, r0
 801035a:	b2db      	uxtb	r3, r3
 801035c:	f003 0303 	and.w	r3, r3, #3
 8010360:	2b00      	cmp	r3, #0
 8010362:	d00d      	beq.n	8010380 <tcp_output+0x2a8>
 8010364:	2301      	movs	r3, #1
 8010366:	e00c      	b.n	8010382 <tcp_output+0x2aa>
 8010368:	080174b0 	.word	0x080174b0
 801036c:	080179f4 	.word	0x080179f4
 8010370:	08017504 	.word	0x08017504
 8010374:	08017a0c 	.word	0x08017a0c
 8010378:	2000acd0 	.word	0x2000acd0
 801037c:	08017a34 	.word	0x08017a34
 8010380:	2300      	movs	r3, #0
 8010382:	442b      	add	r3, r5
 8010384:	4423      	add	r3, r4
 8010386:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	1ad3      	subs	r3, r2, r3
 8010390:	2b00      	cmp	r3, #0
 8010392:	da02      	bge.n	801039a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	68ba      	ldr	r2, [r7, #8]
 8010398:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801039a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039c:	891b      	ldrh	r3, [r3, #8]
 801039e:	461c      	mov	r4, r3
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	899b      	ldrh	r3, [r3, #12]
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7f8 ff55 	bl	8009258 <lwip_htons>
 80103ae:	4603      	mov	r3, r0
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	f003 0303 	and.w	r3, r3, #3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d001      	beq.n	80103be <tcp_output+0x2e6>
 80103ba:	2301      	movs	r3, #1
 80103bc:	e000      	b.n	80103c0 <tcp_output+0x2e8>
 80103be:	2300      	movs	r3, #0
 80103c0:	4423      	add	r3, r4
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d049      	beq.n	801045a <tcp_output+0x382>
      seg->next = NULL;
 80103c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c8:	2200      	movs	r2, #0
 80103ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d105      	bne.n	80103e0 <tcp_output+0x308>
        pcb->unacked = seg;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103d8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80103da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103dc:	623b      	str	r3, [r7, #32]
 80103de:	e03f      	b.n	8010460 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80103e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7f8 ff4b 	bl	8009282 <lwip_htonl>
 80103ec:	4604      	mov	r4, r0
 80103ee:	6a3b      	ldr	r3, [r7, #32]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7f8 ff44 	bl	8009282 <lwip_htonl>
 80103fa:	4603      	mov	r3, r0
 80103fc:	1ae3      	subs	r3, r4, r3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	da24      	bge.n	801044c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	3370      	adds	r3, #112	; 0x70
 8010406:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010408:	e002      	b.n	8010410 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d011      	beq.n	801043c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010418:	69fb      	ldr	r3, [r7, #28]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	4618      	mov	r0, r3
 8010422:	f7f8 ff2e 	bl	8009282 <lwip_htonl>
 8010426:	4604      	mov	r4, r0
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	4618      	mov	r0, r3
 8010430:	f7f8 ff27 	bl	8009282 <lwip_htonl>
 8010434:	4603      	mov	r3, r0
 8010436:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010438:	2b00      	cmp	r3, #0
 801043a:	dbe6      	blt.n	801040a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010442:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010448:	601a      	str	r2, [r3, #0]
 801044a:	e009      	b.n	8010460 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801044c:	6a3b      	ldr	r3, [r7, #32]
 801044e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010450:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010452:	6a3b      	ldr	r3, [r7, #32]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	623b      	str	r3, [r7, #32]
 8010458:	e002      	b.n	8010460 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801045a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801045c:	f7fb ff1a 	bl	800c294 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010464:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010468:	2b00      	cmp	r3, #0
 801046a:	d012      	beq.n	8010492 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	4618      	mov	r0, r3
 8010474:	f7f8 ff05 	bl	8009282 <lwip_htonl>
 8010478:	4602      	mov	r2, r0
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801047e:	1ad3      	subs	r3, r2, r3
 8010480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010482:	8912      	ldrh	r2, [r2, #8]
 8010484:	4413      	add	r3, r2
  while (seg != NULL &&
 8010486:	69ba      	ldr	r2, [r7, #24]
 8010488:	429a      	cmp	r2, r3
 801048a:	f4bf aeda 	bcs.w	8010242 <tcp_output+0x16a>
 801048e:	e000      	b.n	8010492 <tcp_output+0x3ba>
      break;
 8010490:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010496:	2b00      	cmp	r3, #0
 8010498:	d108      	bne.n	80104ac <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2200      	movs	r2, #0
 801049e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80104a2:	e004      	b.n	80104ae <tcp_output+0x3d6>
    goto output_done;
 80104a4:	bf00      	nop
 80104a6:	e002      	b.n	80104ae <tcp_output+0x3d6>
    goto output_done;
 80104a8:	bf00      	nop
 80104aa:	e000      	b.n	80104ae <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80104ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	8b5b      	ldrh	r3, [r3, #26]
 80104b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3728      	adds	r7, #40	; 0x28
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bdb0      	pop	{r4, r5, r7, pc}
 80104c6:	bf00      	nop

080104c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d106      	bne.n	80104e4 <tcp_output_segment_busy+0x1c>
 80104d6:	4b09      	ldr	r3, [pc, #36]	; (80104fc <tcp_output_segment_busy+0x34>)
 80104d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80104dc:	4908      	ldr	r1, [pc, #32]	; (8010500 <tcp_output_segment_busy+0x38>)
 80104de:	4809      	ldr	r0, [pc, #36]	; (8010504 <tcp_output_segment_busy+0x3c>)
 80104e0:	f003 feda 	bl	8014298 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	7b9b      	ldrb	r3, [r3, #14]
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	d001      	beq.n	80104f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80104ee:	2301      	movs	r3, #1
 80104f0:	e000      	b.n	80104f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80104f2:	2300      	movs	r3, #0
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	080174b0 	.word	0x080174b0
 8010500:	08017a4c 	.word	0x08017a4c
 8010504:	08017504 	.word	0x08017504

08010508 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010508:	b5b0      	push	{r4, r5, r7, lr}
 801050a:	b08c      	sub	sp, #48	; 0x30
 801050c:	af04      	add	r7, sp, #16
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d106      	bne.n	8010528 <tcp_output_segment+0x20>
 801051a:	4b64      	ldr	r3, [pc, #400]	; (80106ac <tcp_output_segment+0x1a4>)
 801051c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010520:	4963      	ldr	r1, [pc, #396]	; (80106b0 <tcp_output_segment+0x1a8>)
 8010522:	4864      	ldr	r0, [pc, #400]	; (80106b4 <tcp_output_segment+0x1ac>)
 8010524:	f003 feb8 	bl	8014298 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d106      	bne.n	801053c <tcp_output_segment+0x34>
 801052e:	4b5f      	ldr	r3, [pc, #380]	; (80106ac <tcp_output_segment+0x1a4>)
 8010530:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010534:	4960      	ldr	r1, [pc, #384]	; (80106b8 <tcp_output_segment+0x1b0>)
 8010536:	485f      	ldr	r0, [pc, #380]	; (80106b4 <tcp_output_segment+0x1ac>)
 8010538:	f003 feae 	bl	8014298 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d106      	bne.n	8010550 <tcp_output_segment+0x48>
 8010542:	4b5a      	ldr	r3, [pc, #360]	; (80106ac <tcp_output_segment+0x1a4>)
 8010544:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010548:	495c      	ldr	r1, [pc, #368]	; (80106bc <tcp_output_segment+0x1b4>)
 801054a:	485a      	ldr	r0, [pc, #360]	; (80106b4 <tcp_output_segment+0x1ac>)
 801054c:	f003 fea4 	bl	8014298 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010550:	68f8      	ldr	r0, [r7, #12]
 8010552:	f7ff ffb9 	bl	80104c8 <tcp_output_segment_busy>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d001      	beq.n	8010560 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801055c:	2300      	movs	r3, #0
 801055e:	e0a0      	b.n	80106a2 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	68dc      	ldr	r4, [r3, #12]
 8010568:	4610      	mov	r0, r2
 801056a:	f7f8 fe8a 	bl	8009282 <lwip_htonl>
 801056e:	4603      	mov	r3, r0
 8010570:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	68dc      	ldr	r4, [r3, #12]
 801057a:	4610      	mov	r0, r2
 801057c:	f7f8 fe6c 	bl	8009258 <lwip_htons>
 8010580:	4603      	mov	r3, r0
 8010582:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010588:	68ba      	ldr	r2, [r7, #8]
 801058a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801058c:	441a      	add	r2, r3
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	3314      	adds	r3, #20
 8010598:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	7a9b      	ldrb	r3, [r3, #10]
 801059e:	f003 0301 	and.w	r3, r3, #1
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d015      	beq.n	80105d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	3304      	adds	r3, #4
 80105aa:	461a      	mov	r2, r3
 80105ac:	6879      	ldr	r1, [r7, #4]
 80105ae:	f44f 7006 	mov.w	r0, #536	; 0x218
 80105b2:	f7fc fa33 	bl	800ca1c <tcp_eff_send_mss_netif>
 80105b6:	4603      	mov	r3, r0
 80105b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80105ba:	8b7b      	ldrh	r3, [r7, #26]
 80105bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7f8 fe5e 	bl	8009282 <lwip_htonl>
 80105c6:	4602      	mov	r2, r0
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	3304      	adds	r3, #4
 80105d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80105d8:	2b00      	cmp	r3, #0
 80105da:	da02      	bge.n	80105e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	2200      	movs	r2, #0
 80105e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d10c      	bne.n	8010604 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80105ea:	4b35      	ldr	r3, [pc, #212]	; (80106c0 <tcp_output_segment+0x1b8>)
 80105ec:	681a      	ldr	r2, [r3, #0]
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7f8 fe42 	bl	8009282 <lwip_htonl>
 80105fe:	4602      	mov	r2, r0
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	68db      	ldr	r3, [r3, #12]
 8010608:	461a      	mov	r2, r3
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	1ad3      	subs	r3, r2, r3
 8010612:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	8959      	ldrh	r1, [r3, #10]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	8b3a      	ldrh	r2, [r7, #24]
 8010620:	1a8a      	subs	r2, r1, r2
 8010622:	b292      	uxth	r2, r2
 8010624:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	8919      	ldrh	r1, [r3, #8]
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	8b3a      	ldrh	r2, [r7, #24]
 8010632:	1a8a      	subs	r2, r1, r2
 8010634:	b292      	uxth	r2, r2
 8010636:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	68fa      	ldr	r2, [r7, #12]
 801063e:	68d2      	ldr	r2, [r2, #12]
 8010640:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	2200      	movs	r2, #0
 8010648:	741a      	strb	r2, [r3, #16]
 801064a:	2200      	movs	r2, #0
 801064c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	68db      	ldr	r3, [r3, #12]
 8010652:	f103 0214 	add.w	r2, r3, #20
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	7a9b      	ldrb	r3, [r3, #10]
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	f003 0304 	and.w	r3, r3, #4
 8010660:	4413      	add	r3, r2
 8010662:	69fa      	ldr	r2, [r7, #28]
 8010664:	429a      	cmp	r2, r3
 8010666:	d006      	beq.n	8010676 <tcp_output_segment+0x16e>
 8010668:	4b10      	ldr	r3, [pc, #64]	; (80106ac <tcp_output_segment+0x1a4>)
 801066a:	f240 621c 	movw	r2, #1564	; 0x61c
 801066e:	4915      	ldr	r1, [pc, #84]	; (80106c4 <tcp_output_segment+0x1bc>)
 8010670:	4810      	ldr	r0, [pc, #64]	; (80106b4 <tcp_output_segment+0x1ac>)
 8010672:	f003 fe11 	bl	8014298 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6858      	ldr	r0, [r3, #4]
 801067a:	68b9      	ldr	r1, [r7, #8]
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	1d1c      	adds	r4, r3, #4
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	7add      	ldrb	r5, [r3, #11]
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	7a9b      	ldrb	r3, [r3, #10]
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	9202      	str	r2, [sp, #8]
 801068c:	2206      	movs	r2, #6
 801068e:	9201      	str	r2, [sp, #4]
 8010690:	9300      	str	r3, [sp, #0]
 8010692:	462b      	mov	r3, r5
 8010694:	4622      	mov	r2, r4
 8010696:	f002 fbb3 	bl	8012e00 <ip4_output_if>
 801069a:	4603      	mov	r3, r0
 801069c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801069e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3720      	adds	r7, #32
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bdb0      	pop	{r4, r5, r7, pc}
 80106aa:	bf00      	nop
 80106ac:	080174b0 	.word	0x080174b0
 80106b0:	08017a74 	.word	0x08017a74
 80106b4:	08017504 	.word	0x08017504
 80106b8:	08017a94 	.word	0x08017a94
 80106bc:	08017ab4 	.word	0x08017ab4
 80106c0:	2000acc0 	.word	0x2000acc0
 80106c4:	08017ad8 	.word	0x08017ad8

080106c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80106c8:	b5b0      	push	{r4, r5, r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d106      	bne.n	80106e4 <tcp_rexmit_rto_prepare+0x1c>
 80106d6:	4b31      	ldr	r3, [pc, #196]	; (801079c <tcp_rexmit_rto_prepare+0xd4>)
 80106d8:	f240 6263 	movw	r2, #1635	; 0x663
 80106dc:	4930      	ldr	r1, [pc, #192]	; (80107a0 <tcp_rexmit_rto_prepare+0xd8>)
 80106de:	4831      	ldr	r0, [pc, #196]	; (80107a4 <tcp_rexmit_rto_prepare+0xdc>)
 80106e0:	f003 fdda 	bl	8014298 <iprintf>

  if (pcb->unacked == NULL) {
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d102      	bne.n	80106f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80106ec:	f06f 0305 	mvn.w	r3, #5
 80106f0:	e050      	b.n	8010794 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106f6:	60fb      	str	r3, [r7, #12]
 80106f8:	e00b      	b.n	8010712 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f7ff fee4 	bl	80104c8 <tcp_output_segment_busy>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d002      	beq.n	801070c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010706:	f06f 0305 	mvn.w	r3, #5
 801070a:	e043      	b.n	8010794 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	60fb      	str	r3, [r7, #12]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1ef      	bne.n	80106fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801071a:	68f8      	ldr	r0, [r7, #12]
 801071c:	f7ff fed4 	bl	80104c8 <tcp_output_segment_busy>
 8010720:	4603      	mov	r3, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	d002      	beq.n	801072c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010726:	f06f 0305 	mvn.w	r3, #5
 801072a:	e033      	b.n	8010794 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	8b5b      	ldrh	r3, [r3, #26]
 8010746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801074a:	b29a      	uxth	r2, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	68db      	ldr	r3, [r3, #12]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	4618      	mov	r0, r3
 8010758:	f7f8 fd93 	bl	8009282 <lwip_htonl>
 801075c:	4604      	mov	r4, r0
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	891b      	ldrh	r3, [r3, #8]
 8010762:	461d      	mov	r5, r3
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	68db      	ldr	r3, [r3, #12]
 8010768:	899b      	ldrh	r3, [r3, #12]
 801076a:	b29b      	uxth	r3, r3
 801076c:	4618      	mov	r0, r3
 801076e:	f7f8 fd73 	bl	8009258 <lwip_htons>
 8010772:	4603      	mov	r3, r0
 8010774:	b2db      	uxtb	r3, r3
 8010776:	f003 0303 	and.w	r3, r3, #3
 801077a:	2b00      	cmp	r3, #0
 801077c:	d001      	beq.n	8010782 <tcp_rexmit_rto_prepare+0xba>
 801077e:	2301      	movs	r3, #1
 8010780:	e000      	b.n	8010784 <tcp_rexmit_rto_prepare+0xbc>
 8010782:	2300      	movs	r3, #0
 8010784:	442b      	add	r3, r5
 8010786:	18e2      	adds	r2, r4, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3710      	adds	r7, #16
 8010798:	46bd      	mov	sp, r7
 801079a:	bdb0      	pop	{r4, r5, r7, pc}
 801079c:	080174b0 	.word	0x080174b0
 80107a0:	08017aec 	.word	0x08017aec
 80107a4:	08017504 	.word	0x08017504

080107a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d106      	bne.n	80107c4 <tcp_rexmit_rto_commit+0x1c>
 80107b6:	4b0d      	ldr	r3, [pc, #52]	; (80107ec <tcp_rexmit_rto_commit+0x44>)
 80107b8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80107bc:	490c      	ldr	r1, [pc, #48]	; (80107f0 <tcp_rexmit_rto_commit+0x48>)
 80107be:	480d      	ldr	r0, [pc, #52]	; (80107f4 <tcp_rexmit_rto_commit+0x4c>)
 80107c0:	f003 fd6a 	bl	8014298 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80107ca:	2bff      	cmp	r3, #255	; 0xff
 80107cc:	d007      	beq.n	80107de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80107d4:	3301      	adds	r3, #1
 80107d6:	b2da      	uxtb	r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7ff fc7a 	bl	80100d8 <tcp_output>
}
 80107e4:	bf00      	nop
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	080174b0 	.word	0x080174b0
 80107f0:	08017b10 	.word	0x08017b10
 80107f4:	08017504 	.word	0x08017504

080107f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d106      	bne.n	8010814 <tcp_rexmit_rto+0x1c>
 8010806:	4b0a      	ldr	r3, [pc, #40]	; (8010830 <tcp_rexmit_rto+0x38>)
 8010808:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801080c:	4909      	ldr	r1, [pc, #36]	; (8010834 <tcp_rexmit_rto+0x3c>)
 801080e:	480a      	ldr	r0, [pc, #40]	; (8010838 <tcp_rexmit_rto+0x40>)
 8010810:	f003 fd42 	bl	8014298 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f7ff ff57 	bl	80106c8 <tcp_rexmit_rto_prepare>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d102      	bne.n	8010826 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f7ff ffc1 	bl	80107a8 <tcp_rexmit_rto_commit>
  }
}
 8010826:	bf00      	nop
 8010828:	3708      	adds	r7, #8
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	080174b0 	.word	0x080174b0
 8010834:	08017b34 	.word	0x08017b34
 8010838:	08017504 	.word	0x08017504

0801083c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801083c:	b590      	push	{r4, r7, lr}
 801083e:	b085      	sub	sp, #20
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d106      	bne.n	8010858 <tcp_rexmit+0x1c>
 801084a:	4b2f      	ldr	r3, [pc, #188]	; (8010908 <tcp_rexmit+0xcc>)
 801084c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010850:	492e      	ldr	r1, [pc, #184]	; (801090c <tcp_rexmit+0xd0>)
 8010852:	482f      	ldr	r0, [pc, #188]	; (8010910 <tcp_rexmit+0xd4>)
 8010854:	f003 fd20 	bl	8014298 <iprintf>

  if (pcb->unacked == NULL) {
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801085c:	2b00      	cmp	r3, #0
 801085e:	d102      	bne.n	8010866 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010860:	f06f 0305 	mvn.w	r3, #5
 8010864:	e04c      	b.n	8010900 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801086a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801086c:	68b8      	ldr	r0, [r7, #8]
 801086e:	f7ff fe2b 	bl	80104c8 <tcp_output_segment_busy>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d002      	beq.n	801087e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010878:	f06f 0305 	mvn.w	r3, #5
 801087c:	e040      	b.n	8010900 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	681a      	ldr	r2, [r3, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	336c      	adds	r3, #108	; 0x6c
 801088a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801088c:	e002      	b.n	8010894 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d011      	beq.n	80108c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7f8 fcec 	bl	8009282 <lwip_htonl>
 80108aa:	4604      	mov	r4, r0
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	68db      	ldr	r3, [r3, #12]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7f8 fce5 	bl	8009282 <lwip_htonl>
 80108b8:	4603      	mov	r3, r0
 80108ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dbe6      	blt.n	801088e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681a      	ldr	r2, [r3, #0]
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d103      	bne.n	80108de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80108e4:	2bff      	cmp	r3, #255	; 0xff
 80108e6:	d007      	beq.n	80108f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80108ee:	3301      	adds	r3, #1
 80108f0:	b2da      	uxtb	r2, r3
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80108fe:	2300      	movs	r3, #0
}
 8010900:	4618      	mov	r0, r3
 8010902:	3714      	adds	r7, #20
 8010904:	46bd      	mov	sp, r7
 8010906:	bd90      	pop	{r4, r7, pc}
 8010908:	080174b0 	.word	0x080174b0
 801090c:	08017b50 	.word	0x08017b50
 8010910:	08017504 	.word	0x08017504

08010914 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d106      	bne.n	8010930 <tcp_rexmit_fast+0x1c>
 8010922:	4b2e      	ldr	r3, [pc, #184]	; (80109dc <tcp_rexmit_fast+0xc8>)
 8010924:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010928:	492d      	ldr	r1, [pc, #180]	; (80109e0 <tcp_rexmit_fast+0xcc>)
 801092a:	482e      	ldr	r0, [pc, #184]	; (80109e4 <tcp_rexmit_fast+0xd0>)
 801092c:	f003 fcb4 	bl	8014298 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010934:	2b00      	cmp	r3, #0
 8010936:	d04d      	beq.n	80109d4 <tcp_rexmit_fast+0xc0>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	8b5b      	ldrh	r3, [r3, #26]
 801093c:	f003 0304 	and.w	r3, r3, #4
 8010940:	2b00      	cmp	r3, #0
 8010942:	d147      	bne.n	80109d4 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f7ff ff79 	bl	801083c <tcp_rexmit>
 801094a:	4603      	mov	r3, r0
 801094c:	2b00      	cmp	r3, #0
 801094e:	d141      	bne.n	80109d4 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801095c:	429a      	cmp	r2, r3
 801095e:	d207      	bcs.n	8010970 <tcp_rexmit_fast+0x5c>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010966:	0fda      	lsrs	r2, r3, #31
 8010968:	4413      	add	r3, r2
 801096a:	105b      	asrs	r3, r3, #1
 801096c:	b29b      	uxth	r3, r3
 801096e:	e006      	b.n	801097e <tcp_rexmit_fast+0x6a>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010976:	0fda      	lsrs	r2, r3, #31
 8010978:	4413      	add	r3, r2
 801097a:	105b      	asrs	r3, r3, #1
 801097c:	b29b      	uxth	r3, r3
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801098a:	461a      	mov	r2, r3
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010990:	005b      	lsls	r3, r3, #1
 8010992:	429a      	cmp	r2, r3
 8010994:	d206      	bcs.n	80109a4 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801099a:	005b      	lsls	r3, r3, #1
 801099c:	b29a      	uxth	r2, r3
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109ae:	4619      	mov	r1, r3
 80109b0:	0049      	lsls	r1, r1, #1
 80109b2:	440b      	add	r3, r1
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	4413      	add	r3, r2
 80109b8:	b29a      	uxth	r2, r3
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	8b5b      	ldrh	r3, [r3, #26]
 80109c4:	f043 0304 	orr.w	r3, r3, #4
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2200      	movs	r2, #0
 80109d2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80109d4:	bf00      	nop
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	080174b0 	.word	0x080174b0
 80109e0:	08017b68 	.word	0x08017b68
 80109e4:	08017504 	.word	0x08017504

080109e8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b086      	sub	sp, #24
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	607b      	str	r3, [r7, #4]
 80109f2:	460b      	mov	r3, r1
 80109f4:	817b      	strh	r3, [r7, #10]
 80109f6:	4613      	mov	r3, r2
 80109f8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80109fa:	897a      	ldrh	r2, [r7, #10]
 80109fc:	893b      	ldrh	r3, [r7, #8]
 80109fe:	4413      	add	r3, r2
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	3314      	adds	r3, #20
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	2022      	movs	r0, #34	; 0x22
 8010a0e:	f7f9 fceb 	bl	800a3e8 <pbuf_alloc>
 8010a12:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d04e      	beq.n	8010ab8 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	895b      	ldrh	r3, [r3, #10]
 8010a1e:	461a      	mov	r2, r3
 8010a20:	897b      	ldrh	r3, [r7, #10]
 8010a22:	3314      	adds	r3, #20
 8010a24:	429a      	cmp	r2, r3
 8010a26:	da06      	bge.n	8010a36 <tcp_output_alloc_header_common+0x4e>
 8010a28:	4b26      	ldr	r3, [pc, #152]	; (8010ac4 <tcp_output_alloc_header_common+0xdc>)
 8010a2a:	f240 7224 	movw	r2, #1828	; 0x724
 8010a2e:	4926      	ldr	r1, [pc, #152]	; (8010ac8 <tcp_output_alloc_header_common+0xe0>)
 8010a30:	4826      	ldr	r0, [pc, #152]	; (8010acc <tcp_output_alloc_header_common+0xe4>)
 8010a32:	f003 fc31 	bl	8014298 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010a3c:	8c3b      	ldrh	r3, [r7, #32]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7f8 fc0a 	bl	8009258 <lwip_htons>
 8010a44:	4603      	mov	r3, r0
 8010a46:	461a      	mov	r2, r3
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7f8 fc02 	bl	8009258 <lwip_htons>
 8010a54:	4603      	mov	r3, r0
 8010a56:	461a      	mov	r2, r3
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	f7f8 fc0d 	bl	8009282 <lwip_htonl>
 8010a68:	4602      	mov	r2, r0
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010a6e:	897b      	ldrh	r3, [r7, #10]
 8010a70:	089b      	lsrs	r3, r3, #2
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	3305      	adds	r3, #5
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	031b      	lsls	r3, r3, #12
 8010a7a:	b29a      	uxth	r2, r3
 8010a7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	4313      	orrs	r3, r2
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7f8 fbe6 	bl	8009258 <lwip_htons>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	461a      	mov	r2, r3
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010a94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7f8 fbde 	bl	8009258 <lwip_htons>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	741a      	strb	r2, [r3, #16]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	749a      	strb	r2, [r3, #18]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010ab8:	697b      	ldr	r3, [r7, #20]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3718      	adds	r7, #24
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	080174b0 	.word	0x080174b0
 8010ac8:	08017b88 	.word	0x08017b88
 8010acc:	08017504 	.word	0x08017504

08010ad0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010ad0:	b5b0      	push	{r4, r5, r7, lr}
 8010ad2:	b08a      	sub	sp, #40	; 0x28
 8010ad4:	af04      	add	r7, sp, #16
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	607b      	str	r3, [r7, #4]
 8010ada:	460b      	mov	r3, r1
 8010adc:	817b      	strh	r3, [r7, #10]
 8010ade:	4613      	mov	r3, r2
 8010ae0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d106      	bne.n	8010af6 <tcp_output_alloc_header+0x26>
 8010ae8:	4b15      	ldr	r3, [pc, #84]	; (8010b40 <tcp_output_alloc_header+0x70>)
 8010aea:	f240 7242 	movw	r2, #1858	; 0x742
 8010aee:	4915      	ldr	r1, [pc, #84]	; (8010b44 <tcp_output_alloc_header+0x74>)
 8010af0:	4815      	ldr	r0, [pc, #84]	; (8010b48 <tcp_output_alloc_header+0x78>)
 8010af2:	f003 fbd1 	bl	8014298 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	8adb      	ldrh	r3, [r3, #22]
 8010afe:	68fa      	ldr	r2, [r7, #12]
 8010b00:	8b12      	ldrh	r2, [r2, #24]
 8010b02:	68f9      	ldr	r1, [r7, #12]
 8010b04:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010b06:	893d      	ldrh	r5, [r7, #8]
 8010b08:	897c      	ldrh	r4, [r7, #10]
 8010b0a:	9103      	str	r1, [sp, #12]
 8010b0c:	2110      	movs	r1, #16
 8010b0e:	9102      	str	r1, [sp, #8]
 8010b10:	9201      	str	r2, [sp, #4]
 8010b12:	9300      	str	r3, [sp, #0]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	462a      	mov	r2, r5
 8010b18:	4621      	mov	r1, r4
 8010b1a:	f7ff ff65 	bl	80109e8 <tcp_output_alloc_header_common>
 8010b1e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d006      	beq.n	8010b34 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b2a:	68fa      	ldr	r2, [r7, #12]
 8010b2c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010b2e:	441a      	add	r2, r3
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010b34:	697b      	ldr	r3, [r7, #20]
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3718      	adds	r7, #24
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	080174b0 	.word	0x080174b0
 8010b44:	08017bb8 	.word	0x08017bb8
 8010b48:	08017504 	.word	0x08017504

08010b4c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b088      	sub	sp, #32
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	4611      	mov	r1, r2
 8010b58:	461a      	mov	r2, r3
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	71fb      	strb	r3, [r7, #7]
 8010b5e:	4613      	mov	r3, r2
 8010b60:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010b62:	2300      	movs	r3, #0
 8010b64:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d106      	bne.n	8010b7a <tcp_output_fill_options+0x2e>
 8010b6c:	4b13      	ldr	r3, [pc, #76]	; (8010bbc <tcp_output_fill_options+0x70>)
 8010b6e:	f240 7256 	movw	r2, #1878	; 0x756
 8010b72:	4913      	ldr	r1, [pc, #76]	; (8010bc0 <tcp_output_fill_options+0x74>)
 8010b74:	4813      	ldr	r0, [pc, #76]	; (8010bc4 <tcp_output_fill_options+0x78>)
 8010b76:	f003 fb8f 	bl	8014298 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	3314      	adds	r3, #20
 8010b84:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010b86:	69bb      	ldr	r3, [r7, #24]
 8010b88:	f103 0214 	add.w	r2, r3, #20
 8010b8c:	8bfb      	ldrh	r3, [r7, #30]
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	4619      	mov	r1, r3
 8010b92:	79fb      	ldrb	r3, [r7, #7]
 8010b94:	009b      	lsls	r3, r3, #2
 8010b96:	f003 0304 	and.w	r3, r3, #4
 8010b9a:	440b      	add	r3, r1
 8010b9c:	4413      	add	r3, r2
 8010b9e:	697a      	ldr	r2, [r7, #20]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d006      	beq.n	8010bb2 <tcp_output_fill_options+0x66>
 8010ba4:	4b05      	ldr	r3, [pc, #20]	; (8010bbc <tcp_output_fill_options+0x70>)
 8010ba6:	f240 7275 	movw	r2, #1909	; 0x775
 8010baa:	4907      	ldr	r1, [pc, #28]	; (8010bc8 <tcp_output_fill_options+0x7c>)
 8010bac:	4805      	ldr	r0, [pc, #20]	; (8010bc4 <tcp_output_fill_options+0x78>)
 8010bae:	f003 fb73 	bl	8014298 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010bb2:	bf00      	nop
 8010bb4:	3720      	adds	r7, #32
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	080174b0 	.word	0x080174b0
 8010bc0:	08017be0 	.word	0x08017be0
 8010bc4:	08017504 	.word	0x08017504
 8010bc8:	08017ad8 	.word	0x08017ad8

08010bcc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b08a      	sub	sp, #40	; 0x28
 8010bd0:	af04      	add	r7, sp, #16
 8010bd2:	60f8      	str	r0, [r7, #12]
 8010bd4:	60b9      	str	r1, [r7, #8]
 8010bd6:	607a      	str	r2, [r7, #4]
 8010bd8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d106      	bne.n	8010bee <tcp_output_control_segment+0x22>
 8010be0:	4b1c      	ldr	r3, [pc, #112]	; (8010c54 <tcp_output_control_segment+0x88>)
 8010be2:	f240 7287 	movw	r2, #1927	; 0x787
 8010be6:	491c      	ldr	r1, [pc, #112]	; (8010c58 <tcp_output_control_segment+0x8c>)
 8010be8:	481c      	ldr	r0, [pc, #112]	; (8010c5c <tcp_output_control_segment+0x90>)
 8010bea:	f003 fb55 	bl	8014298 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010bee:	683a      	ldr	r2, [r7, #0]
 8010bf0:	6879      	ldr	r1, [r7, #4]
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f7fe fad6 	bl	800f1a4 <tcp_route>
 8010bf8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d102      	bne.n	8010c06 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010c00:	23fc      	movs	r3, #252	; 0xfc
 8010c02:	75fb      	strb	r3, [r7, #23]
 8010c04:	e01c      	b.n	8010c40 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d006      	beq.n	8010c1a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	7adb      	ldrb	r3, [r3, #11]
 8010c10:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	7a9b      	ldrb	r3, [r3, #10]
 8010c16:	757b      	strb	r3, [r7, #21]
 8010c18:	e003      	b.n	8010c22 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010c1a:	23ff      	movs	r3, #255	; 0xff
 8010c1c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010c22:	7dba      	ldrb	r2, [r7, #22]
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	9302      	str	r3, [sp, #8]
 8010c28:	2306      	movs	r3, #6
 8010c2a:	9301      	str	r3, [sp, #4]
 8010c2c:	7d7b      	ldrb	r3, [r7, #21]
 8010c2e:	9300      	str	r3, [sp, #0]
 8010c30:	4613      	mov	r3, r2
 8010c32:	683a      	ldr	r2, [r7, #0]
 8010c34:	6879      	ldr	r1, [r7, #4]
 8010c36:	68b8      	ldr	r0, [r7, #8]
 8010c38:	f002 f8e2 	bl	8012e00 <ip4_output_if>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010c40:	68b8      	ldr	r0, [r7, #8]
 8010c42:	f7f9 feb1 	bl	800a9a8 <pbuf_free>
  return err;
 8010c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3718      	adds	r7, #24
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
 8010c52:	bf00      	nop
 8010c54:	080174b0 	.word	0x080174b0
 8010c58:	08017c08 	.word	0x08017c08
 8010c5c:	08017504 	.word	0x08017504

08010c60 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010c60:	b590      	push	{r4, r7, lr}
 8010c62:	b08b      	sub	sp, #44	; 0x2c
 8010c64:	af04      	add	r7, sp, #16
 8010c66:	60f8      	str	r0, [r7, #12]
 8010c68:	60b9      	str	r1, [r7, #8]
 8010c6a:	607a      	str	r2, [r7, #4]
 8010c6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d106      	bne.n	8010c82 <tcp_rst+0x22>
 8010c74:	4b1f      	ldr	r3, [pc, #124]	; (8010cf4 <tcp_rst+0x94>)
 8010c76:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010c7a:	491f      	ldr	r1, [pc, #124]	; (8010cf8 <tcp_rst+0x98>)
 8010c7c:	481f      	ldr	r0, [pc, #124]	; (8010cfc <tcp_rst+0x9c>)
 8010c7e:	f003 fb0b 	bl	8014298 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d106      	bne.n	8010c96 <tcp_rst+0x36>
 8010c88:	4b1a      	ldr	r3, [pc, #104]	; (8010cf4 <tcp_rst+0x94>)
 8010c8a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010c8e:	491c      	ldr	r1, [pc, #112]	; (8010d00 <tcp_rst+0xa0>)
 8010c90:	481a      	ldr	r0, [pc, #104]	; (8010cfc <tcp_rst+0x9c>)
 8010c92:	f003 fb01 	bl	8014298 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010c96:	2300      	movs	r3, #0
 8010c98:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010c9a:	f246 0308 	movw	r3, #24584	; 0x6008
 8010c9e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010ca0:	7dfb      	ldrb	r3, [r7, #23]
 8010ca2:	b29c      	uxth	r4, r3
 8010ca4:	68b8      	ldr	r0, [r7, #8]
 8010ca6:	f7f8 faec 	bl	8009282 <lwip_htonl>
 8010caa:	4602      	mov	r2, r0
 8010cac:	8abb      	ldrh	r3, [r7, #20]
 8010cae:	9303      	str	r3, [sp, #12]
 8010cb0:	2314      	movs	r3, #20
 8010cb2:	9302      	str	r3, [sp, #8]
 8010cb4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010cb6:	9301      	str	r3, [sp, #4]
 8010cb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	4621      	mov	r1, r4
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f7ff fe90 	bl	80109e8 <tcp_output_alloc_header_common>
 8010cc8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d00c      	beq.n	8010cea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010cd0:	7dfb      	ldrb	r3, [r7, #23]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	6939      	ldr	r1, [r7, #16]
 8010cd6:	68f8      	ldr	r0, [r7, #12]
 8010cd8:	f7ff ff38 	bl	8010b4c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cde:	683a      	ldr	r2, [r7, #0]
 8010ce0:	6939      	ldr	r1, [r7, #16]
 8010ce2:	68f8      	ldr	r0, [r7, #12]
 8010ce4:	f7ff ff72 	bl	8010bcc <tcp_output_control_segment>
 8010ce8:	e000      	b.n	8010cec <tcp_rst+0x8c>
    return;
 8010cea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010cec:	371c      	adds	r7, #28
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd90      	pop	{r4, r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	080174b0 	.word	0x080174b0
 8010cf8:	08017c34 	.word	0x08017c34
 8010cfc:	08017504 	.word	0x08017504
 8010d00:	08017c50 	.word	0x08017c50

08010d04 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010d04:	b590      	push	{r4, r7, lr}
 8010d06:	b087      	sub	sp, #28
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010d10:	2300      	movs	r3, #0
 8010d12:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d106      	bne.n	8010d28 <tcp_send_empty_ack+0x24>
 8010d1a:	4b28      	ldr	r3, [pc, #160]	; (8010dbc <tcp_send_empty_ack+0xb8>)
 8010d1c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010d20:	4927      	ldr	r1, [pc, #156]	; (8010dc0 <tcp_send_empty_ack+0xbc>)
 8010d22:	4828      	ldr	r0, [pc, #160]	; (8010dc4 <tcp_send_empty_ack+0xc0>)
 8010d24:	f003 fab8 	bl	8014298 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010d28:	7dfb      	ldrb	r3, [r7, #23]
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	b2db      	uxtb	r3, r3
 8010d2e:	f003 0304 	and.w	r3, r3, #4
 8010d32:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010d34:	7d7b      	ldrb	r3, [r7, #21]
 8010d36:	b29c      	uxth	r4, r3
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7f8 faa0 	bl	8009282 <lwip_htonl>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2200      	movs	r2, #0
 8010d46:	4621      	mov	r1, r4
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f7ff fec1 	bl	8010ad0 <tcp_output_alloc_header>
 8010d4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d109      	bne.n	8010d6a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	8b5b      	ldrh	r3, [r3, #26]
 8010d5a:	f043 0303 	orr.w	r3, r3, #3
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010d64:	f06f 0301 	mvn.w	r3, #1
 8010d68:	e023      	b.n	8010db2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010d6a:	7dbb      	ldrb	r3, [r7, #22]
 8010d6c:	7dfa      	ldrb	r2, [r7, #23]
 8010d6e:	6939      	ldr	r1, [r7, #16]
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7ff feeb 	bl	8010b4c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	3304      	adds	r3, #4
 8010d7c:	6939      	ldr	r1, [r7, #16]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f7ff ff24 	bl	8010bcc <tcp_output_control_segment>
 8010d84:	4603      	mov	r3, r0
 8010d86:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d007      	beq.n	8010da0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	8b5b      	ldrh	r3, [r3, #26]
 8010d94:	f043 0303 	orr.w	r3, r3, #3
 8010d98:	b29a      	uxth	r2, r3
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	835a      	strh	r2, [r3, #26]
 8010d9e:	e006      	b.n	8010dae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	8b5b      	ldrh	r3, [r3, #26]
 8010da4:	f023 0303 	bic.w	r3, r3, #3
 8010da8:	b29a      	uxth	r2, r3
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	371c      	adds	r7, #28
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd90      	pop	{r4, r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	080174b0 	.word	0x080174b0
 8010dc0:	08017c6c 	.word	0x08017c6c
 8010dc4:	08017504 	.word	0x08017504

08010dc8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010dc8:	b590      	push	{r4, r7, lr}
 8010dca:	b087      	sub	sp, #28
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d106      	bne.n	8010de8 <tcp_keepalive+0x20>
 8010dda:	4b18      	ldr	r3, [pc, #96]	; (8010e3c <tcp_keepalive+0x74>)
 8010ddc:	f640 0224 	movw	r2, #2084	; 0x824
 8010de0:	4917      	ldr	r1, [pc, #92]	; (8010e40 <tcp_keepalive+0x78>)
 8010de2:	4818      	ldr	r0, [pc, #96]	; (8010e44 <tcp_keepalive+0x7c>)
 8010de4:	f003 fa58 	bl	8014298 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010de8:	7dfb      	ldrb	r3, [r7, #23]
 8010dea:	b29c      	uxth	r4, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010df0:	3b01      	subs	r3, #1
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7f8 fa45 	bl	8009282 <lwip_htonl>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	4621      	mov	r1, r4
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f7ff fe66 	bl	8010ad0 <tcp_output_alloc_header>
 8010e04:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d102      	bne.n	8010e12 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e10:	e010      	b.n	8010e34 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010e12:	7dfb      	ldrb	r3, [r7, #23]
 8010e14:	2200      	movs	r2, #0
 8010e16:	6939      	ldr	r1, [r7, #16]
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff fe97 	bl	8010b4c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	3304      	adds	r3, #4
 8010e24:	6939      	ldr	r1, [r7, #16]
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f7ff fed0 	bl	8010bcc <tcp_output_control_segment>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	371c      	adds	r7, #28
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd90      	pop	{r4, r7, pc}
 8010e3c:	080174b0 	.word	0x080174b0
 8010e40:	08017c8c 	.word	0x08017c8c
 8010e44:	08017504 	.word	0x08017504

08010e48 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010e48:	b590      	push	{r4, r7, lr}
 8010e4a:	b08b      	sub	sp, #44	; 0x2c
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e50:	2300      	movs	r3, #0
 8010e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d106      	bne.n	8010e6a <tcp_zero_window_probe+0x22>
 8010e5c:	4b4c      	ldr	r3, [pc, #304]	; (8010f90 <tcp_zero_window_probe+0x148>)
 8010e5e:	f640 024f 	movw	r2, #2127	; 0x84f
 8010e62:	494c      	ldr	r1, [pc, #304]	; (8010f94 <tcp_zero_window_probe+0x14c>)
 8010e64:	484c      	ldr	r0, [pc, #304]	; (8010f98 <tcp_zero_window_probe+0x150>)
 8010e66:	f003 fa17 	bl	8014298 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e6e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010e70:	6a3b      	ldr	r3, [r7, #32]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d101      	bne.n	8010e7a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010e76:	2300      	movs	r3, #0
 8010e78:	e086      	b.n	8010f88 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010e80:	2bff      	cmp	r3, #255	; 0xff
 8010e82:	d007      	beq.n	8010e94 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010e94:	6a3b      	ldr	r3, [r7, #32]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	899b      	ldrh	r3, [r3, #12]
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7f8 f9db 	bl	8009258 <lwip_htons>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	f003 0301 	and.w	r3, r3, #1
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d005      	beq.n	8010eba <tcp_zero_window_probe+0x72>
 8010eae:	6a3b      	ldr	r3, [r7, #32]
 8010eb0:	891b      	ldrh	r3, [r3, #8]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d101      	bne.n	8010eba <tcp_zero_window_probe+0x72>
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e000      	b.n	8010ebc <tcp_zero_window_probe+0x74>
 8010eba:	2300      	movs	r3, #0
 8010ebc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010ebe:	7ffb      	ldrb	r3, [r7, #31]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	bf0c      	ite	eq
 8010ec4:	2301      	moveq	r3, #1
 8010ec6:	2300      	movne	r3, #0
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ed0:	b299      	uxth	r1, r3
 8010ed2:	6a3b      	ldr	r3, [r7, #32]
 8010ed4:	68db      	ldr	r3, [r3, #12]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	8bba      	ldrh	r2, [r7, #28]
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7ff fdf8 	bl	8010ad0 <tcp_output_alloc_header>
 8010ee0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010ee2:	69bb      	ldr	r3, [r7, #24]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d102      	bne.n	8010eee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8010eec:	e04c      	b.n	8010f88 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010eee:	69bb      	ldr	r3, [r7, #24]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010ef4:	7ffb      	ldrb	r3, [r7, #31]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d011      	beq.n	8010f1e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	899b      	ldrh	r3, [r3, #12]
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	b21b      	sxth	r3, r3
 8010f02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f06:	b21c      	sxth	r4, r3
 8010f08:	2011      	movs	r0, #17
 8010f0a:	f7f8 f9a5 	bl	8009258 <lwip_htons>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	b21b      	sxth	r3, r3
 8010f12:	4323      	orrs	r3, r4
 8010f14:	b21b      	sxth	r3, r3
 8010f16:	b29a      	uxth	r2, r3
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	819a      	strh	r2, [r3, #12]
 8010f1c:	e010      	b.n	8010f40 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010f1e:	69bb      	ldr	r3, [r7, #24]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	3314      	adds	r3, #20
 8010f24:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010f26:	6a3b      	ldr	r3, [r7, #32]
 8010f28:	6858      	ldr	r0, [r3, #4]
 8010f2a:	6a3b      	ldr	r3, [r7, #32]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	891a      	ldrh	r2, [r3, #8]
 8010f30:	6a3b      	ldr	r3, [r7, #32]
 8010f32:	891b      	ldrh	r3, [r3, #8]
 8010f34:	1ad3      	subs	r3, r2, r3
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	2201      	movs	r2, #1
 8010f3a:	6939      	ldr	r1, [r7, #16]
 8010f3c:	f7f9 ff2a 	bl	800ad94 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010f40:	6a3b      	ldr	r3, [r7, #32]
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7f8 f99b 	bl	8009282 <lwip_htonl>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	3301      	adds	r3, #1
 8010f50:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	da02      	bge.n	8010f64 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	68fa      	ldr	r2, [r7, #12]
 8010f62:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f68:	2200      	movs	r2, #0
 8010f6a:	69b9      	ldr	r1, [r7, #24]
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f7ff fded 	bl	8010b4c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	3304      	adds	r3, #4
 8010f78:	69b9      	ldr	r1, [r7, #24]
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f7ff fe26 	bl	8010bcc <tcp_output_control_segment>
 8010f80:	4603      	mov	r3, r0
 8010f82:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010f84:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	372c      	adds	r7, #44	; 0x2c
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd90      	pop	{r4, r7, pc}
 8010f90:	080174b0 	.word	0x080174b0
 8010f94:	08017ca8 	.word	0x08017ca8
 8010f98:	08017504 	.word	0x08017504

08010f9c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010fa4:	f7f9 ffe4 	bl	800af70 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010fa8:	4b0a      	ldr	r3, [pc, #40]	; (8010fd4 <tcpip_tcp_timer+0x38>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d103      	bne.n	8010fb8 <tcpip_tcp_timer+0x1c>
 8010fb0:	4b09      	ldr	r3, [pc, #36]	; (8010fd8 <tcpip_tcp_timer+0x3c>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d005      	beq.n	8010fc4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010fb8:	2200      	movs	r2, #0
 8010fba:	4908      	ldr	r1, [pc, #32]	; (8010fdc <tcpip_tcp_timer+0x40>)
 8010fbc:	20fa      	movs	r0, #250	; 0xfa
 8010fbe:	f000 f8f1 	bl	80111a4 <sys_timeout>
 8010fc2:	e002      	b.n	8010fca <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010fc4:	4b06      	ldr	r3, [pc, #24]	; (8010fe0 <tcpip_tcp_timer+0x44>)
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	601a      	str	r2, [r3, #0]
  }
}
 8010fca:	bf00      	nop
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	2000acbc 	.word	0x2000acbc
 8010fd8:	2000accc 	.word	0x2000accc
 8010fdc:	08010f9d 	.word	0x08010f9d
 8010fe0:	200042d8 	.word	0x200042d8

08010fe4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010fe8:	4b0a      	ldr	r3, [pc, #40]	; (8011014 <tcp_timer_needed+0x30>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10f      	bne.n	8011010 <tcp_timer_needed+0x2c>
 8010ff0:	4b09      	ldr	r3, [pc, #36]	; (8011018 <tcp_timer_needed+0x34>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d103      	bne.n	8011000 <tcp_timer_needed+0x1c>
 8010ff8:	4b08      	ldr	r3, [pc, #32]	; (801101c <tcp_timer_needed+0x38>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d007      	beq.n	8011010 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011000:	4b04      	ldr	r3, [pc, #16]	; (8011014 <tcp_timer_needed+0x30>)
 8011002:	2201      	movs	r2, #1
 8011004:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011006:	2200      	movs	r2, #0
 8011008:	4905      	ldr	r1, [pc, #20]	; (8011020 <tcp_timer_needed+0x3c>)
 801100a:	20fa      	movs	r0, #250	; 0xfa
 801100c:	f000 f8ca 	bl	80111a4 <sys_timeout>
  }
}
 8011010:	bf00      	nop
 8011012:	bd80      	pop	{r7, pc}
 8011014:	200042d8 	.word	0x200042d8
 8011018:	2000acbc 	.word	0x2000acbc
 801101c:	2000accc 	.word	0x2000accc
 8011020:	08010f9d 	.word	0x08010f9d

08011024 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b086      	sub	sp, #24
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011030:	200a      	movs	r0, #10
 8011032:	f7f8 fdc7 	bl	8009bc4 <memp_malloc>
 8011036:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d109      	bne.n	8011052 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d151      	bne.n	80110e8 <sys_timeout_abs+0xc4>
 8011044:	4b2a      	ldr	r3, [pc, #168]	; (80110f0 <sys_timeout_abs+0xcc>)
 8011046:	22be      	movs	r2, #190	; 0xbe
 8011048:	492a      	ldr	r1, [pc, #168]	; (80110f4 <sys_timeout_abs+0xd0>)
 801104a:	482b      	ldr	r0, [pc, #172]	; (80110f8 <sys_timeout_abs+0xd4>)
 801104c:	f003 f924 	bl	8014298 <iprintf>
    return;
 8011050:	e04a      	b.n	80110e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	2200      	movs	r2, #0
 8011056:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	68ba      	ldr	r2, [r7, #8]
 801105c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	687a      	ldr	r2, [r7, #4]
 8011062:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801106a:	4b24      	ldr	r3, [pc, #144]	; (80110fc <sys_timeout_abs+0xd8>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d103      	bne.n	801107a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011072:	4a22      	ldr	r2, [pc, #136]	; (80110fc <sys_timeout_abs+0xd8>)
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	6013      	str	r3, [r2, #0]
    return;
 8011078:	e037      	b.n	80110ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	685a      	ldr	r2, [r3, #4]
 801107e:	4b1f      	ldr	r3, [pc, #124]	; (80110fc <sys_timeout_abs+0xd8>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	1ad3      	subs	r3, r2, r3
 8011086:	0fdb      	lsrs	r3, r3, #31
 8011088:	f003 0301 	and.w	r3, r3, #1
 801108c:	b2db      	uxtb	r3, r3
 801108e:	2b00      	cmp	r3, #0
 8011090:	d007      	beq.n	80110a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011092:	4b1a      	ldr	r3, [pc, #104]	; (80110fc <sys_timeout_abs+0xd8>)
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801109a:	4a18      	ldr	r2, [pc, #96]	; (80110fc <sys_timeout_abs+0xd8>)
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	6013      	str	r3, [r2, #0]
 80110a0:	e023      	b.n	80110ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80110a2:	4b16      	ldr	r3, [pc, #88]	; (80110fc <sys_timeout_abs+0xd8>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	617b      	str	r3, [r7, #20]
 80110a8:	e01a      	b.n	80110e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d00b      	beq.n	80110ca <sys_timeout_abs+0xa6>
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	685a      	ldr	r2, [r3, #4]
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	1ad3      	subs	r3, r2, r3
 80110be:	0fdb      	lsrs	r3, r3, #31
 80110c0:	f003 0301 	and.w	r3, r3, #1
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d007      	beq.n	80110da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	693a      	ldr	r2, [r7, #16]
 80110d6:	601a      	str	r2, [r3, #0]
        break;
 80110d8:	e007      	b.n	80110ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	617b      	str	r3, [r7, #20]
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d1e1      	bne.n	80110aa <sys_timeout_abs+0x86>
 80110e6:	e000      	b.n	80110ea <sys_timeout_abs+0xc6>
    return;
 80110e8:	bf00      	nop
      }
    }
  }
}
 80110ea:	3718      	adds	r7, #24
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	08017ccc 	.word	0x08017ccc
 80110f4:	08017d00 	.word	0x08017d00
 80110f8:	08017d40 	.word	0x08017d40
 80110fc:	200042d0 	.word	0x200042d0

08011100 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b086      	sub	sp, #24
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	4798      	blx	r3

  now = sys_now();
 8011112:	f7f2 fd37 	bl	8003b84 <sys_now>
 8011116:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	4b0f      	ldr	r3, [pc, #60]	; (801115c <lwip_cyclic_timer+0x5c>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4413      	add	r3, r2
 8011122:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011124:	68fa      	ldr	r2, [r7, #12]
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	1ad3      	subs	r3, r2, r3
 801112a:	0fdb      	lsrs	r3, r3, #31
 801112c:	f003 0301 	and.w	r3, r3, #1
 8011130:	b2db      	uxtb	r3, r3
 8011132:	2b00      	cmp	r3, #0
 8011134:	d009      	beq.n	801114a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	4413      	add	r3, r2
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	4907      	ldr	r1, [pc, #28]	; (8011160 <lwip_cyclic_timer+0x60>)
 8011142:	4618      	mov	r0, r3
 8011144:	f7ff ff6e 	bl	8011024 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011148:	e004      	b.n	8011154 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	4904      	ldr	r1, [pc, #16]	; (8011160 <lwip_cyclic_timer+0x60>)
 801114e:	68f8      	ldr	r0, [r7, #12]
 8011150:	f7ff ff68 	bl	8011024 <sys_timeout_abs>
}
 8011154:	bf00      	nop
 8011156:	3718      	adds	r7, #24
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}
 801115c:	200042d4 	.word	0x200042d4
 8011160:	08011101 	.word	0x08011101

08011164 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801116a:	2301      	movs	r3, #1
 801116c:	607b      	str	r3, [r7, #4]
 801116e:	e00e      	b.n	801118e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011170:	4a0a      	ldr	r2, [pc, #40]	; (801119c <sys_timeouts_init+0x38>)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	00db      	lsls	r3, r3, #3
 801117c:	4a07      	ldr	r2, [pc, #28]	; (801119c <sys_timeouts_init+0x38>)
 801117e:	4413      	add	r3, r2
 8011180:	461a      	mov	r2, r3
 8011182:	4907      	ldr	r1, [pc, #28]	; (80111a0 <sys_timeouts_init+0x3c>)
 8011184:	f000 f80e 	bl	80111a4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	3301      	adds	r3, #1
 801118c:	607b      	str	r3, [r7, #4]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2b02      	cmp	r3, #2
 8011192:	d9ed      	bls.n	8011170 <sys_timeouts_init+0xc>
  }
}
 8011194:	bf00      	nop
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	080188f0 	.word	0x080188f0
 80111a0:	08011101 	.word	0x08011101

080111a4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b086      	sub	sp, #24
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80111b6:	d306      	bcc.n	80111c6 <sys_timeout+0x22>
 80111b8:	4b0a      	ldr	r3, [pc, #40]	; (80111e4 <sys_timeout+0x40>)
 80111ba:	f240 1229 	movw	r2, #297	; 0x129
 80111be:	490a      	ldr	r1, [pc, #40]	; (80111e8 <sys_timeout+0x44>)
 80111c0:	480a      	ldr	r0, [pc, #40]	; (80111ec <sys_timeout+0x48>)
 80111c2:	f003 f869 	bl	8014298 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80111c6:	f7f2 fcdd 	bl	8003b84 <sys_now>
 80111ca:	4602      	mov	r2, r0
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	4413      	add	r3, r2
 80111d0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80111d2:	687a      	ldr	r2, [r7, #4]
 80111d4:	68b9      	ldr	r1, [r7, #8]
 80111d6:	6978      	ldr	r0, [r7, #20]
 80111d8:	f7ff ff24 	bl	8011024 <sys_timeout_abs>
#endif
}
 80111dc:	bf00      	nop
 80111de:	3718      	adds	r7, #24
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	08017ccc 	.word	0x08017ccc
 80111e8:	08017d68 	.word	0x08017d68
 80111ec:	08017d40 	.word	0x08017d40

080111f0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80111f6:	f7f2 fcc5 	bl	8003b84 <sys_now>
 80111fa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80111fc:	4b17      	ldr	r3, [pc, #92]	; (801125c <sys_check_timeouts+0x6c>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d022      	beq.n	801124e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	0fdb      	lsrs	r3, r3, #31
 8011212:	f003 0301 	and.w	r3, r3, #1
 8011216:	b2db      	uxtb	r3, r3
 8011218:	2b00      	cmp	r3, #0
 801121a:	d11a      	bne.n	8011252 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4a0e      	ldr	r2, [pc, #56]	; (801125c <sys_check_timeouts+0x6c>)
 8011222:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	685b      	ldr	r3, [r3, #4]
 8011234:	4a0a      	ldr	r2, [pc, #40]	; (8011260 <sys_check_timeouts+0x70>)
 8011236:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011238:	68b9      	ldr	r1, [r7, #8]
 801123a:	200a      	movs	r0, #10
 801123c:	f7f8 fd14 	bl	8009c68 <memp_free>
    if (handler != NULL) {
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d0da      	beq.n	80111fc <sys_check_timeouts+0xc>
      handler(arg);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6838      	ldr	r0, [r7, #0]
 801124a:	4798      	blx	r3
  do {
 801124c:	e7d6      	b.n	80111fc <sys_check_timeouts+0xc>
      return;
 801124e:	bf00      	nop
 8011250:	e000      	b.n	8011254 <sys_check_timeouts+0x64>
      return;
 8011252:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	200042d0 	.word	0x200042d0
 8011260:	200042d4 	.word	0x200042d4

08011264 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801126a:	4b16      	ldr	r3, [pc, #88]	; (80112c4 <sys_timeouts_sleeptime+0x60>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d102      	bne.n	8011278 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011272:	f04f 33ff 	mov.w	r3, #4294967295
 8011276:	e020      	b.n	80112ba <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011278:	f7f2 fc84 	bl	8003b84 <sys_now>
 801127c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801127e:	4b11      	ldr	r3, [pc, #68]	; (80112c4 <sys_timeouts_sleeptime+0x60>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	685a      	ldr	r2, [r3, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	1ad3      	subs	r3, r2, r3
 8011288:	0fdb      	lsrs	r3, r3, #31
 801128a:	f003 0301 	and.w	r3, r3, #1
 801128e:	b2db      	uxtb	r3, r3
 8011290:	2b00      	cmp	r3, #0
 8011292:	d001      	beq.n	8011298 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011294:	2300      	movs	r3, #0
 8011296:	e010      	b.n	80112ba <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011298:	4b0a      	ldr	r3, [pc, #40]	; (80112c4 <sys_timeouts_sleeptime+0x60>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	685a      	ldr	r2, [r3, #4]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	1ad3      	subs	r3, r2, r3
 80112a2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	da06      	bge.n	80112b8 <sys_timeouts_sleeptime+0x54>
 80112aa:	4b07      	ldr	r3, [pc, #28]	; (80112c8 <sys_timeouts_sleeptime+0x64>)
 80112ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80112b0:	4906      	ldr	r1, [pc, #24]	; (80112cc <sys_timeouts_sleeptime+0x68>)
 80112b2:	4807      	ldr	r0, [pc, #28]	; (80112d0 <sys_timeouts_sleeptime+0x6c>)
 80112b4:	f002 fff0 	bl	8014298 <iprintf>
    return ret;
 80112b8:	683b      	ldr	r3, [r7, #0]
  }
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3708      	adds	r7, #8
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	200042d0 	.word	0x200042d0
 80112c8:	08017ccc 	.word	0x08017ccc
 80112cc:	08017da0 	.word	0x08017da0
 80112d0:	08017d40 	.word	0x08017d40

080112d4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80112d8:	f003 f85a 	bl	8014390 <rand>
 80112dc:	4603      	mov	r3, r0
 80112de:	b29b      	uxth	r3, r3
 80112e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80112ea:	b29a      	uxth	r2, r3
 80112ec:	4b01      	ldr	r3, [pc, #4]	; (80112f4 <udp_init+0x20>)
 80112ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80112f0:	bf00      	nop
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	20000018 	.word	0x20000018

080112f8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b083      	sub	sp, #12
 80112fc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80112fe:	2300      	movs	r3, #0
 8011300:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011302:	4b17      	ldr	r3, [pc, #92]	; (8011360 <udp_new_port+0x68>)
 8011304:	881b      	ldrh	r3, [r3, #0]
 8011306:	1c5a      	adds	r2, r3, #1
 8011308:	b291      	uxth	r1, r2
 801130a:	4a15      	ldr	r2, [pc, #84]	; (8011360 <udp_new_port+0x68>)
 801130c:	8011      	strh	r1, [r2, #0]
 801130e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011312:	4293      	cmp	r3, r2
 8011314:	d103      	bne.n	801131e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011316:	4b12      	ldr	r3, [pc, #72]	; (8011360 <udp_new_port+0x68>)
 8011318:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801131c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801131e:	4b11      	ldr	r3, [pc, #68]	; (8011364 <udp_new_port+0x6c>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	603b      	str	r3, [r7, #0]
 8011324:	e011      	b.n	801134a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	8a5a      	ldrh	r2, [r3, #18]
 801132a:	4b0d      	ldr	r3, [pc, #52]	; (8011360 <udp_new_port+0x68>)
 801132c:	881b      	ldrh	r3, [r3, #0]
 801132e:	429a      	cmp	r2, r3
 8011330:	d108      	bne.n	8011344 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011332:	88fb      	ldrh	r3, [r7, #6]
 8011334:	3301      	adds	r3, #1
 8011336:	80fb      	strh	r3, [r7, #6]
 8011338:	88fb      	ldrh	r3, [r7, #6]
 801133a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801133e:	d3e0      	bcc.n	8011302 <udp_new_port+0xa>
        return 0;
 8011340:	2300      	movs	r3, #0
 8011342:	e007      	b.n	8011354 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	603b      	str	r3, [r7, #0]
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d1ea      	bne.n	8011326 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011350:	4b03      	ldr	r3, [pc, #12]	; (8011360 <udp_new_port+0x68>)
 8011352:	881b      	ldrh	r3, [r3, #0]
}
 8011354:	4618      	mov	r0, r3
 8011356:	370c      	adds	r7, #12
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr
 8011360:	20000018 	.word	0x20000018
 8011364:	2000acd4 	.word	0x2000acd4

08011368 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b084      	sub	sp, #16
 801136c:	af00      	add	r7, sp, #0
 801136e:	60f8      	str	r0, [r7, #12]
 8011370:	60b9      	str	r1, [r7, #8]
 8011372:	4613      	mov	r3, r2
 8011374:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d105      	bne.n	8011388 <udp_input_local_match+0x20>
 801137c:	4b27      	ldr	r3, [pc, #156]	; (801141c <udp_input_local_match+0xb4>)
 801137e:	2287      	movs	r2, #135	; 0x87
 8011380:	4927      	ldr	r1, [pc, #156]	; (8011420 <udp_input_local_match+0xb8>)
 8011382:	4828      	ldr	r0, [pc, #160]	; (8011424 <udp_input_local_match+0xbc>)
 8011384:	f002 ff88 	bl	8014298 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d105      	bne.n	801139a <udp_input_local_match+0x32>
 801138e:	4b23      	ldr	r3, [pc, #140]	; (801141c <udp_input_local_match+0xb4>)
 8011390:	2288      	movs	r2, #136	; 0x88
 8011392:	4925      	ldr	r1, [pc, #148]	; (8011428 <udp_input_local_match+0xc0>)
 8011394:	4823      	ldr	r0, [pc, #140]	; (8011424 <udp_input_local_match+0xbc>)
 8011396:	f002 ff7f 	bl	8014298 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	7a1b      	ldrb	r3, [r3, #8]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d00b      	beq.n	80113ba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	7a1a      	ldrb	r2, [r3, #8]
 80113a6:	4b21      	ldr	r3, [pc, #132]	; (801142c <udp_input_local_match+0xc4>)
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113ae:	3301      	adds	r3, #1
 80113b0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d001      	beq.n	80113ba <udp_input_local_match+0x52>
    return 0;
 80113b6:	2300      	movs	r3, #0
 80113b8:	e02b      	b.n	8011412 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80113ba:	79fb      	ldrb	r3, [r7, #7]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d018      	beq.n	80113f2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d013      	beq.n	80113ee <udp_input_local_match+0x86>
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00f      	beq.n	80113ee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80113ce:	4b17      	ldr	r3, [pc, #92]	; (801142c <udp_input_local_match+0xc4>)
 80113d0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80113d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113d6:	d00a      	beq.n	80113ee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	4b13      	ldr	r3, [pc, #76]	; (801142c <udp_input_local_match+0xc4>)
 80113de:	695b      	ldr	r3, [r3, #20]
 80113e0:	405a      	eors	r2, r3
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	3308      	adds	r3, #8
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d110      	bne.n	8011410 <udp_input_local_match+0xa8>
          return 1;
 80113ee:	2301      	movs	r3, #1
 80113f0:	e00f      	b.n	8011412 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d009      	beq.n	801140c <udp_input_local_match+0xa4>
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d005      	beq.n	801140c <udp_input_local_match+0xa4>
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	4b09      	ldr	r3, [pc, #36]	; (801142c <udp_input_local_match+0xc4>)
 8011406:	695b      	ldr	r3, [r3, #20]
 8011408:	429a      	cmp	r2, r3
 801140a:	d101      	bne.n	8011410 <udp_input_local_match+0xa8>
        return 1;
 801140c:	2301      	movs	r3, #1
 801140e:	e000      	b.n	8011412 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011410:	2300      	movs	r3, #0
}
 8011412:	4618      	mov	r0, r3
 8011414:	3710      	adds	r7, #16
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	08017db4 	.word	0x08017db4
 8011420:	08017de4 	.word	0x08017de4
 8011424:	08017e08 	.word	0x08017e08
 8011428:	08017e30 	.word	0x08017e30
 801142c:	200075a8 	.word	0x200075a8

08011430 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011430:	b590      	push	{r4, r7, lr}
 8011432:	b08d      	sub	sp, #52	; 0x34
 8011434:	af02      	add	r7, sp, #8
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801143a:	2300      	movs	r3, #0
 801143c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d105      	bne.n	8011450 <udp_input+0x20>
 8011444:	4b7c      	ldr	r3, [pc, #496]	; (8011638 <udp_input+0x208>)
 8011446:	22cf      	movs	r2, #207	; 0xcf
 8011448:	497c      	ldr	r1, [pc, #496]	; (801163c <udp_input+0x20c>)
 801144a:	487d      	ldr	r0, [pc, #500]	; (8011640 <udp_input+0x210>)
 801144c:	f002 ff24 	bl	8014298 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d105      	bne.n	8011462 <udp_input+0x32>
 8011456:	4b78      	ldr	r3, [pc, #480]	; (8011638 <udp_input+0x208>)
 8011458:	22d0      	movs	r2, #208	; 0xd0
 801145a:	497a      	ldr	r1, [pc, #488]	; (8011644 <udp_input+0x214>)
 801145c:	4878      	ldr	r0, [pc, #480]	; (8011640 <udp_input+0x210>)
 801145e:	f002 ff1b 	bl	8014298 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	895b      	ldrh	r3, [r3, #10]
 8011466:	2b07      	cmp	r3, #7
 8011468:	d803      	bhi.n	8011472 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f7f9 fa9c 	bl	800a9a8 <pbuf_free>
    goto end;
 8011470:	e0de      	b.n	8011630 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011478:	4b73      	ldr	r3, [pc, #460]	; (8011648 <udp_input+0x218>)
 801147a:	695a      	ldr	r2, [r3, #20]
 801147c:	4b72      	ldr	r3, [pc, #456]	; (8011648 <udp_input+0x218>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4619      	mov	r1, r3
 8011482:	4610      	mov	r0, r2
 8011484:	f001 fd94 	bl	8012fb0 <ip4_addr_isbroadcast_u32>
 8011488:	4603      	mov	r3, r0
 801148a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	881b      	ldrh	r3, [r3, #0]
 8011490:	b29b      	uxth	r3, r3
 8011492:	4618      	mov	r0, r3
 8011494:	f7f7 fee0 	bl	8009258 <lwip_htons>
 8011498:	4603      	mov	r3, r0
 801149a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	885b      	ldrh	r3, [r3, #2]
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7f7 fed8 	bl	8009258 <lwip_htons>
 80114a8:	4603      	mov	r3, r0
 80114aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80114ac:	2300      	movs	r3, #0
 80114ae:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80114b0:	2300      	movs	r3, #0
 80114b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80114b4:	2300      	movs	r3, #0
 80114b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80114b8:	4b64      	ldr	r3, [pc, #400]	; (801164c <udp_input+0x21c>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	627b      	str	r3, [r7, #36]	; 0x24
 80114be:	e054      	b.n	801156a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80114c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c2:	8a5b      	ldrh	r3, [r3, #18]
 80114c4:	89fa      	ldrh	r2, [r7, #14]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d14a      	bne.n	8011560 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80114ca:	7cfb      	ldrb	r3, [r7, #19]
 80114cc:	461a      	mov	r2, r3
 80114ce:	6839      	ldr	r1, [r7, #0]
 80114d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114d2:	f7ff ff49 	bl	8011368 <udp_input_local_match>
 80114d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d041      	beq.n	8011560 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80114dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114de:	7c1b      	ldrb	r3, [r3, #16]
 80114e0:	f003 0304 	and.w	r3, r3, #4
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d11d      	bne.n	8011524 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d102      	bne.n	80114f4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80114ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f0:	61fb      	str	r3, [r7, #28]
 80114f2:	e017      	b.n	8011524 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80114f4:	7cfb      	ldrb	r3, [r7, #19]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d014      	beq.n	8011524 <udp_input+0xf4>
 80114fa:	4b53      	ldr	r3, [pc, #332]	; (8011648 <udp_input+0x218>)
 80114fc:	695b      	ldr	r3, [r3, #20]
 80114fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011502:	d10f      	bne.n	8011524 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	681a      	ldr	r2, [r3, #0]
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	3304      	adds	r3, #4
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	429a      	cmp	r2, r3
 8011510:	d008      	beq.n	8011524 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	3304      	adds	r3, #4
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	429a      	cmp	r2, r3
 801151e:	d101      	bne.n	8011524 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011522:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011526:	8a9b      	ldrh	r3, [r3, #20]
 8011528:	8a3a      	ldrh	r2, [r7, #16]
 801152a:	429a      	cmp	r2, r3
 801152c:	d118      	bne.n	8011560 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011530:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011532:	2b00      	cmp	r3, #0
 8011534:	d005      	beq.n	8011542 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011538:	685a      	ldr	r2, [r3, #4]
 801153a:	4b43      	ldr	r3, [pc, #268]	; (8011648 <udp_input+0x218>)
 801153c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801153e:	429a      	cmp	r2, r3
 8011540:	d10e      	bne.n	8011560 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011542:	6a3b      	ldr	r3, [r7, #32]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d014      	beq.n	8011572 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154a:	68da      	ldr	r2, [r3, #12]
 801154c:	6a3b      	ldr	r3, [r7, #32]
 801154e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011550:	4b3e      	ldr	r3, [pc, #248]	; (801164c <udp_input+0x21c>)
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011556:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011558:	4a3c      	ldr	r2, [pc, #240]	; (801164c <udp_input+0x21c>)
 801155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801155e:	e008      	b.n	8011572 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011562:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	627b      	str	r3, [r7, #36]	; 0x24
 801156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156c:	2b00      	cmp	r3, #0
 801156e:	d1a7      	bne.n	80114c0 <udp_input+0x90>
 8011570:	e000      	b.n	8011574 <udp_input+0x144>
        break;
 8011572:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011576:	2b00      	cmp	r3, #0
 8011578:	d101      	bne.n	801157e <udp_input+0x14e>
    pcb = uncon_pcb;
 801157a:	69fb      	ldr	r3, [r7, #28]
 801157c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011580:	2b00      	cmp	r3, #0
 8011582:	d002      	beq.n	801158a <udp_input+0x15a>
    for_us = 1;
 8011584:	2301      	movs	r3, #1
 8011586:	76fb      	strb	r3, [r7, #27]
 8011588:	e00a      	b.n	80115a0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	3304      	adds	r3, #4
 801158e:	681a      	ldr	r2, [r3, #0]
 8011590:	4b2d      	ldr	r3, [pc, #180]	; (8011648 <udp_input+0x218>)
 8011592:	695b      	ldr	r3, [r3, #20]
 8011594:	429a      	cmp	r2, r3
 8011596:	bf0c      	ite	eq
 8011598:	2301      	moveq	r3, #1
 801159a:	2300      	movne	r3, #0
 801159c:	b2db      	uxtb	r3, r3
 801159e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80115a0:	7efb      	ldrb	r3, [r7, #27]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d041      	beq.n	801162a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80115a6:	2108      	movs	r1, #8
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f7f9 f977 	bl	800a89c <pbuf_remove_header>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d00a      	beq.n	80115ca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80115b4:	4b20      	ldr	r3, [pc, #128]	; (8011638 <udp_input+0x208>)
 80115b6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80115ba:	4925      	ldr	r1, [pc, #148]	; (8011650 <udp_input+0x220>)
 80115bc:	4820      	ldr	r0, [pc, #128]	; (8011640 <udp_input+0x210>)
 80115be:	f002 fe6b 	bl	8014298 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7f9 f9f0 	bl	800a9a8 <pbuf_free>
      goto end;
 80115c8:	e032      	b.n	8011630 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80115ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d012      	beq.n	80115f6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80115d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d2:	699b      	ldr	r3, [r3, #24]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d00a      	beq.n	80115ee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80115d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115da:	699c      	ldr	r4, [r3, #24]
 80115dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115de:	69d8      	ldr	r0, [r3, #28]
 80115e0:	8a3b      	ldrh	r3, [r7, #16]
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	4b1b      	ldr	r3, [pc, #108]	; (8011654 <udp_input+0x224>)
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80115ec:	e021      	b.n	8011632 <udp_input+0x202>
        pbuf_free(p);
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f7f9 f9da 	bl	800a9a8 <pbuf_free>
        goto end;
 80115f4:	e01c      	b.n	8011630 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80115f6:	7cfb      	ldrb	r3, [r7, #19]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d112      	bne.n	8011622 <udp_input+0x1f2>
 80115fc:	4b12      	ldr	r3, [pc, #72]	; (8011648 <udp_input+0x218>)
 80115fe:	695b      	ldr	r3, [r3, #20]
 8011600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011604:	2be0      	cmp	r3, #224	; 0xe0
 8011606:	d00c      	beq.n	8011622 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011608:	4b0f      	ldr	r3, [pc, #60]	; (8011648 <udp_input+0x218>)
 801160a:	899b      	ldrh	r3, [r3, #12]
 801160c:	3308      	adds	r3, #8
 801160e:	b29b      	uxth	r3, r3
 8011610:	b21b      	sxth	r3, r3
 8011612:	4619      	mov	r1, r3
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f7f9 f9b4 	bl	800a982 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801161a:	2103      	movs	r1, #3
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f001 f9a9 	bl	8012974 <icmp_dest_unreach>
      pbuf_free(p);
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f7f9 f9c0 	bl	800a9a8 <pbuf_free>
  return;
 8011628:	e003      	b.n	8011632 <udp_input+0x202>
    pbuf_free(p);
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f7f9 f9bc 	bl	800a9a8 <pbuf_free>
  return;
 8011630:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011632:	372c      	adds	r7, #44	; 0x2c
 8011634:	46bd      	mov	sp, r7
 8011636:	bd90      	pop	{r4, r7, pc}
 8011638:	08017db4 	.word	0x08017db4
 801163c:	08017e58 	.word	0x08017e58
 8011640:	08017e08 	.word	0x08017e08
 8011644:	08017e70 	.word	0x08017e70
 8011648:	200075a8 	.word	0x200075a8
 801164c:	2000acd4 	.word	0x2000acd4
 8011650:	08017e8c 	.word	0x08017e8c
 8011654:	200075b8 	.word	0x200075b8

08011658 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b086      	sub	sp, #24
 801165c:	af00      	add	r7, sp, #0
 801165e:	60f8      	str	r0, [r7, #12]
 8011660:	60b9      	str	r1, [r7, #8]
 8011662:	4613      	mov	r3, r2
 8011664:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d101      	bne.n	8011670 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801166c:	4b39      	ldr	r3, [pc, #228]	; (8011754 <udp_bind+0xfc>)
 801166e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d109      	bne.n	801168a <udp_bind+0x32>
 8011676:	4b38      	ldr	r3, [pc, #224]	; (8011758 <udp_bind+0x100>)
 8011678:	f240 32b7 	movw	r2, #951	; 0x3b7
 801167c:	4937      	ldr	r1, [pc, #220]	; (801175c <udp_bind+0x104>)
 801167e:	4838      	ldr	r0, [pc, #224]	; (8011760 <udp_bind+0x108>)
 8011680:	f002 fe0a 	bl	8014298 <iprintf>
 8011684:	f06f 030f 	mvn.w	r3, #15
 8011688:	e060      	b.n	801174c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801168a:	2300      	movs	r3, #0
 801168c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801168e:	4b35      	ldr	r3, [pc, #212]	; (8011764 <udp_bind+0x10c>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	617b      	str	r3, [r7, #20]
 8011694:	e009      	b.n	80116aa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011696:	68fa      	ldr	r2, [r7, #12]
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	429a      	cmp	r2, r3
 801169c:	d102      	bne.n	80116a4 <udp_bind+0x4c>
      rebind = 1;
 801169e:	2301      	movs	r3, #1
 80116a0:	74fb      	strb	r3, [r7, #19]
      break;
 80116a2:	e005      	b.n	80116b0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	617b      	str	r3, [r7, #20]
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d1f2      	bne.n	8011696 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80116b0:	88fb      	ldrh	r3, [r7, #6]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d109      	bne.n	80116ca <udp_bind+0x72>
    port = udp_new_port();
 80116b6:	f7ff fe1f 	bl	80112f8 <udp_new_port>
 80116ba:	4603      	mov	r3, r0
 80116bc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80116be:	88fb      	ldrh	r3, [r7, #6]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d12c      	bne.n	801171e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80116c4:	f06f 0307 	mvn.w	r3, #7
 80116c8:	e040      	b.n	801174c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80116ca:	4b26      	ldr	r3, [pc, #152]	; (8011764 <udp_bind+0x10c>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	617b      	str	r3, [r7, #20]
 80116d0:	e022      	b.n	8011718 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	429a      	cmp	r2, r3
 80116d8:	d01b      	beq.n	8011712 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	8a5b      	ldrh	r3, [r3, #18]
 80116de:	88fa      	ldrh	r2, [r7, #6]
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d116      	bne.n	8011712 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d00d      	beq.n	801170c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00a      	beq.n	801170c <udp_bind+0xb4>
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d006      	beq.n	801170c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80116fe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011700:	2b00      	cmp	r3, #0
 8011702:	d003      	beq.n	801170c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d102      	bne.n	8011712 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801170c:	f06f 0307 	mvn.w	r3, #7
 8011710:	e01c      	b.n	801174c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	68db      	ldr	r3, [r3, #12]
 8011716:	617b      	str	r3, [r7, #20]
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d1d9      	bne.n	80116d2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d002      	beq.n	801172a <udp_bind+0xd2>
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	e000      	b.n	801172c <udp_bind+0xd4>
 801172a:	2300      	movs	r3, #0
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	88fa      	ldrh	r2, [r7, #6]
 8011734:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011736:	7cfb      	ldrb	r3, [r7, #19]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d106      	bne.n	801174a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801173c:	4b09      	ldr	r3, [pc, #36]	; (8011764 <udp_bind+0x10c>)
 801173e:	681a      	ldr	r2, [r3, #0]
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011744:	4a07      	ldr	r2, [pc, #28]	; (8011764 <udp_bind+0x10c>)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801174a:	2300      	movs	r3, #0
}
 801174c:	4618      	mov	r0, r3
 801174e:	3718      	adds	r7, #24
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}
 8011754:	08018908 	.word	0x08018908
 8011758:	08017db4 	.word	0x08017db4
 801175c:	0801807c 	.word	0x0801807c
 8011760:	08017e08 	.word	0x08017e08
 8011764:	2000acd4 	.word	0x2000acd4

08011768 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	60f8      	str	r0, [r7, #12]
 8011770:	60b9      	str	r1, [r7, #8]
 8011772:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d107      	bne.n	801178a <udp_recv+0x22>
 801177a:	4b08      	ldr	r3, [pc, #32]	; (801179c <udp_recv+0x34>)
 801177c:	f240 428a 	movw	r2, #1162	; 0x48a
 8011780:	4907      	ldr	r1, [pc, #28]	; (80117a0 <udp_recv+0x38>)
 8011782:	4808      	ldr	r0, [pc, #32]	; (80117a4 <udp_recv+0x3c>)
 8011784:	f002 fd88 	bl	8014298 <iprintf>
 8011788:	e005      	b.n	8011796 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	68ba      	ldr	r2, [r7, #8]
 801178e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	687a      	ldr	r2, [r7, #4]
 8011794:	61da      	str	r2, [r3, #28]
}
 8011796:	3710      	adds	r7, #16
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}
 801179c:	08017db4 	.word	0x08017db4
 80117a0:	080180e8 	.word	0x080180e8
 80117a4:	08017e08 	.word	0x08017e08

080117a8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b084      	sub	sp, #16
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d107      	bne.n	80117c6 <udp_remove+0x1e>
 80117b6:	4b19      	ldr	r3, [pc, #100]	; (801181c <udp_remove+0x74>)
 80117b8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80117bc:	4918      	ldr	r1, [pc, #96]	; (8011820 <udp_remove+0x78>)
 80117be:	4819      	ldr	r0, [pc, #100]	; (8011824 <udp_remove+0x7c>)
 80117c0:	f002 fd6a 	bl	8014298 <iprintf>
 80117c4:	e026      	b.n	8011814 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80117c6:	4b18      	ldr	r3, [pc, #96]	; (8011828 <udp_remove+0x80>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d105      	bne.n	80117dc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80117d0:	4b15      	ldr	r3, [pc, #84]	; (8011828 <udp_remove+0x80>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	68db      	ldr	r3, [r3, #12]
 80117d6:	4a14      	ldr	r2, [pc, #80]	; (8011828 <udp_remove+0x80>)
 80117d8:	6013      	str	r3, [r2, #0]
 80117da:	e017      	b.n	801180c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80117dc:	4b12      	ldr	r3, [pc, #72]	; (8011828 <udp_remove+0x80>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	60fb      	str	r3, [r7, #12]
 80117e2:	e010      	b.n	8011806 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d009      	beq.n	8011800 <udp_remove+0x58>
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	687a      	ldr	r2, [r7, #4]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d104      	bne.n	8011800 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	68da      	ldr	r2, [r3, #12]
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	60da      	str	r2, [r3, #12]
        break;
 80117fe:	e005      	b.n	801180c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	68db      	ldr	r3, [r3, #12]
 8011804:	60fb      	str	r3, [r7, #12]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d1eb      	bne.n	80117e4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801180c:	6879      	ldr	r1, [r7, #4]
 801180e:	2000      	movs	r0, #0
 8011810:	f7f8 fa2a 	bl	8009c68 <memp_free>
}
 8011814:	3710      	adds	r7, #16
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	08017db4 	.word	0x08017db4
 8011820:	08018100 	.word	0x08018100
 8011824:	08017e08 	.word	0x08017e08
 8011828:	2000acd4 	.word	0x2000acd4

0801182c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011832:	2000      	movs	r0, #0
 8011834:	f7f8 f9c6 	bl	8009bc4 <memp_malloc>
 8011838:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d007      	beq.n	8011850 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011840:	2220      	movs	r2, #32
 8011842:	2100      	movs	r1, #0
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f002 fd1f 	bl	8014288 <memset>
    pcb->ttl = UDP_TTL;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	22ff      	movs	r2, #255	; 0xff
 801184e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011850:	687b      	ldr	r3, [r7, #4]
}
 8011852:	4618      	mov	r0, r3
 8011854:	3708      	adds	r7, #8
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}

0801185a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801185a:	b580      	push	{r7, lr}
 801185c:	b084      	sub	sp, #16
 801185e:	af00      	add	r7, sp, #0
 8011860:	4603      	mov	r3, r0
 8011862:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8011864:	f7ff ffe2 	bl	801182c <udp_new>
 8011868:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801186a:	68fb      	ldr	r3, [r7, #12]
}
 801186c:	4618      	mov	r0, r3
 801186e:	3710      	adds	r7, #16
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011874:	b480      	push	{r7}
 8011876:	b085      	sub	sp, #20
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d01e      	beq.n	80118c2 <udp_netif_ip_addr_changed+0x4e>
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d01a      	beq.n	80118c2 <udp_netif_ip_addr_changed+0x4e>
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d017      	beq.n	80118c2 <udp_netif_ip_addr_changed+0x4e>
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d013      	beq.n	80118c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801189a:	4b0d      	ldr	r3, [pc, #52]	; (80118d0 <udp_netif_ip_addr_changed+0x5c>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	60fb      	str	r3, [r7, #12]
 80118a0:	e00c      	b.n	80118bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d103      	bne.n	80118b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	68db      	ldr	r3, [r3, #12]
 80118ba:	60fb      	str	r3, [r7, #12]
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d1ef      	bne.n	80118a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80118c2:	bf00      	nop
 80118c4:	3714      	adds	r7, #20
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop
 80118d0:	2000acd4 	.word	0x2000acd4

080118d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80118dc:	4915      	ldr	r1, [pc, #84]	; (8011934 <etharp_free_entry+0x60>)
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	4613      	mov	r3, r2
 80118e2:	005b      	lsls	r3, r3, #1
 80118e4:	4413      	add	r3, r2
 80118e6:	00db      	lsls	r3, r3, #3
 80118e8:	440b      	add	r3, r1
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d013      	beq.n	8011918 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80118f0:	4910      	ldr	r1, [pc, #64]	; (8011934 <etharp_free_entry+0x60>)
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	4613      	mov	r3, r2
 80118f6:	005b      	lsls	r3, r3, #1
 80118f8:	4413      	add	r3, r2
 80118fa:	00db      	lsls	r3, r3, #3
 80118fc:	440b      	add	r3, r1
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	4618      	mov	r0, r3
 8011902:	f7f9 f851 	bl	800a9a8 <pbuf_free>
    arp_table[i].q = NULL;
 8011906:	490b      	ldr	r1, [pc, #44]	; (8011934 <etharp_free_entry+0x60>)
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	4613      	mov	r3, r2
 801190c:	005b      	lsls	r3, r3, #1
 801190e:	4413      	add	r3, r2
 8011910:	00db      	lsls	r3, r3, #3
 8011912:	440b      	add	r3, r1
 8011914:	2200      	movs	r2, #0
 8011916:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011918:	4906      	ldr	r1, [pc, #24]	; (8011934 <etharp_free_entry+0x60>)
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	4613      	mov	r3, r2
 801191e:	005b      	lsls	r3, r3, #1
 8011920:	4413      	add	r3, r2
 8011922:	00db      	lsls	r3, r3, #3
 8011924:	440b      	add	r3, r1
 8011926:	3314      	adds	r3, #20
 8011928:	2200      	movs	r2, #0
 801192a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801192c:	bf00      	nop
 801192e:	3708      	adds	r7, #8
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}
 8011934:	200042dc 	.word	0x200042dc

08011938 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801193e:	2300      	movs	r3, #0
 8011940:	607b      	str	r3, [r7, #4]
 8011942:	e096      	b.n	8011a72 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011944:	494f      	ldr	r1, [pc, #316]	; (8011a84 <etharp_tmr+0x14c>)
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	4613      	mov	r3, r2
 801194a:	005b      	lsls	r3, r3, #1
 801194c:	4413      	add	r3, r2
 801194e:	00db      	lsls	r3, r3, #3
 8011950:	440b      	add	r3, r1
 8011952:	3314      	adds	r3, #20
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011958:	78fb      	ldrb	r3, [r7, #3]
 801195a:	2b00      	cmp	r3, #0
 801195c:	f000 8086 	beq.w	8011a6c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011960:	4948      	ldr	r1, [pc, #288]	; (8011a84 <etharp_tmr+0x14c>)
 8011962:	687a      	ldr	r2, [r7, #4]
 8011964:	4613      	mov	r3, r2
 8011966:	005b      	lsls	r3, r3, #1
 8011968:	4413      	add	r3, r2
 801196a:	00db      	lsls	r3, r3, #3
 801196c:	440b      	add	r3, r1
 801196e:	3312      	adds	r3, #18
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	3301      	adds	r3, #1
 8011974:	b298      	uxth	r0, r3
 8011976:	4943      	ldr	r1, [pc, #268]	; (8011a84 <etharp_tmr+0x14c>)
 8011978:	687a      	ldr	r2, [r7, #4]
 801197a:	4613      	mov	r3, r2
 801197c:	005b      	lsls	r3, r3, #1
 801197e:	4413      	add	r3, r2
 8011980:	00db      	lsls	r3, r3, #3
 8011982:	440b      	add	r3, r1
 8011984:	3312      	adds	r3, #18
 8011986:	4602      	mov	r2, r0
 8011988:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801198a:	493e      	ldr	r1, [pc, #248]	; (8011a84 <etharp_tmr+0x14c>)
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	4613      	mov	r3, r2
 8011990:	005b      	lsls	r3, r3, #1
 8011992:	4413      	add	r3, r2
 8011994:	00db      	lsls	r3, r3, #3
 8011996:	440b      	add	r3, r1
 8011998:	3312      	adds	r3, #18
 801199a:	881b      	ldrh	r3, [r3, #0]
 801199c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80119a0:	d215      	bcs.n	80119ce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80119a2:	4938      	ldr	r1, [pc, #224]	; (8011a84 <etharp_tmr+0x14c>)
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	4613      	mov	r3, r2
 80119a8:	005b      	lsls	r3, r3, #1
 80119aa:	4413      	add	r3, r2
 80119ac:	00db      	lsls	r3, r3, #3
 80119ae:	440b      	add	r3, r1
 80119b0:	3314      	adds	r3, #20
 80119b2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	d10e      	bne.n	80119d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80119b8:	4932      	ldr	r1, [pc, #200]	; (8011a84 <etharp_tmr+0x14c>)
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	4613      	mov	r3, r2
 80119be:	005b      	lsls	r3, r3, #1
 80119c0:	4413      	add	r3, r2
 80119c2:	00db      	lsls	r3, r3, #3
 80119c4:	440b      	add	r3, r1
 80119c6:	3312      	adds	r3, #18
 80119c8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80119ca:	2b04      	cmp	r3, #4
 80119cc:	d903      	bls.n	80119d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f7ff ff80 	bl	80118d4 <etharp_free_entry>
 80119d4:	e04a      	b.n	8011a6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80119d6:	492b      	ldr	r1, [pc, #172]	; (8011a84 <etharp_tmr+0x14c>)
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	4613      	mov	r3, r2
 80119dc:	005b      	lsls	r3, r3, #1
 80119de:	4413      	add	r3, r2
 80119e0:	00db      	lsls	r3, r3, #3
 80119e2:	440b      	add	r3, r1
 80119e4:	3314      	adds	r3, #20
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	2b03      	cmp	r3, #3
 80119ea:	d10a      	bne.n	8011a02 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80119ec:	4925      	ldr	r1, [pc, #148]	; (8011a84 <etharp_tmr+0x14c>)
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	4613      	mov	r3, r2
 80119f2:	005b      	lsls	r3, r3, #1
 80119f4:	4413      	add	r3, r2
 80119f6:	00db      	lsls	r3, r3, #3
 80119f8:	440b      	add	r3, r1
 80119fa:	3314      	adds	r3, #20
 80119fc:	2204      	movs	r2, #4
 80119fe:	701a      	strb	r2, [r3, #0]
 8011a00:	e034      	b.n	8011a6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011a02:	4920      	ldr	r1, [pc, #128]	; (8011a84 <etharp_tmr+0x14c>)
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	4613      	mov	r3, r2
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	4413      	add	r3, r2
 8011a0c:	00db      	lsls	r3, r3, #3
 8011a0e:	440b      	add	r3, r1
 8011a10:	3314      	adds	r3, #20
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	2b04      	cmp	r3, #4
 8011a16:	d10a      	bne.n	8011a2e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011a18:	491a      	ldr	r1, [pc, #104]	; (8011a84 <etharp_tmr+0x14c>)
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	005b      	lsls	r3, r3, #1
 8011a20:	4413      	add	r3, r2
 8011a22:	00db      	lsls	r3, r3, #3
 8011a24:	440b      	add	r3, r1
 8011a26:	3314      	adds	r3, #20
 8011a28:	2202      	movs	r2, #2
 8011a2a:	701a      	strb	r2, [r3, #0]
 8011a2c:	e01e      	b.n	8011a6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011a2e:	4915      	ldr	r1, [pc, #84]	; (8011a84 <etharp_tmr+0x14c>)
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	4613      	mov	r3, r2
 8011a34:	005b      	lsls	r3, r3, #1
 8011a36:	4413      	add	r3, r2
 8011a38:	00db      	lsls	r3, r3, #3
 8011a3a:	440b      	add	r3, r1
 8011a3c:	3314      	adds	r3, #20
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d113      	bne.n	8011a6c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011a44:	490f      	ldr	r1, [pc, #60]	; (8011a84 <etharp_tmr+0x14c>)
 8011a46:	687a      	ldr	r2, [r7, #4]
 8011a48:	4613      	mov	r3, r2
 8011a4a:	005b      	lsls	r3, r3, #1
 8011a4c:	4413      	add	r3, r2
 8011a4e:	00db      	lsls	r3, r3, #3
 8011a50:	440b      	add	r3, r1
 8011a52:	3308      	adds	r3, #8
 8011a54:	6818      	ldr	r0, [r3, #0]
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	4613      	mov	r3, r2
 8011a5a:	005b      	lsls	r3, r3, #1
 8011a5c:	4413      	add	r3, r2
 8011a5e:	00db      	lsls	r3, r3, #3
 8011a60:	4a08      	ldr	r2, [pc, #32]	; (8011a84 <etharp_tmr+0x14c>)
 8011a62:	4413      	add	r3, r2
 8011a64:	3304      	adds	r3, #4
 8011a66:	4619      	mov	r1, r3
 8011a68:	f000 fe6e 	bl	8012748 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	607b      	str	r3, [r7, #4]
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2b09      	cmp	r3, #9
 8011a76:	f77f af65 	ble.w	8011944 <etharp_tmr+0xc>
      }
    }
  }
}
 8011a7a:	bf00      	nop
 8011a7c:	3708      	adds	r7, #8
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	200042dc 	.word	0x200042dc

08011a88 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b08a      	sub	sp, #40	; 0x28
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	460b      	mov	r3, r1
 8011a92:	607a      	str	r2, [r7, #4]
 8011a94:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011a96:	230a      	movs	r3, #10
 8011a98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011a9a:	230a      	movs	r3, #10
 8011a9c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011a9e:	230a      	movs	r3, #10
 8011aa0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011aa6:	230a      	movs	r3, #10
 8011aa8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	83bb      	strh	r3, [r7, #28]
 8011aae:	2300      	movs	r3, #0
 8011ab0:	837b      	strh	r3, [r7, #26]
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	843b      	strh	r3, [r7, #32]
 8011aba:	e0ae      	b.n	8011c1a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011abc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ac0:	49a6      	ldr	r1, [pc, #664]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	005b      	lsls	r3, r3, #1
 8011ac6:	4413      	add	r3, r2
 8011ac8:	00db      	lsls	r3, r3, #3
 8011aca:	440b      	add	r3, r1
 8011acc:	3314      	adds	r3, #20
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011ad2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011ad6:	2b0a      	cmp	r3, #10
 8011ad8:	d105      	bne.n	8011ae6 <etharp_find_entry+0x5e>
 8011ada:	7dfb      	ldrb	r3, [r7, #23]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d102      	bne.n	8011ae6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011ae0:	8c3b      	ldrh	r3, [r7, #32]
 8011ae2:	847b      	strh	r3, [r7, #34]	; 0x22
 8011ae4:	e095      	b.n	8011c12 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011ae6:	7dfb      	ldrb	r3, [r7, #23]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	f000 8092 	beq.w	8011c12 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011aee:	7dfb      	ldrb	r3, [r7, #23]
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d009      	beq.n	8011b08 <etharp_find_entry+0x80>
 8011af4:	7dfb      	ldrb	r3, [r7, #23]
 8011af6:	2b01      	cmp	r3, #1
 8011af8:	d806      	bhi.n	8011b08 <etharp_find_entry+0x80>
 8011afa:	4b99      	ldr	r3, [pc, #612]	; (8011d60 <etharp_find_entry+0x2d8>)
 8011afc:	f44f 7292 	mov.w	r2, #292	; 0x124
 8011b00:	4998      	ldr	r1, [pc, #608]	; (8011d64 <etharp_find_entry+0x2dc>)
 8011b02:	4899      	ldr	r0, [pc, #612]	; (8011d68 <etharp_find_entry+0x2e0>)
 8011b04:	f002 fbc8 	bl	8014298 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d020      	beq.n	8011b50 <etharp_find_entry+0xc8>
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	6819      	ldr	r1, [r3, #0]
 8011b12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b16:	4891      	ldr	r0, [pc, #580]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011b18:	4613      	mov	r3, r2
 8011b1a:	005b      	lsls	r3, r3, #1
 8011b1c:	4413      	add	r3, r2
 8011b1e:	00db      	lsls	r3, r3, #3
 8011b20:	4403      	add	r3, r0
 8011b22:	3304      	adds	r3, #4
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	4299      	cmp	r1, r3
 8011b28:	d112      	bne.n	8011b50 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d00c      	beq.n	8011b4a <etharp_find_entry+0xc2>
 8011b30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b34:	4989      	ldr	r1, [pc, #548]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011b36:	4613      	mov	r3, r2
 8011b38:	005b      	lsls	r3, r3, #1
 8011b3a:	4413      	add	r3, r2
 8011b3c:	00db      	lsls	r3, r3, #3
 8011b3e:	440b      	add	r3, r1
 8011b40:	3308      	adds	r3, #8
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	687a      	ldr	r2, [r7, #4]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d102      	bne.n	8011b50 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011b4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b4e:	e100      	b.n	8011d52 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011b50:	7dfb      	ldrb	r3, [r7, #23]
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d140      	bne.n	8011bd8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011b56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b5a:	4980      	ldr	r1, [pc, #512]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011b5c:	4613      	mov	r3, r2
 8011b5e:	005b      	lsls	r3, r3, #1
 8011b60:	4413      	add	r3, r2
 8011b62:	00db      	lsls	r3, r3, #3
 8011b64:	440b      	add	r3, r1
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d01a      	beq.n	8011ba2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011b6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b70:	497a      	ldr	r1, [pc, #488]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011b72:	4613      	mov	r3, r2
 8011b74:	005b      	lsls	r3, r3, #1
 8011b76:	4413      	add	r3, r2
 8011b78:	00db      	lsls	r3, r3, #3
 8011b7a:	440b      	add	r3, r1
 8011b7c:	3312      	adds	r3, #18
 8011b7e:	881b      	ldrh	r3, [r3, #0]
 8011b80:	8bba      	ldrh	r2, [r7, #28]
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d845      	bhi.n	8011c12 <etharp_find_entry+0x18a>
            old_queue = i;
 8011b86:	8c3b      	ldrh	r3, [r7, #32]
 8011b88:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b8e:	4973      	ldr	r1, [pc, #460]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011b90:	4613      	mov	r3, r2
 8011b92:	005b      	lsls	r3, r3, #1
 8011b94:	4413      	add	r3, r2
 8011b96:	00db      	lsls	r3, r3, #3
 8011b98:	440b      	add	r3, r1
 8011b9a:	3312      	adds	r3, #18
 8011b9c:	881b      	ldrh	r3, [r3, #0]
 8011b9e:	83bb      	strh	r3, [r7, #28]
 8011ba0:	e037      	b.n	8011c12 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011ba2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ba6:	496d      	ldr	r1, [pc, #436]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011ba8:	4613      	mov	r3, r2
 8011baa:	005b      	lsls	r3, r3, #1
 8011bac:	4413      	add	r3, r2
 8011bae:	00db      	lsls	r3, r3, #3
 8011bb0:	440b      	add	r3, r1
 8011bb2:	3312      	adds	r3, #18
 8011bb4:	881b      	ldrh	r3, [r3, #0]
 8011bb6:	8b7a      	ldrh	r2, [r7, #26]
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d82a      	bhi.n	8011c12 <etharp_find_entry+0x18a>
            old_pending = i;
 8011bbc:	8c3b      	ldrh	r3, [r7, #32]
 8011bbe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011bc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bc4:	4965      	ldr	r1, [pc, #404]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011bc6:	4613      	mov	r3, r2
 8011bc8:	005b      	lsls	r3, r3, #1
 8011bca:	4413      	add	r3, r2
 8011bcc:	00db      	lsls	r3, r3, #3
 8011bce:	440b      	add	r3, r1
 8011bd0:	3312      	adds	r3, #18
 8011bd2:	881b      	ldrh	r3, [r3, #0]
 8011bd4:	837b      	strh	r3, [r7, #26]
 8011bd6:	e01c      	b.n	8011c12 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011bd8:	7dfb      	ldrb	r3, [r7, #23]
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d919      	bls.n	8011c12 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011bde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011be2:	495e      	ldr	r1, [pc, #376]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011be4:	4613      	mov	r3, r2
 8011be6:	005b      	lsls	r3, r3, #1
 8011be8:	4413      	add	r3, r2
 8011bea:	00db      	lsls	r3, r3, #3
 8011bec:	440b      	add	r3, r1
 8011bee:	3312      	adds	r3, #18
 8011bf0:	881b      	ldrh	r3, [r3, #0]
 8011bf2:	8b3a      	ldrh	r2, [r7, #24]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d80c      	bhi.n	8011c12 <etharp_find_entry+0x18a>
            old_stable = i;
 8011bf8:	8c3b      	ldrh	r3, [r7, #32]
 8011bfa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011bfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c00:	4956      	ldr	r1, [pc, #344]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011c02:	4613      	mov	r3, r2
 8011c04:	005b      	lsls	r3, r3, #1
 8011c06:	4413      	add	r3, r2
 8011c08:	00db      	lsls	r3, r3, #3
 8011c0a:	440b      	add	r3, r1
 8011c0c:	3312      	adds	r3, #18
 8011c0e:	881b      	ldrh	r3, [r3, #0]
 8011c10:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c12:	8c3b      	ldrh	r3, [r7, #32]
 8011c14:	3301      	adds	r3, #1
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	843b      	strh	r3, [r7, #32]
 8011c1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011c1e:	2b09      	cmp	r3, #9
 8011c20:	f77f af4c 	ble.w	8011abc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011c24:	7afb      	ldrb	r3, [r7, #11]
 8011c26:	f003 0302 	and.w	r3, r3, #2
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d108      	bne.n	8011c40 <etharp_find_entry+0x1b8>
 8011c2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011c32:	2b0a      	cmp	r3, #10
 8011c34:	d107      	bne.n	8011c46 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011c36:	7afb      	ldrb	r3, [r7, #11]
 8011c38:	f003 0301 	and.w	r3, r3, #1
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d102      	bne.n	8011c46 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011c40:	f04f 33ff 	mov.w	r3, #4294967295
 8011c44:	e085      	b.n	8011d52 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011c46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011c4a:	2b09      	cmp	r3, #9
 8011c4c:	dc02      	bgt.n	8011c54 <etharp_find_entry+0x1cc>
    i = empty;
 8011c4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c50:	843b      	strh	r3, [r7, #32]
 8011c52:	e039      	b.n	8011cc8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011c54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011c58:	2b09      	cmp	r3, #9
 8011c5a:	dc14      	bgt.n	8011c86 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c5e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011c60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c64:	493d      	ldr	r1, [pc, #244]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011c66:	4613      	mov	r3, r2
 8011c68:	005b      	lsls	r3, r3, #1
 8011c6a:	4413      	add	r3, r2
 8011c6c:	00db      	lsls	r3, r3, #3
 8011c6e:	440b      	add	r3, r1
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d018      	beq.n	8011ca8 <etharp_find_entry+0x220>
 8011c76:	4b3a      	ldr	r3, [pc, #232]	; (8011d60 <etharp_find_entry+0x2d8>)
 8011c78:	f240 126d 	movw	r2, #365	; 0x16d
 8011c7c:	493b      	ldr	r1, [pc, #236]	; (8011d6c <etharp_find_entry+0x2e4>)
 8011c7e:	483a      	ldr	r0, [pc, #232]	; (8011d68 <etharp_find_entry+0x2e0>)
 8011c80:	f002 fb0a 	bl	8014298 <iprintf>
 8011c84:	e010      	b.n	8011ca8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011c86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011c8a:	2b09      	cmp	r3, #9
 8011c8c:	dc02      	bgt.n	8011c94 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011c8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c90:	843b      	strh	r3, [r7, #32]
 8011c92:	e009      	b.n	8011ca8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011c94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011c98:	2b09      	cmp	r3, #9
 8011c9a:	dc02      	bgt.n	8011ca2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011c9c:	8bfb      	ldrh	r3, [r7, #30]
 8011c9e:	843b      	strh	r3, [r7, #32]
 8011ca0:	e002      	b.n	8011ca8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca6:	e054      	b.n	8011d52 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011ca8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011cac:	2b09      	cmp	r3, #9
 8011cae:	dd06      	ble.n	8011cbe <etharp_find_entry+0x236>
 8011cb0:	4b2b      	ldr	r3, [pc, #172]	; (8011d60 <etharp_find_entry+0x2d8>)
 8011cb2:	f240 127f 	movw	r2, #383	; 0x17f
 8011cb6:	492e      	ldr	r1, [pc, #184]	; (8011d70 <etharp_find_entry+0x2e8>)
 8011cb8:	482b      	ldr	r0, [pc, #172]	; (8011d68 <etharp_find_entry+0x2e0>)
 8011cba:	f002 faed 	bl	8014298 <iprintf>
    etharp_free_entry(i);
 8011cbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7ff fe06 	bl	80118d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011cc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ccc:	2b09      	cmp	r3, #9
 8011cce:	dd06      	ble.n	8011cde <etharp_find_entry+0x256>
 8011cd0:	4b23      	ldr	r3, [pc, #140]	; (8011d60 <etharp_find_entry+0x2d8>)
 8011cd2:	f240 1283 	movw	r2, #387	; 0x183
 8011cd6:	4926      	ldr	r1, [pc, #152]	; (8011d70 <etharp_find_entry+0x2e8>)
 8011cd8:	4823      	ldr	r0, [pc, #140]	; (8011d68 <etharp_find_entry+0x2e0>)
 8011cda:	f002 fadd 	bl	8014298 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011cde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ce2:	491e      	ldr	r1, [pc, #120]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011ce4:	4613      	mov	r3, r2
 8011ce6:	005b      	lsls	r3, r3, #1
 8011ce8:	4413      	add	r3, r2
 8011cea:	00db      	lsls	r3, r3, #3
 8011cec:	440b      	add	r3, r1
 8011cee:	3314      	adds	r3, #20
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d006      	beq.n	8011d04 <etharp_find_entry+0x27c>
 8011cf6:	4b1a      	ldr	r3, [pc, #104]	; (8011d60 <etharp_find_entry+0x2d8>)
 8011cf8:	f240 1285 	movw	r2, #389	; 0x185
 8011cfc:	491d      	ldr	r1, [pc, #116]	; (8011d74 <etharp_find_entry+0x2ec>)
 8011cfe:	481a      	ldr	r0, [pc, #104]	; (8011d68 <etharp_find_entry+0x2e0>)
 8011d00:	f002 faca 	bl	8014298 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d00b      	beq.n	8011d22 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011d0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	6819      	ldr	r1, [r3, #0]
 8011d12:	4812      	ldr	r0, [pc, #72]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011d14:	4613      	mov	r3, r2
 8011d16:	005b      	lsls	r3, r3, #1
 8011d18:	4413      	add	r3, r2
 8011d1a:	00db      	lsls	r3, r3, #3
 8011d1c:	4403      	add	r3, r0
 8011d1e:	3304      	adds	r3, #4
 8011d20:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011d22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d26:	490d      	ldr	r1, [pc, #52]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011d28:	4613      	mov	r3, r2
 8011d2a:	005b      	lsls	r3, r3, #1
 8011d2c:	4413      	add	r3, r2
 8011d2e:	00db      	lsls	r3, r3, #3
 8011d30:	440b      	add	r3, r1
 8011d32:	3312      	adds	r3, #18
 8011d34:	2200      	movs	r2, #0
 8011d36:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011d38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d3c:	4907      	ldr	r1, [pc, #28]	; (8011d5c <etharp_find_entry+0x2d4>)
 8011d3e:	4613      	mov	r3, r2
 8011d40:	005b      	lsls	r3, r3, #1
 8011d42:	4413      	add	r3, r2
 8011d44:	00db      	lsls	r3, r3, #3
 8011d46:	440b      	add	r3, r1
 8011d48:	3308      	adds	r3, #8
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011d4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3728      	adds	r7, #40	; 0x28
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}
 8011d5a:	bf00      	nop
 8011d5c:	200042dc 	.word	0x200042dc
 8011d60:	08018118 	.word	0x08018118
 8011d64:	08018150 	.word	0x08018150
 8011d68:	08018190 	.word	0x08018190
 8011d6c:	080181b8 	.word	0x080181b8
 8011d70:	080181d0 	.word	0x080181d0
 8011d74:	080181e4 	.word	0x080181e4

08011d78 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b088      	sub	sp, #32
 8011d7c:	af02      	add	r7, sp, #8
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	607a      	str	r2, [r7, #4]
 8011d84:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011d8c:	2b06      	cmp	r3, #6
 8011d8e:	d006      	beq.n	8011d9e <etharp_update_arp_entry+0x26>
 8011d90:	4b48      	ldr	r3, [pc, #288]	; (8011eb4 <etharp_update_arp_entry+0x13c>)
 8011d92:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011d96:	4948      	ldr	r1, [pc, #288]	; (8011eb8 <etharp_update_arp_entry+0x140>)
 8011d98:	4848      	ldr	r0, [pc, #288]	; (8011ebc <etharp_update_arp_entry+0x144>)
 8011d9a:	f002 fa7d 	bl	8014298 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d012      	beq.n	8011dca <etharp_update_arp_entry+0x52>
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d00e      	beq.n	8011dca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	68f9      	ldr	r1, [r7, #12]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f001 f8fc 	bl	8012fb0 <ip4_addr_isbroadcast_u32>
 8011db8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d105      	bne.n	8011dca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011dc6:	2be0      	cmp	r3, #224	; 0xe0
 8011dc8:	d102      	bne.n	8011dd0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011dca:	f06f 030f 	mvn.w	r3, #15
 8011dce:	e06c      	b.n	8011eaa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011dd0:	78fb      	ldrb	r3, [r7, #3]
 8011dd2:	68fa      	ldr	r2, [r7, #12]
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	68b8      	ldr	r0, [r7, #8]
 8011dd8:	f7ff fe56 	bl	8011a88 <etharp_find_entry>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011de0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	da02      	bge.n	8011dee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011de8:	8afb      	ldrh	r3, [r7, #22]
 8011dea:	b25b      	sxtb	r3, r3
 8011dec:	e05d      	b.n	8011eaa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011dee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011df2:	4933      	ldr	r1, [pc, #204]	; (8011ec0 <etharp_update_arp_entry+0x148>)
 8011df4:	4613      	mov	r3, r2
 8011df6:	005b      	lsls	r3, r3, #1
 8011df8:	4413      	add	r3, r2
 8011dfa:	00db      	lsls	r3, r3, #3
 8011dfc:	440b      	add	r3, r1
 8011dfe:	3314      	adds	r3, #20
 8011e00:	2202      	movs	r2, #2
 8011e02:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011e04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011e08:	492d      	ldr	r1, [pc, #180]	; (8011ec0 <etharp_update_arp_entry+0x148>)
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	005b      	lsls	r3, r3, #1
 8011e0e:	4413      	add	r3, r2
 8011e10:	00db      	lsls	r3, r3, #3
 8011e12:	440b      	add	r3, r1
 8011e14:	3308      	adds	r3, #8
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011e1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011e1e:	4613      	mov	r3, r2
 8011e20:	005b      	lsls	r3, r3, #1
 8011e22:	4413      	add	r3, r2
 8011e24:	00db      	lsls	r3, r3, #3
 8011e26:	3308      	adds	r3, #8
 8011e28:	4a25      	ldr	r2, [pc, #148]	; (8011ec0 <etharp_update_arp_entry+0x148>)
 8011e2a:	4413      	add	r3, r2
 8011e2c:	3304      	adds	r3, #4
 8011e2e:	2206      	movs	r2, #6
 8011e30:	6879      	ldr	r1, [r7, #4]
 8011e32:	4618      	mov	r0, r3
 8011e34:	f002 fa1d 	bl	8014272 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011e38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011e3c:	4920      	ldr	r1, [pc, #128]	; (8011ec0 <etharp_update_arp_entry+0x148>)
 8011e3e:	4613      	mov	r3, r2
 8011e40:	005b      	lsls	r3, r3, #1
 8011e42:	4413      	add	r3, r2
 8011e44:	00db      	lsls	r3, r3, #3
 8011e46:	440b      	add	r3, r1
 8011e48:	3312      	adds	r3, #18
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011e4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011e52:	491b      	ldr	r1, [pc, #108]	; (8011ec0 <etharp_update_arp_entry+0x148>)
 8011e54:	4613      	mov	r3, r2
 8011e56:	005b      	lsls	r3, r3, #1
 8011e58:	4413      	add	r3, r2
 8011e5a:	00db      	lsls	r3, r3, #3
 8011e5c:	440b      	add	r3, r1
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d021      	beq.n	8011ea8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011e64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011e68:	4915      	ldr	r1, [pc, #84]	; (8011ec0 <etharp_update_arp_entry+0x148>)
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	005b      	lsls	r3, r3, #1
 8011e6e:	4413      	add	r3, r2
 8011e70:	00db      	lsls	r3, r3, #3
 8011e72:	440b      	add	r3, r1
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011e78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011e7c:	4910      	ldr	r1, [pc, #64]	; (8011ec0 <etharp_update_arp_entry+0x148>)
 8011e7e:	4613      	mov	r3, r2
 8011e80:	005b      	lsls	r3, r3, #1
 8011e82:	4413      	add	r3, r2
 8011e84:	00db      	lsls	r3, r3, #3
 8011e86:	440b      	add	r3, r1
 8011e88:	2200      	movs	r2, #0
 8011e8a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6939      	ldr	r1, [r7, #16]
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f001 ff8b 	bl	8013db8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011ea2:	6938      	ldr	r0, [r7, #16]
 8011ea4:	f7f8 fd80 	bl	800a9a8 <pbuf_free>
  }
  return ERR_OK;
 8011ea8:	2300      	movs	r3, #0
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	3718      	adds	r7, #24
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}
 8011eb2:	bf00      	nop
 8011eb4:	08018118 	.word	0x08018118
 8011eb8:	08018210 	.word	0x08018210
 8011ebc:	08018190 	.word	0x08018190
 8011ec0:	200042dc 	.word	0x200042dc

08011ec4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ecc:	2300      	movs	r3, #0
 8011ece:	60fb      	str	r3, [r7, #12]
 8011ed0:	e01e      	b.n	8011f10 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011ed2:	4913      	ldr	r1, [pc, #76]	; (8011f20 <etharp_cleanup_netif+0x5c>)
 8011ed4:	68fa      	ldr	r2, [r7, #12]
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	005b      	lsls	r3, r3, #1
 8011eda:	4413      	add	r3, r2
 8011edc:	00db      	lsls	r3, r3, #3
 8011ede:	440b      	add	r3, r1
 8011ee0:	3314      	adds	r3, #20
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011ee6:	7afb      	ldrb	r3, [r7, #11]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d00e      	beq.n	8011f0a <etharp_cleanup_netif+0x46>
 8011eec:	490c      	ldr	r1, [pc, #48]	; (8011f20 <etharp_cleanup_netif+0x5c>)
 8011eee:	68fa      	ldr	r2, [r7, #12]
 8011ef0:	4613      	mov	r3, r2
 8011ef2:	005b      	lsls	r3, r3, #1
 8011ef4:	4413      	add	r3, r2
 8011ef6:	00db      	lsls	r3, r3, #3
 8011ef8:	440b      	add	r3, r1
 8011efa:	3308      	adds	r3, #8
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	687a      	ldr	r2, [r7, #4]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d102      	bne.n	8011f0a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	f7ff fce5 	bl	80118d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	3301      	adds	r3, #1
 8011f0e:	60fb      	str	r3, [r7, #12]
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	2b09      	cmp	r3, #9
 8011f14:	dddd      	ble.n	8011ed2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011f16:	bf00      	nop
 8011f18:	3710      	adds	r7, #16
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	200042dc 	.word	0x200042dc

08011f24 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011f24:	b5b0      	push	{r4, r5, r7, lr}
 8011f26:	b08a      	sub	sp, #40	; 0x28
 8011f28:	af04      	add	r7, sp, #16
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d107      	bne.n	8011f44 <etharp_input+0x20>
 8011f34:	4b3d      	ldr	r3, [pc, #244]	; (801202c <etharp_input+0x108>)
 8011f36:	f240 228a 	movw	r2, #650	; 0x28a
 8011f3a:	493d      	ldr	r1, [pc, #244]	; (8012030 <etharp_input+0x10c>)
 8011f3c:	483d      	ldr	r0, [pc, #244]	; (8012034 <etharp_input+0x110>)
 8011f3e:	f002 f9ab 	bl	8014298 <iprintf>
 8011f42:	e06f      	b.n	8012024 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f54:	d10c      	bne.n	8011f70 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011f5a:	2b06      	cmp	r3, #6
 8011f5c:	d108      	bne.n	8011f70 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011f62:	2b04      	cmp	r3, #4
 8011f64:	d104      	bne.n	8011f70 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	885b      	ldrh	r3, [r3, #2]
 8011f6a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011f6c:	2b08      	cmp	r3, #8
 8011f6e:	d003      	beq.n	8011f78 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f7f8 fd19 	bl	800a9a8 <pbuf_free>
    return;
 8011f76:	e055      	b.n	8012024 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	330e      	adds	r3, #14
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	3318      	adds	r3, #24
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	3304      	adds	r3, #4
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d102      	bne.n	8011f98 <etharp_input+0x74>
    for_us = 0;
 8011f92:	2300      	movs	r3, #0
 8011f94:	75fb      	strb	r3, [r7, #23]
 8011f96:	e009      	b.n	8011fac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011f98:	68ba      	ldr	r2, [r7, #8]
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	3304      	adds	r3, #4
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	bf0c      	ite	eq
 8011fa4:	2301      	moveq	r3, #1
 8011fa6:	2300      	movne	r3, #0
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	f103 0208 	add.w	r2, r3, #8
 8011fb2:	7dfb      	ldrb	r3, [r7, #23]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d001      	beq.n	8011fbc <etharp_input+0x98>
 8011fb8:	2301      	movs	r3, #1
 8011fba:	e000      	b.n	8011fbe <etharp_input+0x9a>
 8011fbc:	2302      	movs	r3, #2
 8011fbe:	f107 010c 	add.w	r1, r7, #12
 8011fc2:	6838      	ldr	r0, [r7, #0]
 8011fc4:	f7ff fed8 	bl	8011d78 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	88db      	ldrh	r3, [r3, #6]
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011fd2:	d003      	beq.n	8011fdc <etharp_input+0xb8>
 8011fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fd8:	d01e      	beq.n	8012018 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011fda:	e020      	b.n	801201e <etharp_input+0xfa>
      if (for_us) {
 8011fdc:	7dfb      	ldrb	r3, [r7, #23]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d01c      	beq.n	801201c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011ff8:	693a      	ldr	r2, [r7, #16]
 8011ffa:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011ffc:	2102      	movs	r1, #2
 8011ffe:	9103      	str	r1, [sp, #12]
 8012000:	f107 010c 	add.w	r1, r7, #12
 8012004:	9102      	str	r1, [sp, #8]
 8012006:	9201      	str	r2, [sp, #4]
 8012008:	9300      	str	r3, [sp, #0]
 801200a:	462b      	mov	r3, r5
 801200c:	4622      	mov	r2, r4
 801200e:	4601      	mov	r1, r0
 8012010:	6838      	ldr	r0, [r7, #0]
 8012012:	f000 faeb 	bl	80125ec <etharp_raw>
      break;
 8012016:	e001      	b.n	801201c <etharp_input+0xf8>
      break;
 8012018:	bf00      	nop
 801201a:	e000      	b.n	801201e <etharp_input+0xfa>
      break;
 801201c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f7f8 fcc2 	bl	800a9a8 <pbuf_free>
}
 8012024:	3718      	adds	r7, #24
 8012026:	46bd      	mov	sp, r7
 8012028:	bdb0      	pop	{r4, r5, r7, pc}
 801202a:	bf00      	nop
 801202c:	08018118 	.word	0x08018118
 8012030:	08018268 	.word	0x08018268
 8012034:	08018190 	.word	0x08018190

08012038 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b086      	sub	sp, #24
 801203c:	af02      	add	r7, sp, #8
 801203e:	60f8      	str	r0, [r7, #12]
 8012040:	60b9      	str	r1, [r7, #8]
 8012042:	4613      	mov	r3, r2
 8012044:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012046:	79fa      	ldrb	r2, [r7, #7]
 8012048:	4944      	ldr	r1, [pc, #272]	; (801215c <etharp_output_to_arp_index+0x124>)
 801204a:	4613      	mov	r3, r2
 801204c:	005b      	lsls	r3, r3, #1
 801204e:	4413      	add	r3, r2
 8012050:	00db      	lsls	r3, r3, #3
 8012052:	440b      	add	r3, r1
 8012054:	3314      	adds	r3, #20
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	2b01      	cmp	r3, #1
 801205a:	d806      	bhi.n	801206a <etharp_output_to_arp_index+0x32>
 801205c:	4b40      	ldr	r3, [pc, #256]	; (8012160 <etharp_output_to_arp_index+0x128>)
 801205e:	f240 22ef 	movw	r2, #751	; 0x2ef
 8012062:	4940      	ldr	r1, [pc, #256]	; (8012164 <etharp_output_to_arp_index+0x12c>)
 8012064:	4840      	ldr	r0, [pc, #256]	; (8012168 <etharp_output_to_arp_index+0x130>)
 8012066:	f002 f917 	bl	8014298 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801206a:	79fa      	ldrb	r2, [r7, #7]
 801206c:	493b      	ldr	r1, [pc, #236]	; (801215c <etharp_output_to_arp_index+0x124>)
 801206e:	4613      	mov	r3, r2
 8012070:	005b      	lsls	r3, r3, #1
 8012072:	4413      	add	r3, r2
 8012074:	00db      	lsls	r3, r3, #3
 8012076:	440b      	add	r3, r1
 8012078:	3314      	adds	r3, #20
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	2b02      	cmp	r3, #2
 801207e:	d153      	bne.n	8012128 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012080:	79fa      	ldrb	r2, [r7, #7]
 8012082:	4936      	ldr	r1, [pc, #216]	; (801215c <etharp_output_to_arp_index+0x124>)
 8012084:	4613      	mov	r3, r2
 8012086:	005b      	lsls	r3, r3, #1
 8012088:	4413      	add	r3, r2
 801208a:	00db      	lsls	r3, r3, #3
 801208c:	440b      	add	r3, r1
 801208e:	3312      	adds	r3, #18
 8012090:	881b      	ldrh	r3, [r3, #0]
 8012092:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012096:	d919      	bls.n	80120cc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012098:	79fa      	ldrb	r2, [r7, #7]
 801209a:	4613      	mov	r3, r2
 801209c:	005b      	lsls	r3, r3, #1
 801209e:	4413      	add	r3, r2
 80120a0:	00db      	lsls	r3, r3, #3
 80120a2:	4a2e      	ldr	r2, [pc, #184]	; (801215c <etharp_output_to_arp_index+0x124>)
 80120a4:	4413      	add	r3, r2
 80120a6:	3304      	adds	r3, #4
 80120a8:	4619      	mov	r1, r3
 80120aa:	68f8      	ldr	r0, [r7, #12]
 80120ac:	f000 fb4c 	bl	8012748 <etharp_request>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d138      	bne.n	8012128 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80120b6:	79fa      	ldrb	r2, [r7, #7]
 80120b8:	4928      	ldr	r1, [pc, #160]	; (801215c <etharp_output_to_arp_index+0x124>)
 80120ba:	4613      	mov	r3, r2
 80120bc:	005b      	lsls	r3, r3, #1
 80120be:	4413      	add	r3, r2
 80120c0:	00db      	lsls	r3, r3, #3
 80120c2:	440b      	add	r3, r1
 80120c4:	3314      	adds	r3, #20
 80120c6:	2203      	movs	r2, #3
 80120c8:	701a      	strb	r2, [r3, #0]
 80120ca:	e02d      	b.n	8012128 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80120cc:	79fa      	ldrb	r2, [r7, #7]
 80120ce:	4923      	ldr	r1, [pc, #140]	; (801215c <etharp_output_to_arp_index+0x124>)
 80120d0:	4613      	mov	r3, r2
 80120d2:	005b      	lsls	r3, r3, #1
 80120d4:	4413      	add	r3, r2
 80120d6:	00db      	lsls	r3, r3, #3
 80120d8:	440b      	add	r3, r1
 80120da:	3312      	adds	r3, #18
 80120dc:	881b      	ldrh	r3, [r3, #0]
 80120de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80120e2:	d321      	bcc.n	8012128 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80120e4:	79fa      	ldrb	r2, [r7, #7]
 80120e6:	4613      	mov	r3, r2
 80120e8:	005b      	lsls	r3, r3, #1
 80120ea:	4413      	add	r3, r2
 80120ec:	00db      	lsls	r3, r3, #3
 80120ee:	4a1b      	ldr	r2, [pc, #108]	; (801215c <etharp_output_to_arp_index+0x124>)
 80120f0:	4413      	add	r3, r2
 80120f2:	1d19      	adds	r1, r3, #4
 80120f4:	79fa      	ldrb	r2, [r7, #7]
 80120f6:	4613      	mov	r3, r2
 80120f8:	005b      	lsls	r3, r3, #1
 80120fa:	4413      	add	r3, r2
 80120fc:	00db      	lsls	r3, r3, #3
 80120fe:	3308      	adds	r3, #8
 8012100:	4a16      	ldr	r2, [pc, #88]	; (801215c <etharp_output_to_arp_index+0x124>)
 8012102:	4413      	add	r3, r2
 8012104:	3304      	adds	r3, #4
 8012106:	461a      	mov	r2, r3
 8012108:	68f8      	ldr	r0, [r7, #12]
 801210a:	f000 fafb 	bl	8012704 <etharp_request_dst>
 801210e:	4603      	mov	r3, r0
 8012110:	2b00      	cmp	r3, #0
 8012112:	d109      	bne.n	8012128 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012114:	79fa      	ldrb	r2, [r7, #7]
 8012116:	4911      	ldr	r1, [pc, #68]	; (801215c <etharp_output_to_arp_index+0x124>)
 8012118:	4613      	mov	r3, r2
 801211a:	005b      	lsls	r3, r3, #1
 801211c:	4413      	add	r3, r2
 801211e:	00db      	lsls	r3, r3, #3
 8012120:	440b      	add	r3, r1
 8012122:	3314      	adds	r3, #20
 8012124:	2203      	movs	r2, #3
 8012126:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801212e:	79fa      	ldrb	r2, [r7, #7]
 8012130:	4613      	mov	r3, r2
 8012132:	005b      	lsls	r3, r3, #1
 8012134:	4413      	add	r3, r2
 8012136:	00db      	lsls	r3, r3, #3
 8012138:	3308      	adds	r3, #8
 801213a:	4a08      	ldr	r2, [pc, #32]	; (801215c <etharp_output_to_arp_index+0x124>)
 801213c:	4413      	add	r3, r2
 801213e:	1d1a      	adds	r2, r3, #4
 8012140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012144:	9300      	str	r3, [sp, #0]
 8012146:	4613      	mov	r3, r2
 8012148:	460a      	mov	r2, r1
 801214a:	68b9      	ldr	r1, [r7, #8]
 801214c:	68f8      	ldr	r0, [r7, #12]
 801214e:	f001 fe33 	bl	8013db8 <ethernet_output>
 8012152:	4603      	mov	r3, r0
}
 8012154:	4618      	mov	r0, r3
 8012156:	3710      	adds	r7, #16
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	200042dc 	.word	0x200042dc
 8012160:	08018118 	.word	0x08018118
 8012164:	08018288 	.word	0x08018288
 8012168:	08018190 	.word	0x08018190

0801216c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b08a      	sub	sp, #40	; 0x28
 8012170:	af02      	add	r7, sp, #8
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d106      	bne.n	8012190 <etharp_output+0x24>
 8012182:	4b73      	ldr	r3, [pc, #460]	; (8012350 <etharp_output+0x1e4>)
 8012184:	f240 321e 	movw	r2, #798	; 0x31e
 8012188:	4972      	ldr	r1, [pc, #456]	; (8012354 <etharp_output+0x1e8>)
 801218a:	4873      	ldr	r0, [pc, #460]	; (8012358 <etharp_output+0x1ec>)
 801218c:	f002 f884 	bl	8014298 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d106      	bne.n	80121a4 <etharp_output+0x38>
 8012196:	4b6e      	ldr	r3, [pc, #440]	; (8012350 <etharp_output+0x1e4>)
 8012198:	f240 321f 	movw	r2, #799	; 0x31f
 801219c:	496f      	ldr	r1, [pc, #444]	; (801235c <etharp_output+0x1f0>)
 801219e:	486e      	ldr	r0, [pc, #440]	; (8012358 <etharp_output+0x1ec>)
 80121a0:	f002 f87a 	bl	8014298 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d106      	bne.n	80121b8 <etharp_output+0x4c>
 80121aa:	4b69      	ldr	r3, [pc, #420]	; (8012350 <etharp_output+0x1e4>)
 80121ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80121b0:	496b      	ldr	r1, [pc, #428]	; (8012360 <etharp_output+0x1f4>)
 80121b2:	4869      	ldr	r0, [pc, #420]	; (8012358 <etharp_output+0x1ec>)
 80121b4:	f002 f870 	bl	8014298 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	68f9      	ldr	r1, [r7, #12]
 80121be:	4618      	mov	r0, r3
 80121c0:	f000 fef6 	bl	8012fb0 <ip4_addr_isbroadcast_u32>
 80121c4:	4603      	mov	r3, r0
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d002      	beq.n	80121d0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80121ca:	4b66      	ldr	r3, [pc, #408]	; (8012364 <etharp_output+0x1f8>)
 80121cc:	61fb      	str	r3, [r7, #28]
 80121ce:	e0af      	b.n	8012330 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80121d8:	2be0      	cmp	r3, #224	; 0xe0
 80121da:	d118      	bne.n	801220e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80121dc:	2301      	movs	r3, #1
 80121de:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80121e0:	2300      	movs	r3, #0
 80121e2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80121e4:	235e      	movs	r3, #94	; 0x5e
 80121e6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	3301      	adds	r3, #1
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	3302      	adds	r3, #2
 80121fa:	781b      	ldrb	r3, [r3, #0]
 80121fc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	3303      	adds	r3, #3
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012206:	f107 0310 	add.w	r3, r7, #16
 801220a:	61fb      	str	r3, [r7, #28]
 801220c:	e090      	b.n	8012330 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	3304      	adds	r3, #4
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	405a      	eors	r2, r3
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	3308      	adds	r3, #8
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	4013      	ands	r3, r2
 8012222:	2b00      	cmp	r3, #0
 8012224:	d012      	beq.n	801224c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801222c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012230:	4293      	cmp	r3, r2
 8012232:	d00b      	beq.n	801224c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	330c      	adds	r3, #12
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d003      	beq.n	8012246 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	330c      	adds	r3, #12
 8012242:	61bb      	str	r3, [r7, #24]
 8012244:	e002      	b.n	801224c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012246:	f06f 0303 	mvn.w	r3, #3
 801224a:	e07d      	b.n	8012348 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801224c:	4b46      	ldr	r3, [pc, #280]	; (8012368 <etharp_output+0x1fc>)
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	4619      	mov	r1, r3
 8012252:	4a46      	ldr	r2, [pc, #280]	; (801236c <etharp_output+0x200>)
 8012254:	460b      	mov	r3, r1
 8012256:	005b      	lsls	r3, r3, #1
 8012258:	440b      	add	r3, r1
 801225a:	00db      	lsls	r3, r3, #3
 801225c:	4413      	add	r3, r2
 801225e:	3314      	adds	r3, #20
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	2b01      	cmp	r3, #1
 8012264:	d925      	bls.n	80122b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012266:	4b40      	ldr	r3, [pc, #256]	; (8012368 <etharp_output+0x1fc>)
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	4619      	mov	r1, r3
 801226c:	4a3f      	ldr	r2, [pc, #252]	; (801236c <etharp_output+0x200>)
 801226e:	460b      	mov	r3, r1
 8012270:	005b      	lsls	r3, r3, #1
 8012272:	440b      	add	r3, r1
 8012274:	00db      	lsls	r3, r3, #3
 8012276:	4413      	add	r3, r2
 8012278:	3308      	adds	r3, #8
 801227a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801227c:	68fa      	ldr	r2, [r7, #12]
 801227e:	429a      	cmp	r2, r3
 8012280:	d117      	bne.n	80122b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012282:	69bb      	ldr	r3, [r7, #24]
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	4b38      	ldr	r3, [pc, #224]	; (8012368 <etharp_output+0x1fc>)
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	4618      	mov	r0, r3
 801228c:	4937      	ldr	r1, [pc, #220]	; (801236c <etharp_output+0x200>)
 801228e:	4603      	mov	r3, r0
 8012290:	005b      	lsls	r3, r3, #1
 8012292:	4403      	add	r3, r0
 8012294:	00db      	lsls	r3, r3, #3
 8012296:	440b      	add	r3, r1
 8012298:	3304      	adds	r3, #4
 801229a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801229c:	429a      	cmp	r2, r3
 801229e:	d108      	bne.n	80122b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80122a0:	4b31      	ldr	r3, [pc, #196]	; (8012368 <etharp_output+0x1fc>)
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	461a      	mov	r2, r3
 80122a6:	68b9      	ldr	r1, [r7, #8]
 80122a8:	68f8      	ldr	r0, [r7, #12]
 80122aa:	f7ff fec5 	bl	8012038 <etharp_output_to_arp_index>
 80122ae:	4603      	mov	r3, r0
 80122b0:	e04a      	b.n	8012348 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80122b2:	2300      	movs	r3, #0
 80122b4:	75fb      	strb	r3, [r7, #23]
 80122b6:	e031      	b.n	801231c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80122b8:	7dfa      	ldrb	r2, [r7, #23]
 80122ba:	492c      	ldr	r1, [pc, #176]	; (801236c <etharp_output+0x200>)
 80122bc:	4613      	mov	r3, r2
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	4413      	add	r3, r2
 80122c2:	00db      	lsls	r3, r3, #3
 80122c4:	440b      	add	r3, r1
 80122c6:	3314      	adds	r3, #20
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	d923      	bls.n	8012316 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80122ce:	7dfa      	ldrb	r2, [r7, #23]
 80122d0:	4926      	ldr	r1, [pc, #152]	; (801236c <etharp_output+0x200>)
 80122d2:	4613      	mov	r3, r2
 80122d4:	005b      	lsls	r3, r3, #1
 80122d6:	4413      	add	r3, r2
 80122d8:	00db      	lsls	r3, r3, #3
 80122da:	440b      	add	r3, r1
 80122dc:	3308      	adds	r3, #8
 80122de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80122e0:	68fa      	ldr	r2, [r7, #12]
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d117      	bne.n	8012316 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	6819      	ldr	r1, [r3, #0]
 80122ea:	7dfa      	ldrb	r2, [r7, #23]
 80122ec:	481f      	ldr	r0, [pc, #124]	; (801236c <etharp_output+0x200>)
 80122ee:	4613      	mov	r3, r2
 80122f0:	005b      	lsls	r3, r3, #1
 80122f2:	4413      	add	r3, r2
 80122f4:	00db      	lsls	r3, r3, #3
 80122f6:	4403      	add	r3, r0
 80122f8:	3304      	adds	r3, #4
 80122fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80122fc:	4299      	cmp	r1, r3
 80122fe:	d10a      	bne.n	8012316 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012300:	4a19      	ldr	r2, [pc, #100]	; (8012368 <etharp_output+0x1fc>)
 8012302:	7dfb      	ldrb	r3, [r7, #23]
 8012304:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012306:	7dfb      	ldrb	r3, [r7, #23]
 8012308:	461a      	mov	r2, r3
 801230a:	68b9      	ldr	r1, [r7, #8]
 801230c:	68f8      	ldr	r0, [r7, #12]
 801230e:	f7ff fe93 	bl	8012038 <etharp_output_to_arp_index>
 8012312:	4603      	mov	r3, r0
 8012314:	e018      	b.n	8012348 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012316:	7dfb      	ldrb	r3, [r7, #23]
 8012318:	3301      	adds	r3, #1
 801231a:	75fb      	strb	r3, [r7, #23]
 801231c:	7dfb      	ldrb	r3, [r7, #23]
 801231e:	2b09      	cmp	r3, #9
 8012320:	d9ca      	bls.n	80122b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012322:	68ba      	ldr	r2, [r7, #8]
 8012324:	69b9      	ldr	r1, [r7, #24]
 8012326:	68f8      	ldr	r0, [r7, #12]
 8012328:	f000 f822 	bl	8012370 <etharp_query>
 801232c:	4603      	mov	r3, r0
 801232e:	e00b      	b.n	8012348 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801233a:	9300      	str	r3, [sp, #0]
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	68b9      	ldr	r1, [r7, #8]
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f001 fd39 	bl	8013db8 <ethernet_output>
 8012346:	4603      	mov	r3, r0
}
 8012348:	4618      	mov	r0, r3
 801234a:	3720      	adds	r7, #32
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}
 8012350:	08018118 	.word	0x08018118
 8012354:	08018268 	.word	0x08018268
 8012358:	08018190 	.word	0x08018190
 801235c:	080182b8 	.word	0x080182b8
 8012360:	08018258 	.word	0x08018258
 8012364:	0801890c 	.word	0x0801890c
 8012368:	200043cc 	.word	0x200043cc
 801236c:	200042dc 	.word	0x200042dc

08012370 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b08c      	sub	sp, #48	; 0x30
 8012374:	af02      	add	r7, sp, #8
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	60b9      	str	r1, [r7, #8]
 801237a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	3326      	adds	r3, #38	; 0x26
 8012380:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012382:	23ff      	movs	r3, #255	; 0xff
 8012384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012388:	2300      	movs	r3, #0
 801238a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	68f9      	ldr	r1, [r7, #12]
 8012392:	4618      	mov	r0, r3
 8012394:	f000 fe0c 	bl	8012fb0 <ip4_addr_isbroadcast_u32>
 8012398:	4603      	mov	r3, r0
 801239a:	2b00      	cmp	r3, #0
 801239c:	d10c      	bne.n	80123b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80123a6:	2be0      	cmp	r3, #224	; 0xe0
 80123a8:	d006      	beq.n	80123b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d003      	beq.n	80123b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d102      	bne.n	80123be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80123b8:	f06f 030f 	mvn.w	r3, #15
 80123bc:	e102      	b.n	80125c4 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80123be:	68fa      	ldr	r2, [r7, #12]
 80123c0:	2101      	movs	r1, #1
 80123c2:	68b8      	ldr	r0, [r7, #8]
 80123c4:	f7ff fb60 	bl	8011a88 <etharp_find_entry>
 80123c8:	4603      	mov	r3, r0
 80123ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80123cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	da02      	bge.n	80123da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80123d4:	8a7b      	ldrh	r3, [r7, #18]
 80123d6:	b25b      	sxtb	r3, r3
 80123d8:	e0f4      	b.n	80125c4 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80123da:	8a7b      	ldrh	r3, [r7, #18]
 80123dc:	2b7e      	cmp	r3, #126	; 0x7e
 80123de:	d906      	bls.n	80123ee <etharp_query+0x7e>
 80123e0:	4b7a      	ldr	r3, [pc, #488]	; (80125cc <etharp_query+0x25c>)
 80123e2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80123e6:	497a      	ldr	r1, [pc, #488]	; (80125d0 <etharp_query+0x260>)
 80123e8:	487a      	ldr	r0, [pc, #488]	; (80125d4 <etharp_query+0x264>)
 80123ea:	f001 ff55 	bl	8014298 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80123ee:	8a7b      	ldrh	r3, [r7, #18]
 80123f0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80123f2:	7c7a      	ldrb	r2, [r7, #17]
 80123f4:	4978      	ldr	r1, [pc, #480]	; (80125d8 <etharp_query+0x268>)
 80123f6:	4613      	mov	r3, r2
 80123f8:	005b      	lsls	r3, r3, #1
 80123fa:	4413      	add	r3, r2
 80123fc:	00db      	lsls	r3, r3, #3
 80123fe:	440b      	add	r3, r1
 8012400:	3314      	adds	r3, #20
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d115      	bne.n	8012434 <etharp_query+0xc4>
    is_new_entry = 1;
 8012408:	2301      	movs	r3, #1
 801240a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801240c:	7c7a      	ldrb	r2, [r7, #17]
 801240e:	4972      	ldr	r1, [pc, #456]	; (80125d8 <etharp_query+0x268>)
 8012410:	4613      	mov	r3, r2
 8012412:	005b      	lsls	r3, r3, #1
 8012414:	4413      	add	r3, r2
 8012416:	00db      	lsls	r3, r3, #3
 8012418:	440b      	add	r3, r1
 801241a:	3314      	adds	r3, #20
 801241c:	2201      	movs	r2, #1
 801241e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012420:	7c7a      	ldrb	r2, [r7, #17]
 8012422:	496d      	ldr	r1, [pc, #436]	; (80125d8 <etharp_query+0x268>)
 8012424:	4613      	mov	r3, r2
 8012426:	005b      	lsls	r3, r3, #1
 8012428:	4413      	add	r3, r2
 801242a:	00db      	lsls	r3, r3, #3
 801242c:	440b      	add	r3, r1
 801242e:	3308      	adds	r3, #8
 8012430:	68fa      	ldr	r2, [r7, #12]
 8012432:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012434:	7c7a      	ldrb	r2, [r7, #17]
 8012436:	4968      	ldr	r1, [pc, #416]	; (80125d8 <etharp_query+0x268>)
 8012438:	4613      	mov	r3, r2
 801243a:	005b      	lsls	r3, r3, #1
 801243c:	4413      	add	r3, r2
 801243e:	00db      	lsls	r3, r3, #3
 8012440:	440b      	add	r3, r1
 8012442:	3314      	adds	r3, #20
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	2b01      	cmp	r3, #1
 8012448:	d011      	beq.n	801246e <etharp_query+0xfe>
 801244a:	7c7a      	ldrb	r2, [r7, #17]
 801244c:	4962      	ldr	r1, [pc, #392]	; (80125d8 <etharp_query+0x268>)
 801244e:	4613      	mov	r3, r2
 8012450:	005b      	lsls	r3, r3, #1
 8012452:	4413      	add	r3, r2
 8012454:	00db      	lsls	r3, r3, #3
 8012456:	440b      	add	r3, r1
 8012458:	3314      	adds	r3, #20
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	2b01      	cmp	r3, #1
 801245e:	d806      	bhi.n	801246e <etharp_query+0xfe>
 8012460:	4b5a      	ldr	r3, [pc, #360]	; (80125cc <etharp_query+0x25c>)
 8012462:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012466:	495d      	ldr	r1, [pc, #372]	; (80125dc <etharp_query+0x26c>)
 8012468:	485a      	ldr	r0, [pc, #360]	; (80125d4 <etharp_query+0x264>)
 801246a:	f001 ff15 	bl	8014298 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801246e:	6a3b      	ldr	r3, [r7, #32]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d102      	bne.n	801247a <etharp_query+0x10a>
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d10c      	bne.n	8012494 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801247a:	68b9      	ldr	r1, [r7, #8]
 801247c:	68f8      	ldr	r0, [r7, #12]
 801247e:	f000 f963 	bl	8012748 <etharp_request>
 8012482:	4603      	mov	r3, r0
 8012484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d102      	bne.n	8012494 <etharp_query+0x124>
      return result;
 801248e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012492:	e097      	b.n	80125c4 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d106      	bne.n	80124a8 <etharp_query+0x138>
 801249a:	4b4c      	ldr	r3, [pc, #304]	; (80125cc <etharp_query+0x25c>)
 801249c:	f240 32e1 	movw	r2, #993	; 0x3e1
 80124a0:	494f      	ldr	r1, [pc, #316]	; (80125e0 <etharp_query+0x270>)
 80124a2:	484c      	ldr	r0, [pc, #304]	; (80125d4 <etharp_query+0x264>)
 80124a4:	f001 fef8 	bl	8014298 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80124a8:	7c7a      	ldrb	r2, [r7, #17]
 80124aa:	494b      	ldr	r1, [pc, #300]	; (80125d8 <etharp_query+0x268>)
 80124ac:	4613      	mov	r3, r2
 80124ae:	005b      	lsls	r3, r3, #1
 80124b0:	4413      	add	r3, r2
 80124b2:	00db      	lsls	r3, r3, #3
 80124b4:	440b      	add	r3, r1
 80124b6:	3314      	adds	r3, #20
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d918      	bls.n	80124f0 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80124be:	4a49      	ldr	r2, [pc, #292]	; (80125e4 <etharp_query+0x274>)
 80124c0:	7c7b      	ldrb	r3, [r7, #17]
 80124c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80124c4:	7c7a      	ldrb	r2, [r7, #17]
 80124c6:	4613      	mov	r3, r2
 80124c8:	005b      	lsls	r3, r3, #1
 80124ca:	4413      	add	r3, r2
 80124cc:	00db      	lsls	r3, r3, #3
 80124ce:	3308      	adds	r3, #8
 80124d0:	4a41      	ldr	r2, [pc, #260]	; (80125d8 <etharp_query+0x268>)
 80124d2:	4413      	add	r3, r2
 80124d4:	1d1a      	adds	r2, r3, #4
 80124d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80124da:	9300      	str	r3, [sp, #0]
 80124dc:	4613      	mov	r3, r2
 80124de:	697a      	ldr	r2, [r7, #20]
 80124e0:	6879      	ldr	r1, [r7, #4]
 80124e2:	68f8      	ldr	r0, [r7, #12]
 80124e4:	f001 fc68 	bl	8013db8 <ethernet_output>
 80124e8:	4603      	mov	r3, r0
 80124ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80124ee:	e067      	b.n	80125c0 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80124f0:	7c7a      	ldrb	r2, [r7, #17]
 80124f2:	4939      	ldr	r1, [pc, #228]	; (80125d8 <etharp_query+0x268>)
 80124f4:	4613      	mov	r3, r2
 80124f6:	005b      	lsls	r3, r3, #1
 80124f8:	4413      	add	r3, r2
 80124fa:	00db      	lsls	r3, r3, #3
 80124fc:	440b      	add	r3, r1
 80124fe:	3314      	adds	r3, #20
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	2b01      	cmp	r3, #1
 8012504:	d15c      	bne.n	80125c0 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012506:	2300      	movs	r3, #0
 8012508:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801250e:	e01c      	b.n	801254a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012510:	69fb      	ldr	r3, [r7, #28]
 8012512:	895a      	ldrh	r2, [r3, #10]
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	891b      	ldrh	r3, [r3, #8]
 8012518:	429a      	cmp	r2, r3
 801251a:	d10a      	bne.n	8012532 <etharp_query+0x1c2>
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d006      	beq.n	8012532 <etharp_query+0x1c2>
 8012524:	4b29      	ldr	r3, [pc, #164]	; (80125cc <etharp_query+0x25c>)
 8012526:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801252a:	492f      	ldr	r1, [pc, #188]	; (80125e8 <etharp_query+0x278>)
 801252c:	4829      	ldr	r0, [pc, #164]	; (80125d4 <etharp_query+0x264>)
 801252e:	f001 feb3 	bl	8014298 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012532:	69fb      	ldr	r3, [r7, #28]
 8012534:	7b1b      	ldrb	r3, [r3, #12]
 8012536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801253a:	2b00      	cmp	r3, #0
 801253c:	d002      	beq.n	8012544 <etharp_query+0x1d4>
        copy_needed = 1;
 801253e:	2301      	movs	r3, #1
 8012540:	61bb      	str	r3, [r7, #24]
        break;
 8012542:	e005      	b.n	8012550 <etharp_query+0x1e0>
      }
      p = p->next;
 8012544:	69fb      	ldr	r3, [r7, #28]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	61fb      	str	r3, [r7, #28]
    while (p) {
 801254a:	69fb      	ldr	r3, [r7, #28]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d1df      	bne.n	8012510 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d007      	beq.n	8012566 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	f44f 7120 	mov.w	r1, #640	; 0x280
 801255c:	200e      	movs	r0, #14
 801255e:	f7f8 fc8b 	bl	800ae78 <pbuf_clone>
 8012562:	61f8      	str	r0, [r7, #28]
 8012564:	e004      	b.n	8012570 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801256a:	69f8      	ldr	r0, [r7, #28]
 801256c:	f7f8 fac2 	bl	800aaf4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012570:	69fb      	ldr	r3, [r7, #28]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d021      	beq.n	80125ba <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012576:	7c7a      	ldrb	r2, [r7, #17]
 8012578:	4917      	ldr	r1, [pc, #92]	; (80125d8 <etharp_query+0x268>)
 801257a:	4613      	mov	r3, r2
 801257c:	005b      	lsls	r3, r3, #1
 801257e:	4413      	add	r3, r2
 8012580:	00db      	lsls	r3, r3, #3
 8012582:	440b      	add	r3, r1
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d00a      	beq.n	80125a0 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801258a:	7c7a      	ldrb	r2, [r7, #17]
 801258c:	4912      	ldr	r1, [pc, #72]	; (80125d8 <etharp_query+0x268>)
 801258e:	4613      	mov	r3, r2
 8012590:	005b      	lsls	r3, r3, #1
 8012592:	4413      	add	r3, r2
 8012594:	00db      	lsls	r3, r3, #3
 8012596:	440b      	add	r3, r1
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4618      	mov	r0, r3
 801259c:	f7f8 fa04 	bl	800a9a8 <pbuf_free>
      }
      arp_table[i].q = p;
 80125a0:	7c7a      	ldrb	r2, [r7, #17]
 80125a2:	490d      	ldr	r1, [pc, #52]	; (80125d8 <etharp_query+0x268>)
 80125a4:	4613      	mov	r3, r2
 80125a6:	005b      	lsls	r3, r3, #1
 80125a8:	4413      	add	r3, r2
 80125aa:	00db      	lsls	r3, r3, #3
 80125ac:	440b      	add	r3, r1
 80125ae:	69fa      	ldr	r2, [r7, #28]
 80125b0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80125b2:	2300      	movs	r3, #0
 80125b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125b8:	e002      	b.n	80125c0 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80125ba:	23ff      	movs	r3, #255	; 0xff
 80125bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80125c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3728      	adds	r7, #40	; 0x28
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	08018118 	.word	0x08018118
 80125d0:	080182c4 	.word	0x080182c4
 80125d4:	08018190 	.word	0x08018190
 80125d8:	200042dc 	.word	0x200042dc
 80125dc:	080182d4 	.word	0x080182d4
 80125e0:	080182b8 	.word	0x080182b8
 80125e4:	200043cc 	.word	0x200043cc
 80125e8:	080182fc 	.word	0x080182fc

080125ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b08a      	sub	sp, #40	; 0x28
 80125f0:	af02      	add	r7, sp, #8
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	607a      	str	r2, [r7, #4]
 80125f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80125fa:	2300      	movs	r3, #0
 80125fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d106      	bne.n	8012612 <etharp_raw+0x26>
 8012604:	4b3a      	ldr	r3, [pc, #232]	; (80126f0 <etharp_raw+0x104>)
 8012606:	f240 4257 	movw	r2, #1111	; 0x457
 801260a:	493a      	ldr	r1, [pc, #232]	; (80126f4 <etharp_raw+0x108>)
 801260c:	483a      	ldr	r0, [pc, #232]	; (80126f8 <etharp_raw+0x10c>)
 801260e:	f001 fe43 	bl	8014298 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012612:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012616:	211c      	movs	r1, #28
 8012618:	200e      	movs	r0, #14
 801261a:	f7f7 fee5 	bl	800a3e8 <pbuf_alloc>
 801261e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d102      	bne.n	801262c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012626:	f04f 33ff 	mov.w	r3, #4294967295
 801262a:	e05d      	b.n	80126e8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801262c:	69bb      	ldr	r3, [r7, #24]
 801262e:	895b      	ldrh	r3, [r3, #10]
 8012630:	2b1b      	cmp	r3, #27
 8012632:	d806      	bhi.n	8012642 <etharp_raw+0x56>
 8012634:	4b2e      	ldr	r3, [pc, #184]	; (80126f0 <etharp_raw+0x104>)
 8012636:	f240 4263 	movw	r2, #1123	; 0x463
 801263a:	4930      	ldr	r1, [pc, #192]	; (80126fc <etharp_raw+0x110>)
 801263c:	482e      	ldr	r0, [pc, #184]	; (80126f8 <etharp_raw+0x10c>)
 801263e:	f001 fe2b 	bl	8014298 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012648:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801264a:	4618      	mov	r0, r3
 801264c:	f7f6 fe04 	bl	8009258 <lwip_htons>
 8012650:	4603      	mov	r3, r0
 8012652:	461a      	mov	r2, r3
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801265e:	2b06      	cmp	r3, #6
 8012660:	d006      	beq.n	8012670 <etharp_raw+0x84>
 8012662:	4b23      	ldr	r3, [pc, #140]	; (80126f0 <etharp_raw+0x104>)
 8012664:	f240 426a 	movw	r2, #1130	; 0x46a
 8012668:	4925      	ldr	r1, [pc, #148]	; (8012700 <etharp_raw+0x114>)
 801266a:	4823      	ldr	r0, [pc, #140]	; (80126f8 <etharp_raw+0x10c>)
 801266c:	f001 fe14 	bl	8014298 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	3308      	adds	r3, #8
 8012674:	2206      	movs	r2, #6
 8012676:	6839      	ldr	r1, [r7, #0]
 8012678:	4618      	mov	r0, r3
 801267a:	f001 fdfa 	bl	8014272 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	3312      	adds	r3, #18
 8012682:	2206      	movs	r2, #6
 8012684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012686:	4618      	mov	r0, r3
 8012688:	f001 fdf3 	bl	8014272 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	330e      	adds	r3, #14
 8012690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012692:	6812      	ldr	r2, [r2, #0]
 8012694:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	3318      	adds	r3, #24
 801269a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801269c:	6812      	ldr	r2, [r2, #0]
 801269e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	2200      	movs	r2, #0
 80126a4:	701a      	strb	r2, [r3, #0]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f042 0201 	orr.w	r2, r2, #1
 80126ac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	2200      	movs	r2, #0
 80126b2:	f042 0208 	orr.w	r2, r2, #8
 80126b6:	709a      	strb	r2, [r3, #2]
 80126b8:	2200      	movs	r2, #0
 80126ba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80126bc:	697b      	ldr	r3, [r7, #20]
 80126be:	2206      	movs	r2, #6
 80126c0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	2204      	movs	r2, #4
 80126c6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80126c8:	f640 0306 	movw	r3, #2054	; 0x806
 80126cc:	9300      	str	r3, [sp, #0]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	68ba      	ldr	r2, [r7, #8]
 80126d2:	69b9      	ldr	r1, [r7, #24]
 80126d4:	68f8      	ldr	r0, [r7, #12]
 80126d6:	f001 fb6f 	bl	8013db8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80126da:	69b8      	ldr	r0, [r7, #24]
 80126dc:	f7f8 f964 	bl	800a9a8 <pbuf_free>
  p = NULL;
 80126e0:	2300      	movs	r3, #0
 80126e2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80126e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3720      	adds	r7, #32
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	08018118 	.word	0x08018118
 80126f4:	08018268 	.word	0x08018268
 80126f8:	08018190 	.word	0x08018190
 80126fc:	08018318 	.word	0x08018318
 8012700:	0801834c 	.word	0x0801834c

08012704 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b088      	sub	sp, #32
 8012708:	af04      	add	r7, sp, #16
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012720:	2201      	movs	r2, #1
 8012722:	9203      	str	r2, [sp, #12]
 8012724:	68ba      	ldr	r2, [r7, #8]
 8012726:	9202      	str	r2, [sp, #8]
 8012728:	4a06      	ldr	r2, [pc, #24]	; (8012744 <etharp_request_dst+0x40>)
 801272a:	9201      	str	r2, [sp, #4]
 801272c:	9300      	str	r3, [sp, #0]
 801272e:	4603      	mov	r3, r0
 8012730:	687a      	ldr	r2, [r7, #4]
 8012732:	68f8      	ldr	r0, [r7, #12]
 8012734:	f7ff ff5a 	bl	80125ec <etharp_raw>
 8012738:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801273a:	4618      	mov	r0, r3
 801273c:	3710      	adds	r7, #16
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
 8012742:	bf00      	nop
 8012744:	08018914 	.word	0x08018914

08012748 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012752:	4a05      	ldr	r2, [pc, #20]	; (8012768 <etharp_request+0x20>)
 8012754:	6839      	ldr	r1, [r7, #0]
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f7ff ffd4 	bl	8012704 <etharp_request_dst>
 801275c:	4603      	mov	r3, r0
}
 801275e:	4618      	mov	r0, r3
 8012760:	3708      	adds	r7, #8
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}
 8012766:	bf00      	nop
 8012768:	0801890c 	.word	0x0801890c

0801276c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b08e      	sub	sp, #56	; 0x38
 8012770:	af04      	add	r7, sp, #16
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012776:	4b79      	ldr	r3, [pc, #484]	; (801295c <icmp_input+0x1f0>)
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	f003 030f 	and.w	r3, r3, #15
 8012784:	b2db      	uxtb	r3, r3
 8012786:	009b      	lsls	r3, r3, #2
 8012788:	b2db      	uxtb	r3, r3
 801278a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801278c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801278e:	2b13      	cmp	r3, #19
 8012790:	f240 80cd 	bls.w	801292e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	895b      	ldrh	r3, [r3, #10]
 8012798:	2b03      	cmp	r3, #3
 801279a:	f240 80ca 	bls.w	8012932 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80127a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	f000 80b7 	beq.w	8012920 <icmp_input+0x1b4>
 80127b2:	2b08      	cmp	r3, #8
 80127b4:	f040 80b7 	bne.w	8012926 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80127b8:	4b69      	ldr	r3, [pc, #420]	; (8012960 <icmp_input+0x1f4>)
 80127ba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80127bc:	4b67      	ldr	r3, [pc, #412]	; (801295c <icmp_input+0x1f0>)
 80127be:	695b      	ldr	r3, [r3, #20]
 80127c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80127c4:	2be0      	cmp	r3, #224	; 0xe0
 80127c6:	f000 80bb 	beq.w	8012940 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80127ca:	4b64      	ldr	r3, [pc, #400]	; (801295c <icmp_input+0x1f0>)
 80127cc:	695a      	ldr	r2, [r3, #20]
 80127ce:	4b63      	ldr	r3, [pc, #396]	; (801295c <icmp_input+0x1f0>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	4619      	mov	r1, r3
 80127d4:	4610      	mov	r0, r2
 80127d6:	f000 fbeb 	bl	8012fb0 <ip4_addr_isbroadcast_u32>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	f040 80b1 	bne.w	8012944 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	891b      	ldrh	r3, [r3, #8]
 80127e6:	2b07      	cmp	r3, #7
 80127e8:	f240 80a5 	bls.w	8012936 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80127ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127ee:	330e      	adds	r3, #14
 80127f0:	4619      	mov	r1, r3
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f7f8 f842 	bl	800a87c <pbuf_add_header>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d04b      	beq.n	8012896 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	891a      	ldrh	r2, [r3, #8]
 8012802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012804:	4413      	add	r3, r2
 8012806:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	891b      	ldrh	r3, [r3, #8]
 801280c:	8b7a      	ldrh	r2, [r7, #26]
 801280e:	429a      	cmp	r2, r3
 8012810:	f0c0 809a 	bcc.w	8012948 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012814:	8b7b      	ldrh	r3, [r7, #26]
 8012816:	f44f 7220 	mov.w	r2, #640	; 0x280
 801281a:	4619      	mov	r1, r3
 801281c:	200e      	movs	r0, #14
 801281e:	f7f7 fde3 	bl	800a3e8 <pbuf_alloc>
 8012822:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	2b00      	cmp	r3, #0
 8012828:	f000 8090 	beq.w	801294c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	895b      	ldrh	r3, [r3, #10]
 8012830:	461a      	mov	r2, r3
 8012832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012834:	3308      	adds	r3, #8
 8012836:	429a      	cmp	r2, r3
 8012838:	d203      	bcs.n	8012842 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801283a:	6978      	ldr	r0, [r7, #20]
 801283c:	f7f8 f8b4 	bl	800a9a8 <pbuf_free>
          goto icmperr;
 8012840:	e085      	b.n	801294e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	685b      	ldr	r3, [r3, #4]
 8012846:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801284a:	4618      	mov	r0, r3
 801284c:	f001 fd11 	bl	8014272 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012852:	4619      	mov	r1, r3
 8012854:	6978      	ldr	r0, [r7, #20]
 8012856:	f7f8 f821 	bl	800a89c <pbuf_remove_header>
 801285a:	4603      	mov	r3, r0
 801285c:	2b00      	cmp	r3, #0
 801285e:	d009      	beq.n	8012874 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012860:	4b40      	ldr	r3, [pc, #256]	; (8012964 <icmp_input+0x1f8>)
 8012862:	22b6      	movs	r2, #182	; 0xb6
 8012864:	4940      	ldr	r1, [pc, #256]	; (8012968 <icmp_input+0x1fc>)
 8012866:	4841      	ldr	r0, [pc, #260]	; (801296c <icmp_input+0x200>)
 8012868:	f001 fd16 	bl	8014298 <iprintf>
          pbuf_free(r);
 801286c:	6978      	ldr	r0, [r7, #20]
 801286e:	f7f8 f89b 	bl	800a9a8 <pbuf_free>
          goto icmperr;
 8012872:	e06c      	b.n	801294e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012874:	6879      	ldr	r1, [r7, #4]
 8012876:	6978      	ldr	r0, [r7, #20]
 8012878:	f7f8 f9ba 	bl	800abf0 <pbuf_copy>
 801287c:	4603      	mov	r3, r0
 801287e:	2b00      	cmp	r3, #0
 8012880:	d003      	beq.n	801288a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012882:	6978      	ldr	r0, [r7, #20]
 8012884:	f7f8 f890 	bl	800a9a8 <pbuf_free>
          goto icmperr;
 8012888:	e061      	b.n	801294e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f7f8 f88c 	bl	800a9a8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	607b      	str	r3, [r7, #4]
 8012894:	e00f      	b.n	80128b6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012898:	330e      	adds	r3, #14
 801289a:	4619      	mov	r1, r3
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f7f7 fffd 	bl	800a89c <pbuf_remove_header>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d006      	beq.n	80128b6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80128a8:	4b2e      	ldr	r3, [pc, #184]	; (8012964 <icmp_input+0x1f8>)
 80128aa:	22c7      	movs	r2, #199	; 0xc7
 80128ac:	4930      	ldr	r1, [pc, #192]	; (8012970 <icmp_input+0x204>)
 80128ae:	482f      	ldr	r0, [pc, #188]	; (801296c <icmp_input+0x200>)
 80128b0:	f001 fcf2 	bl	8014298 <iprintf>
          goto icmperr;
 80128b4:	e04b      	b.n	801294e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80128bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128be:	4619      	mov	r1, r3
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7f7 ffdb 	bl	800a87c <pbuf_add_header>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d12b      	bne.n	8012924 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80128d2:	69fb      	ldr	r3, [r7, #28]
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80128da:	4b20      	ldr	r3, [pc, #128]	; (801295c <icmp_input+0x1f0>)
 80128dc:	691a      	ldr	r2, [r3, #16]
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	2200      	movs	r2, #0
 80128e6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80128e8:	693b      	ldr	r3, [r7, #16]
 80128ea:	2200      	movs	r2, #0
 80128ec:	709a      	strb	r2, [r3, #2]
 80128ee:	2200      	movs	r2, #0
 80128f0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	22ff      	movs	r2, #255	; 0xff
 80128f6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2200      	movs	r2, #0
 80128fc:	729a      	strb	r2, [r3, #10]
 80128fe:	2200      	movs	r2, #0
 8012900:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	9302      	str	r3, [sp, #8]
 8012906:	2301      	movs	r3, #1
 8012908:	9301      	str	r3, [sp, #4]
 801290a:	2300      	movs	r3, #0
 801290c:	9300      	str	r3, [sp, #0]
 801290e:	23ff      	movs	r3, #255	; 0xff
 8012910:	2200      	movs	r2, #0
 8012912:	69f9      	ldr	r1, [r7, #28]
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 fa73 	bl	8012e00 <ip4_output_if>
 801291a:	4603      	mov	r3, r0
 801291c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801291e:	e001      	b.n	8012924 <icmp_input+0x1b8>
      break;
 8012920:	bf00      	nop
 8012922:	e000      	b.n	8012926 <icmp_input+0x1ba>
      break;
 8012924:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7f8 f83e 	bl	800a9a8 <pbuf_free>
  return;
 801292c:	e013      	b.n	8012956 <icmp_input+0x1ea>
    goto lenerr;
 801292e:	bf00      	nop
 8012930:	e002      	b.n	8012938 <icmp_input+0x1cc>
    goto lenerr;
 8012932:	bf00      	nop
 8012934:	e000      	b.n	8012938 <icmp_input+0x1cc>
        goto lenerr;
 8012936:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f7f8 f835 	bl	800a9a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801293e:	e00a      	b.n	8012956 <icmp_input+0x1ea>
        goto icmperr;
 8012940:	bf00      	nop
 8012942:	e004      	b.n	801294e <icmp_input+0x1e2>
        goto icmperr;
 8012944:	bf00      	nop
 8012946:	e002      	b.n	801294e <icmp_input+0x1e2>
          goto icmperr;
 8012948:	bf00      	nop
 801294a:	e000      	b.n	801294e <icmp_input+0x1e2>
          goto icmperr;
 801294c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f7f8 f82a 	bl	800a9a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012954:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012956:	3728      	adds	r7, #40	; 0x28
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	200075a8 	.word	0x200075a8
 8012960:	200075bc 	.word	0x200075bc
 8012964:	08018390 	.word	0x08018390
 8012968:	080183c8 	.word	0x080183c8
 801296c:	08018400 	.word	0x08018400
 8012970:	08018428 	.word	0x08018428

08012974 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	460b      	mov	r3, r1
 801297e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012980:	78fb      	ldrb	r3, [r7, #3]
 8012982:	461a      	mov	r2, r3
 8012984:	2103      	movs	r1, #3
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f000 f814 	bl	80129b4 <icmp_send_response>
}
 801298c:	bf00      	nop
 801298e:	3708      	adds	r7, #8
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}

08012994 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b082      	sub	sp, #8
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	460b      	mov	r3, r1
 801299e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80129a0:	78fb      	ldrb	r3, [r7, #3]
 80129a2:	461a      	mov	r2, r3
 80129a4:	210b      	movs	r1, #11
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 f804 	bl	80129b4 <icmp_send_response>
}
 80129ac:	bf00      	nop
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b08c      	sub	sp, #48	; 0x30
 80129b8:	af04      	add	r7, sp, #16
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	460b      	mov	r3, r1
 80129be:	70fb      	strb	r3, [r7, #3]
 80129c0:	4613      	mov	r3, r2
 80129c2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80129c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129c8:	2124      	movs	r1, #36	; 0x24
 80129ca:	2022      	movs	r0, #34	; 0x22
 80129cc:	f7f7 fd0c 	bl	800a3e8 <pbuf_alloc>
 80129d0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80129d2:	69fb      	ldr	r3, [r7, #28]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d04c      	beq.n	8012a72 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	895b      	ldrh	r3, [r3, #10]
 80129dc:	2b23      	cmp	r3, #35	; 0x23
 80129de:	d806      	bhi.n	80129ee <icmp_send_response+0x3a>
 80129e0:	4b26      	ldr	r3, [pc, #152]	; (8012a7c <icmp_send_response+0xc8>)
 80129e2:	f240 1269 	movw	r2, #361	; 0x169
 80129e6:	4926      	ldr	r1, [pc, #152]	; (8012a80 <icmp_send_response+0xcc>)
 80129e8:	4826      	ldr	r0, [pc, #152]	; (8012a84 <icmp_send_response+0xd0>)
 80129ea:	f001 fc55 	bl	8014298 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	685b      	ldr	r3, [r3, #4]
 80129f2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	685b      	ldr	r3, [r3, #4]
 80129f8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	78fa      	ldrb	r2, [r7, #3]
 80129fe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	78ba      	ldrb	r2, [r7, #2]
 8012a04:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	711a      	strb	r2, [r3, #4]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	2200      	movs	r2, #0
 8012a14:	719a      	strb	r2, [r3, #6]
 8012a16:	2200      	movs	r2, #0
 8012a18:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012a1a:	69fb      	ldr	r3, [r7, #28]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	f103 0008 	add.w	r0, r3, #8
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	221c      	movs	r2, #28
 8012a28:	4619      	mov	r1, r3
 8012a2a:	f001 fc22 	bl	8014272 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012a34:	f107 030c 	add.w	r3, r7, #12
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f000 f825 	bl	8012a88 <ip4_route>
 8012a3e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d011      	beq.n	8012a6a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	709a      	strb	r2, [r3, #2]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012a50:	f107 020c 	add.w	r2, r7, #12
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	9302      	str	r3, [sp, #8]
 8012a58:	2301      	movs	r3, #1
 8012a5a:	9301      	str	r3, [sp, #4]
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	9300      	str	r3, [sp, #0]
 8012a60:	23ff      	movs	r3, #255	; 0xff
 8012a62:	2100      	movs	r1, #0
 8012a64:	69f8      	ldr	r0, [r7, #28]
 8012a66:	f000 f9cb 	bl	8012e00 <ip4_output_if>
  }
  pbuf_free(q);
 8012a6a:	69f8      	ldr	r0, [r7, #28]
 8012a6c:	f7f7 ff9c 	bl	800a9a8 <pbuf_free>
 8012a70:	e000      	b.n	8012a74 <icmp_send_response+0xc0>
    return;
 8012a72:	bf00      	nop
}
 8012a74:	3720      	adds	r7, #32
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
 8012a7a:	bf00      	nop
 8012a7c:	08018390 	.word	0x08018390
 8012a80:	0801845c 	.word	0x0801845c
 8012a84:	08018400 	.word	0x08018400

08012a88 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b085      	sub	sp, #20
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012a90:	4b33      	ldr	r3, [pc, #204]	; (8012b60 <ip4_route+0xd8>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	60fb      	str	r3, [r7, #12]
 8012a96:	e036      	b.n	8012b06 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a9e:	f003 0301 	and.w	r3, r3, #1
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d02b      	beq.n	8012b00 <ip4_route+0x78>
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012aae:	089b      	lsrs	r3, r3, #2
 8012ab0:	f003 0301 	and.w	r3, r3, #1
 8012ab4:	b2db      	uxtb	r3, r3
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d022      	beq.n	8012b00 <ip4_route+0x78>
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	3304      	adds	r3, #4
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d01d      	beq.n	8012b00 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681a      	ldr	r2, [r3, #0]
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	3304      	adds	r3, #4
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	405a      	eors	r2, r3
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	3308      	adds	r3, #8
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	4013      	ands	r3, r2
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d101      	bne.n	8012ae0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	e038      	b.n	8012b52 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ae6:	f003 0302 	and.w	r3, r3, #2
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d108      	bne.n	8012b00 <ip4_route+0x78>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	330c      	adds	r3, #12
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d101      	bne.n	8012b00 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	e028      	b.n	8012b52 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	60fb      	str	r3, [r7, #12]
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d1c5      	bne.n	8012a98 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012b0c:	4b15      	ldr	r3, [pc, #84]	; (8012b64 <ip4_route+0xdc>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d01a      	beq.n	8012b4a <ip4_route+0xc2>
 8012b14:	4b13      	ldr	r3, [pc, #76]	; (8012b64 <ip4_route+0xdc>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b1c:	f003 0301 	and.w	r3, r3, #1
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d012      	beq.n	8012b4a <ip4_route+0xc2>
 8012b24:	4b0f      	ldr	r3, [pc, #60]	; (8012b64 <ip4_route+0xdc>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b2c:	f003 0304 	and.w	r3, r3, #4
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d00a      	beq.n	8012b4a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012b34:	4b0b      	ldr	r3, [pc, #44]	; (8012b64 <ip4_route+0xdc>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	3304      	adds	r3, #4
 8012b3a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d004      	beq.n	8012b4a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	2b7f      	cmp	r3, #127	; 0x7f
 8012b48:	d101      	bne.n	8012b4e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	e001      	b.n	8012b52 <ip4_route+0xca>
  }

  return netif_default;
 8012b4e:	4b05      	ldr	r3, [pc, #20]	; (8012b64 <ip4_route+0xdc>)
 8012b50:	681b      	ldr	r3, [r3, #0]
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3714      	adds	r7, #20
 8012b56:	46bd      	mov	sp, r7
 8012b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5c:	4770      	bx	lr
 8012b5e:	bf00      	nop
 8012b60:	2000acac 	.word	0x2000acac
 8012b64:	2000acb0 	.word	0x2000acb0

08012b68 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b76:	f003 0301 	and.w	r3, r3, #1
 8012b7a:	b2db      	uxtb	r3, r3
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d016      	beq.n	8012bae <ip4_input_accept+0x46>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	3304      	adds	r3, #4
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d011      	beq.n	8012bae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012b8a:	4b0b      	ldr	r3, [pc, #44]	; (8012bb8 <ip4_input_accept+0x50>)
 8012b8c:	695a      	ldr	r2, [r3, #20]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	3304      	adds	r3, #4
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d008      	beq.n	8012baa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012b98:	4b07      	ldr	r3, [pc, #28]	; (8012bb8 <ip4_input_accept+0x50>)
 8012b9a:	695b      	ldr	r3, [r3, #20]
 8012b9c:	6879      	ldr	r1, [r7, #4]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f000 fa06 	bl	8012fb0 <ip4_addr_isbroadcast_u32>
 8012ba4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d001      	beq.n	8012bae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012baa:	2301      	movs	r3, #1
 8012bac:	e000      	b.n	8012bb0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012bae:	2300      	movs	r3, #0
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3708      	adds	r7, #8
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	200075a8 	.word	0x200075a8

08012bbc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b086      	sub	sp, #24
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	091b      	lsrs	r3, r3, #4
 8012bd2:	b2db      	uxtb	r3, r3
 8012bd4:	2b04      	cmp	r3, #4
 8012bd6:	d004      	beq.n	8012be2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f7f7 fee5 	bl	800a9a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012bde:	2300      	movs	r3, #0
 8012be0:	e105      	b.n	8012dee <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	f003 030f 	and.w	r3, r3, #15
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	009b      	lsls	r3, r3, #2
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	885b      	ldrh	r3, [r3, #2]
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7f6 fb2d 	bl	8009258 <lwip_htons>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	891b      	ldrh	r3, [r3, #8]
 8012c06:	89ba      	ldrh	r2, [r7, #12]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d204      	bcs.n	8012c16 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012c0c:	89bb      	ldrh	r3, [r7, #12]
 8012c0e:	4619      	mov	r1, r3
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f7f7 fd43 	bl	800a69c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	895b      	ldrh	r3, [r3, #10]
 8012c1a:	89fa      	ldrh	r2, [r7, #14]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d807      	bhi.n	8012c30 <ip4_input+0x74>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	891b      	ldrh	r3, [r3, #8]
 8012c24:	89ba      	ldrh	r2, [r7, #12]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d802      	bhi.n	8012c30 <ip4_input+0x74>
 8012c2a:	89fb      	ldrh	r3, [r7, #14]
 8012c2c:	2b13      	cmp	r3, #19
 8012c2e:	d804      	bhi.n	8012c3a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f7f7 feb9 	bl	800a9a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012c36:	2300      	movs	r3, #0
 8012c38:	e0d9      	b.n	8012dee <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	691b      	ldr	r3, [r3, #16]
 8012c3e:	4a6e      	ldr	r2, [pc, #440]	; (8012df8 <ip4_input+0x23c>)
 8012c40:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	68db      	ldr	r3, [r3, #12]
 8012c46:	4a6c      	ldr	r2, [pc, #432]	; (8012df8 <ip4_input+0x23c>)
 8012c48:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012c4a:	4b6b      	ldr	r3, [pc, #428]	; (8012df8 <ip4_input+0x23c>)
 8012c4c:	695b      	ldr	r3, [r3, #20]
 8012c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c52:	2be0      	cmp	r3, #224	; 0xe0
 8012c54:	d112      	bne.n	8012c7c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c5c:	f003 0301 	and.w	r3, r3, #1
 8012c60:	b2db      	uxtb	r3, r3
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d007      	beq.n	8012c76 <ip4_input+0xba>
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	3304      	adds	r3, #4
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d002      	beq.n	8012c76 <ip4_input+0xba>
      netif = inp;
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	613b      	str	r3, [r7, #16]
 8012c74:	e02a      	b.n	8012ccc <ip4_input+0x110>
    } else {
      netif = NULL;
 8012c76:	2300      	movs	r3, #0
 8012c78:	613b      	str	r3, [r7, #16]
 8012c7a:	e027      	b.n	8012ccc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012c7c:	6838      	ldr	r0, [r7, #0]
 8012c7e:	f7ff ff73 	bl	8012b68 <ip4_input_accept>
 8012c82:	4603      	mov	r3, r0
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d002      	beq.n	8012c8e <ip4_input+0xd2>
      netif = inp;
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	613b      	str	r3, [r7, #16]
 8012c8c:	e01e      	b.n	8012ccc <ip4_input+0x110>
    } else {
      netif = NULL;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012c92:	4b59      	ldr	r3, [pc, #356]	; (8012df8 <ip4_input+0x23c>)
 8012c94:	695b      	ldr	r3, [r3, #20]
 8012c96:	b2db      	uxtb	r3, r3
 8012c98:	2b7f      	cmp	r3, #127	; 0x7f
 8012c9a:	d017      	beq.n	8012ccc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012c9c:	4b57      	ldr	r3, [pc, #348]	; (8012dfc <ip4_input+0x240>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	613b      	str	r3, [r7, #16]
 8012ca2:	e00e      	b.n	8012cc2 <ip4_input+0x106>
          if (netif == inp) {
 8012ca4:	693a      	ldr	r2, [r7, #16]
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d006      	beq.n	8012cba <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012cac:	6938      	ldr	r0, [r7, #16]
 8012cae:	f7ff ff5b 	bl	8012b68 <ip4_input_accept>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d108      	bne.n	8012cca <ip4_input+0x10e>
 8012cb8:	e000      	b.n	8012cbc <ip4_input+0x100>
            continue;
 8012cba:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	613b      	str	r3, [r7, #16]
 8012cc2:	693b      	ldr	r3, [r7, #16]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d1ed      	bne.n	8012ca4 <ip4_input+0xe8>
 8012cc8:	e000      	b.n	8012ccc <ip4_input+0x110>
            break;
 8012cca:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012ccc:	4b4a      	ldr	r3, [pc, #296]	; (8012df8 <ip4_input+0x23c>)
 8012cce:	691b      	ldr	r3, [r3, #16]
 8012cd0:	6839      	ldr	r1, [r7, #0]
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f000 f96c 	bl	8012fb0 <ip4_addr_isbroadcast_u32>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d105      	bne.n	8012cea <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012cde:	4b46      	ldr	r3, [pc, #280]	; (8012df8 <ip4_input+0x23c>)
 8012ce0:	691b      	ldr	r3, [r3, #16]
 8012ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012ce6:	2be0      	cmp	r3, #224	; 0xe0
 8012ce8:	d104      	bne.n	8012cf4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f7f7 fe5c 	bl	800a9a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	e07c      	b.n	8012dee <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012cf4:	693b      	ldr	r3, [r7, #16]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d104      	bne.n	8012d04 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f7f7 fe54 	bl	800a9a8 <pbuf_free>
    return ERR_OK;
 8012d00:	2300      	movs	r3, #0
 8012d02:	e074      	b.n	8012dee <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	88db      	ldrh	r3, [r3, #6]
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012d10:	4013      	ands	r3, r2
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d00b      	beq.n	8012d2e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f000 fc90 	bl	801363c <ip4_reass>
 8012d1c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d101      	bne.n	8012d28 <ip4_input+0x16c>
      return ERR_OK;
 8012d24:	2300      	movs	r3, #0
 8012d26:	e062      	b.n	8012dee <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	685b      	ldr	r3, [r3, #4]
 8012d2c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012d2e:	4a32      	ldr	r2, [pc, #200]	; (8012df8 <ip4_input+0x23c>)
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012d34:	4a30      	ldr	r2, [pc, #192]	; (8012df8 <ip4_input+0x23c>)
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012d3a:	4a2f      	ldr	r2, [pc, #188]	; (8012df8 <ip4_input+0x23c>)
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	f003 030f 	and.w	r3, r3, #15
 8012d48:	b2db      	uxtb	r3, r3
 8012d4a:	009b      	lsls	r3, r3, #2
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	b29a      	uxth	r2, r3
 8012d50:	4b29      	ldr	r3, [pc, #164]	; (8012df8 <ip4_input+0x23c>)
 8012d52:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012d54:	89fb      	ldrh	r3, [r7, #14]
 8012d56:	4619      	mov	r1, r3
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7f7 fd9f 	bl	800a89c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	7a5b      	ldrb	r3, [r3, #9]
 8012d62:	2b06      	cmp	r3, #6
 8012d64:	d009      	beq.n	8012d7a <ip4_input+0x1be>
 8012d66:	2b11      	cmp	r3, #17
 8012d68:	d002      	beq.n	8012d70 <ip4_input+0x1b4>
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d00a      	beq.n	8012d84 <ip4_input+0x1c8>
 8012d6e:	e00e      	b.n	8012d8e <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012d70:	6839      	ldr	r1, [r7, #0]
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f7fe fb5c 	bl	8011430 <udp_input>
        break;
 8012d78:	e026      	b.n	8012dc8 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012d7a:	6839      	ldr	r1, [r7, #0]
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f7f9 ff0b 	bl	800cb98 <tcp_input>
        break;
 8012d82:	e021      	b.n	8012dc8 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012d84:	6839      	ldr	r1, [r7, #0]
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f7ff fcf0 	bl	801276c <icmp_input>
        break;
 8012d8c:	e01c      	b.n	8012dc8 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012d8e:	4b1a      	ldr	r3, [pc, #104]	; (8012df8 <ip4_input+0x23c>)
 8012d90:	695b      	ldr	r3, [r3, #20]
 8012d92:	6939      	ldr	r1, [r7, #16]
 8012d94:	4618      	mov	r0, r3
 8012d96:	f000 f90b 	bl	8012fb0 <ip4_addr_isbroadcast_u32>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d10f      	bne.n	8012dc0 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012da0:	4b15      	ldr	r3, [pc, #84]	; (8012df8 <ip4_input+0x23c>)
 8012da2:	695b      	ldr	r3, [r3, #20]
 8012da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012da8:	2be0      	cmp	r3, #224	; 0xe0
 8012daa:	d009      	beq.n	8012dc0 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012dac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012db0:	4619      	mov	r1, r3
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f7f7 fde5 	bl	800a982 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012db8:	2102      	movs	r1, #2
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f7ff fdda 	bl	8012974 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7f7 fdf1 	bl	800a9a8 <pbuf_free>
        break;
 8012dc6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012dc8:	4b0b      	ldr	r3, [pc, #44]	; (8012df8 <ip4_input+0x23c>)
 8012dca:	2200      	movs	r2, #0
 8012dcc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012dce:	4b0a      	ldr	r3, [pc, #40]	; (8012df8 <ip4_input+0x23c>)
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012dd4:	4b08      	ldr	r3, [pc, #32]	; (8012df8 <ip4_input+0x23c>)
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012dda:	4b07      	ldr	r3, [pc, #28]	; (8012df8 <ip4_input+0x23c>)
 8012ddc:	2200      	movs	r2, #0
 8012dde:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012de0:	4b05      	ldr	r3, [pc, #20]	; (8012df8 <ip4_input+0x23c>)
 8012de2:	2200      	movs	r2, #0
 8012de4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012de6:	4b04      	ldr	r3, [pc, #16]	; (8012df8 <ip4_input+0x23c>)
 8012de8:	2200      	movs	r2, #0
 8012dea:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012dec:	2300      	movs	r3, #0
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3718      	adds	r7, #24
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	200075a8 	.word	0x200075a8
 8012dfc:	2000acac 	.word	0x2000acac

08012e00 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b08a      	sub	sp, #40	; 0x28
 8012e04:	af04      	add	r7, sp, #16
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	607a      	str	r2, [r7, #4]
 8012e0c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d009      	beq.n	8012e2c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d003      	beq.n	8012e26 <ip4_output_if+0x26>
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d102      	bne.n	8012e2c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e28:	3304      	adds	r3, #4
 8012e2a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012e2c:	78fa      	ldrb	r2, [r7, #3]
 8012e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e30:	9302      	str	r3, [sp, #8]
 8012e32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012e36:	9301      	str	r3, [sp, #4]
 8012e38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012e3c:	9300      	str	r3, [sp, #0]
 8012e3e:	4613      	mov	r3, r2
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	6979      	ldr	r1, [r7, #20]
 8012e44:	68f8      	ldr	r0, [r7, #12]
 8012e46:	f000 f805 	bl	8012e54 <ip4_output_if_src>
 8012e4a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3718      	adds	r7, #24
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}

08012e54 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b088      	sub	sp, #32
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	60f8      	str	r0, [r7, #12]
 8012e5c:	60b9      	str	r1, [r7, #8]
 8012e5e:	607a      	str	r2, [r7, #4]
 8012e60:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	7b9b      	ldrb	r3, [r3, #14]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d006      	beq.n	8012e78 <ip4_output_if_src+0x24>
 8012e6a:	4b4b      	ldr	r3, [pc, #300]	; (8012f98 <ip4_output_if_src+0x144>)
 8012e6c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012e70:	494a      	ldr	r1, [pc, #296]	; (8012f9c <ip4_output_if_src+0x148>)
 8012e72:	484b      	ldr	r0, [pc, #300]	; (8012fa0 <ip4_output_if_src+0x14c>)
 8012e74:	f001 fa10 	bl	8014298 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d060      	beq.n	8012f40 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012e7e:	2314      	movs	r3, #20
 8012e80:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012e82:	2114      	movs	r1, #20
 8012e84:	68f8      	ldr	r0, [r7, #12]
 8012e86:	f7f7 fcf9 	bl	800a87c <pbuf_add_header>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d002      	beq.n	8012e96 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012e90:	f06f 0301 	mvn.w	r3, #1
 8012e94:	e07c      	b.n	8012f90 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	895b      	ldrh	r3, [r3, #10]
 8012ea0:	2b13      	cmp	r3, #19
 8012ea2:	d806      	bhi.n	8012eb2 <ip4_output_if_src+0x5e>
 8012ea4:	4b3c      	ldr	r3, [pc, #240]	; (8012f98 <ip4_output_if_src+0x144>)
 8012ea6:	f240 3289 	movw	r2, #905	; 0x389
 8012eaa:	493e      	ldr	r1, [pc, #248]	; (8012fa4 <ip4_output_if_src+0x150>)
 8012eac:	483c      	ldr	r0, [pc, #240]	; (8012fa0 <ip4_output_if_src+0x14c>)
 8012eae:	f001 f9f3 	bl	8014298 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012eb2:	69fb      	ldr	r3, [r7, #28]
 8012eb4:	78fa      	ldrb	r2, [r7, #3]
 8012eb6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012eb8:	69fb      	ldr	r3, [r7, #28]
 8012eba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012ebe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681a      	ldr	r2, [r3, #0]
 8012ec4:	69fb      	ldr	r3, [r7, #28]
 8012ec6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012ec8:	8b7b      	ldrh	r3, [r7, #26]
 8012eca:	089b      	lsrs	r3, r3, #2
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ed4:	b2da      	uxtb	r2, r3
 8012ed6:	69fb      	ldr	r3, [r7, #28]
 8012ed8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012eda:	69fb      	ldr	r3, [r7, #28]
 8012edc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012ee0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	891b      	ldrh	r3, [r3, #8]
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f7f6 f9b6 	bl	8009258 <lwip_htons>
 8012eec:	4603      	mov	r3, r0
 8012eee:	461a      	mov	r2, r3
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012ef4:	69fb      	ldr	r3, [r7, #28]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	719a      	strb	r2, [r3, #6]
 8012efa:	2200      	movs	r2, #0
 8012efc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012efe:	4b2a      	ldr	r3, [pc, #168]	; (8012fa8 <ip4_output_if_src+0x154>)
 8012f00:	881b      	ldrh	r3, [r3, #0]
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7f6 f9a8 	bl	8009258 <lwip_htons>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012f10:	4b25      	ldr	r3, [pc, #148]	; (8012fa8 <ip4_output_if_src+0x154>)
 8012f12:	881b      	ldrh	r3, [r3, #0]
 8012f14:	3301      	adds	r3, #1
 8012f16:	b29a      	uxth	r2, r3
 8012f18:	4b23      	ldr	r3, [pc, #140]	; (8012fa8 <ip4_output_if_src+0x154>)
 8012f1a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d104      	bne.n	8012f2c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012f22:	4b22      	ldr	r3, [pc, #136]	; (8012fac <ip4_output_if_src+0x158>)
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	60da      	str	r2, [r3, #12]
 8012f2a:	e003      	b.n	8012f34 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	2200      	movs	r2, #0
 8012f38:	729a      	strb	r2, [r3, #10]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	72da      	strb	r2, [r3, #11]
 8012f3e:	e00f      	b.n	8012f60 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	895b      	ldrh	r3, [r3, #10]
 8012f44:	2b13      	cmp	r3, #19
 8012f46:	d802      	bhi.n	8012f4e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012f48:	f06f 0301 	mvn.w	r3, #1
 8012f4c:	e020      	b.n	8012f90 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	691b      	ldr	r3, [r3, #16]
 8012f58:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012f5a:	f107 0314 	add.w	r3, r7, #20
 8012f5e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d00c      	beq.n	8012f82 <ip4_output_if_src+0x12e>
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	891a      	ldrh	r2, [r3, #8]
 8012f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d906      	bls.n	8012f82 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012f74:	687a      	ldr	r2, [r7, #4]
 8012f76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f000 fd4b 	bl	8013a14 <ip4_frag>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	e006      	b.n	8012f90 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f84:	695b      	ldr	r3, [r3, #20]
 8012f86:	687a      	ldr	r2, [r7, #4]
 8012f88:	68f9      	ldr	r1, [r7, #12]
 8012f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f8c:	4798      	blx	r3
 8012f8e:	4603      	mov	r3, r0
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3720      	adds	r7, #32
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	08018488 	.word	0x08018488
 8012f9c:	080184bc 	.word	0x080184bc
 8012fa0:	080184c8 	.word	0x080184c8
 8012fa4:	080184f0 	.word	0x080184f0
 8012fa8:	200043ce 	.word	0x200043ce
 8012fac:	08018908 	.word	0x08018908

08012fb0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b085      	sub	sp, #20
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fc4:	d002      	beq.n	8012fcc <ip4_addr_isbroadcast_u32+0x1c>
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d101      	bne.n	8012fd0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012fcc:	2301      	movs	r3, #1
 8012fce:	e02a      	b.n	8013026 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012fd6:	f003 0302 	and.w	r3, r3, #2
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d101      	bne.n	8012fe2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	e021      	b.n	8013026 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	3304      	adds	r3, #4
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	687a      	ldr	r2, [r7, #4]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d101      	bne.n	8012ff2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	e019      	b.n	8013026 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012ff2:	68fa      	ldr	r2, [r7, #12]
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	3304      	adds	r3, #4
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	405a      	eors	r2, r3
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	3308      	adds	r3, #8
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	4013      	ands	r3, r2
 8013004:	2b00      	cmp	r3, #0
 8013006:	d10d      	bne.n	8013024 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	3308      	adds	r3, #8
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	43da      	mvns	r2, r3
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	3308      	adds	r3, #8
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801301c:	429a      	cmp	r2, r3
 801301e:	d101      	bne.n	8013024 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013020:	2301      	movs	r3, #1
 8013022:	e000      	b.n	8013026 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013024:	2300      	movs	r3, #0
  }
}
 8013026:	4618      	mov	r0, r3
 8013028:	3714      	adds	r7, #20
 801302a:	46bd      	mov	sp, r7
 801302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013030:	4770      	bx	lr
	...

08013034 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b084      	sub	sp, #16
 8013038:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801303a:	2300      	movs	r3, #0
 801303c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801303e:	4b12      	ldr	r3, [pc, #72]	; (8013088 <ip_reass_tmr+0x54>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013044:	e018      	b.n	8013078 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	7fdb      	ldrb	r3, [r3, #31]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d00b      	beq.n	8013066 <ip_reass_tmr+0x32>
      r->timer--;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	7fdb      	ldrb	r3, [r3, #31]
 8013052:	3b01      	subs	r3, #1
 8013054:	b2da      	uxtb	r2, r3
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	60fb      	str	r3, [r7, #12]
 8013064:	e008      	b.n	8013078 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013070:	68b9      	ldr	r1, [r7, #8]
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f000 f80a 	bl	801308c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d1e3      	bne.n	8013046 <ip_reass_tmr+0x12>
    }
  }
}
 801307e:	bf00      	nop
 8013080:	3710      	adds	r7, #16
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	200043d0 	.word	0x200043d0

0801308c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b088      	sub	sp, #32
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013096:	2300      	movs	r3, #0
 8013098:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801309a:	683a      	ldr	r2, [r7, #0]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d105      	bne.n	80130ae <ip_reass_free_complete_datagram+0x22>
 80130a2:	4b45      	ldr	r3, [pc, #276]	; (80131b8 <ip_reass_free_complete_datagram+0x12c>)
 80130a4:	22ab      	movs	r2, #171	; 0xab
 80130a6:	4945      	ldr	r1, [pc, #276]	; (80131bc <ip_reass_free_complete_datagram+0x130>)
 80130a8:	4845      	ldr	r0, [pc, #276]	; (80131c0 <ip_reass_free_complete_datagram+0x134>)
 80130aa:	f001 f8f5 	bl	8014298 <iprintf>
  if (prev != NULL) {
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d00a      	beq.n	80130ca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	687a      	ldr	r2, [r7, #4]
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d005      	beq.n	80130ca <ip_reass_free_complete_datagram+0x3e>
 80130be:	4b3e      	ldr	r3, [pc, #248]	; (80131b8 <ip_reass_free_complete_datagram+0x12c>)
 80130c0:	22ad      	movs	r2, #173	; 0xad
 80130c2:	4940      	ldr	r1, [pc, #256]	; (80131c4 <ip_reass_free_complete_datagram+0x138>)
 80130c4:	483e      	ldr	r0, [pc, #248]	; (80131c0 <ip_reass_free_complete_datagram+0x134>)
 80130c6:	f001 f8e7 	bl	8014298 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	685b      	ldr	r3, [r3, #4]
 80130d0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	889b      	ldrh	r3, [r3, #4]
 80130d6:	b29b      	uxth	r3, r3
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d12a      	bne.n	8013132 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	685b      	ldr	r3, [r3, #4]
 80130e0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	681a      	ldr	r2, [r3, #0]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80130ea:	69bb      	ldr	r3, [r7, #24]
 80130ec:	6858      	ldr	r0, [r3, #4]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	3308      	adds	r3, #8
 80130f2:	2214      	movs	r2, #20
 80130f4:	4619      	mov	r1, r3
 80130f6:	f001 f8bc 	bl	8014272 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80130fa:	2101      	movs	r1, #1
 80130fc:	69b8      	ldr	r0, [r7, #24]
 80130fe:	f7ff fc49 	bl	8012994 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013102:	69b8      	ldr	r0, [r7, #24]
 8013104:	f7f7 fcde 	bl	800aac4 <pbuf_clen>
 8013108:	4603      	mov	r3, r0
 801310a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801310c:	8bfa      	ldrh	r2, [r7, #30]
 801310e:	8a7b      	ldrh	r3, [r7, #18]
 8013110:	4413      	add	r3, r2
 8013112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013116:	db05      	blt.n	8013124 <ip_reass_free_complete_datagram+0x98>
 8013118:	4b27      	ldr	r3, [pc, #156]	; (80131b8 <ip_reass_free_complete_datagram+0x12c>)
 801311a:	22bc      	movs	r2, #188	; 0xbc
 801311c:	492a      	ldr	r1, [pc, #168]	; (80131c8 <ip_reass_free_complete_datagram+0x13c>)
 801311e:	4828      	ldr	r0, [pc, #160]	; (80131c0 <ip_reass_free_complete_datagram+0x134>)
 8013120:	f001 f8ba 	bl	8014298 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013124:	8bfa      	ldrh	r2, [r7, #30]
 8013126:	8a7b      	ldrh	r3, [r7, #18]
 8013128:	4413      	add	r3, r2
 801312a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801312c:	69b8      	ldr	r0, [r7, #24]
 801312e:	f7f7 fc3b 	bl	800a9a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	685b      	ldr	r3, [r3, #4]
 8013136:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013138:	e01f      	b.n	801317a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801313a:	69bb      	ldr	r3, [r7, #24]
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013140:	69bb      	ldr	r3, [r7, #24]
 8013142:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801314a:	68f8      	ldr	r0, [r7, #12]
 801314c:	f7f7 fcba 	bl	800aac4 <pbuf_clen>
 8013150:	4603      	mov	r3, r0
 8013152:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013154:	8bfa      	ldrh	r2, [r7, #30]
 8013156:	8a7b      	ldrh	r3, [r7, #18]
 8013158:	4413      	add	r3, r2
 801315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801315e:	db05      	blt.n	801316c <ip_reass_free_complete_datagram+0xe0>
 8013160:	4b15      	ldr	r3, [pc, #84]	; (80131b8 <ip_reass_free_complete_datagram+0x12c>)
 8013162:	22cc      	movs	r2, #204	; 0xcc
 8013164:	4918      	ldr	r1, [pc, #96]	; (80131c8 <ip_reass_free_complete_datagram+0x13c>)
 8013166:	4816      	ldr	r0, [pc, #88]	; (80131c0 <ip_reass_free_complete_datagram+0x134>)
 8013168:	f001 f896 	bl	8014298 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801316c:	8bfa      	ldrh	r2, [r7, #30]
 801316e:	8a7b      	ldrh	r3, [r7, #18]
 8013170:	4413      	add	r3, r2
 8013172:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	f7f7 fc17 	bl	800a9a8 <pbuf_free>
  while (p != NULL) {
 801317a:	69bb      	ldr	r3, [r7, #24]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d1dc      	bne.n	801313a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013180:	6839      	ldr	r1, [r7, #0]
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f000 f8c2 	bl	801330c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013188:	4b10      	ldr	r3, [pc, #64]	; (80131cc <ip_reass_free_complete_datagram+0x140>)
 801318a:	881b      	ldrh	r3, [r3, #0]
 801318c:	8bfa      	ldrh	r2, [r7, #30]
 801318e:	429a      	cmp	r2, r3
 8013190:	d905      	bls.n	801319e <ip_reass_free_complete_datagram+0x112>
 8013192:	4b09      	ldr	r3, [pc, #36]	; (80131b8 <ip_reass_free_complete_datagram+0x12c>)
 8013194:	22d2      	movs	r2, #210	; 0xd2
 8013196:	490e      	ldr	r1, [pc, #56]	; (80131d0 <ip_reass_free_complete_datagram+0x144>)
 8013198:	4809      	ldr	r0, [pc, #36]	; (80131c0 <ip_reass_free_complete_datagram+0x134>)
 801319a:	f001 f87d 	bl	8014298 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801319e:	4b0b      	ldr	r3, [pc, #44]	; (80131cc <ip_reass_free_complete_datagram+0x140>)
 80131a0:	881a      	ldrh	r2, [r3, #0]
 80131a2:	8bfb      	ldrh	r3, [r7, #30]
 80131a4:	1ad3      	subs	r3, r2, r3
 80131a6:	b29a      	uxth	r2, r3
 80131a8:	4b08      	ldr	r3, [pc, #32]	; (80131cc <ip_reass_free_complete_datagram+0x140>)
 80131aa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80131ac:	8bfb      	ldrh	r3, [r7, #30]
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3720      	adds	r7, #32
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	08018520 	.word	0x08018520
 80131bc:	0801855c 	.word	0x0801855c
 80131c0:	08018568 	.word	0x08018568
 80131c4:	08018590 	.word	0x08018590
 80131c8:	080185a4 	.word	0x080185a4
 80131cc:	200043d4 	.word	0x200043d4
 80131d0:	080185c4 	.word	0x080185c4

080131d4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b08a      	sub	sp, #40	; 0x28
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80131de:	2300      	movs	r3, #0
 80131e0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80131e2:	2300      	movs	r3, #0
 80131e4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80131e6:	2300      	movs	r3, #0
 80131e8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80131ea:	2300      	movs	r3, #0
 80131ec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80131ee:	2300      	movs	r3, #0
 80131f0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80131f2:	4b28      	ldr	r3, [pc, #160]	; (8013294 <ip_reass_remove_oldest_datagram+0xc0>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80131f8:	e030      	b.n	801325c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80131fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fc:	695a      	ldr	r2, [r3, #20]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	68db      	ldr	r3, [r3, #12]
 8013202:	429a      	cmp	r2, r3
 8013204:	d10c      	bne.n	8013220 <ip_reass_remove_oldest_datagram+0x4c>
 8013206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013208:	699a      	ldr	r2, [r3, #24]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	691b      	ldr	r3, [r3, #16]
 801320e:	429a      	cmp	r2, r3
 8013210:	d106      	bne.n	8013220 <ip_reass_remove_oldest_datagram+0x4c>
 8013212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013214:	899a      	ldrh	r2, [r3, #12]
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	889b      	ldrh	r3, [r3, #4]
 801321a:	b29b      	uxth	r3, r3
 801321c:	429a      	cmp	r2, r3
 801321e:	d014      	beq.n	801324a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	3301      	adds	r3, #1
 8013224:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013226:	6a3b      	ldr	r3, [r7, #32]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d104      	bne.n	8013236 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801322e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	61bb      	str	r3, [r7, #24]
 8013234:	e009      	b.n	801324a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013238:	7fda      	ldrb	r2, [r3, #31]
 801323a:	6a3b      	ldr	r3, [r7, #32]
 801323c:	7fdb      	ldrb	r3, [r3, #31]
 801323e:	429a      	cmp	r2, r3
 8013240:	d803      	bhi.n	801324a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013244:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d001      	beq.n	8013256 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013254:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325e:	2b00      	cmp	r3, #0
 8013260:	d1cb      	bne.n	80131fa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013262:	6a3b      	ldr	r3, [r7, #32]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d008      	beq.n	801327a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013268:	69b9      	ldr	r1, [r7, #24]
 801326a:	6a38      	ldr	r0, [r7, #32]
 801326c:	f7ff ff0e 	bl	801308c <ip_reass_free_complete_datagram>
 8013270:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013272:	697a      	ldr	r2, [r7, #20]
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	4413      	add	r3, r2
 8013278:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801327a:	697a      	ldr	r2, [r7, #20]
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	429a      	cmp	r2, r3
 8013280:	da02      	bge.n	8013288 <ip_reass_remove_oldest_datagram+0xb4>
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	2b01      	cmp	r3, #1
 8013286:	dcac      	bgt.n	80131e2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013288:	697b      	ldr	r3, [r7, #20]
}
 801328a:	4618      	mov	r0, r3
 801328c:	3728      	adds	r7, #40	; 0x28
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	200043d0 	.word	0x200043d0

08013298 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b084      	sub	sp, #16
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80132a2:	2004      	movs	r0, #4
 80132a4:	f7f6 fc8e 	bl	8009bc4 <memp_malloc>
 80132a8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d110      	bne.n	80132d2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80132b0:	6839      	ldr	r1, [r7, #0]
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f7ff ff8e 	bl	80131d4 <ip_reass_remove_oldest_datagram>
 80132b8:	4602      	mov	r2, r0
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	4293      	cmp	r3, r2
 80132be:	dc03      	bgt.n	80132c8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80132c0:	2004      	movs	r0, #4
 80132c2:	f7f6 fc7f 	bl	8009bc4 <memp_malloc>
 80132c6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d101      	bne.n	80132d2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80132ce:	2300      	movs	r3, #0
 80132d0:	e016      	b.n	8013300 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80132d2:	2220      	movs	r2, #32
 80132d4:	2100      	movs	r1, #0
 80132d6:	68f8      	ldr	r0, [r7, #12]
 80132d8:	f000 ffd6 	bl	8014288 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	220f      	movs	r2, #15
 80132e0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80132e2:	4b09      	ldr	r3, [pc, #36]	; (8013308 <ip_reass_enqueue_new_datagram+0x70>)
 80132e4:	681a      	ldr	r2, [r3, #0]
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80132ea:	4a07      	ldr	r2, [pc, #28]	; (8013308 <ip_reass_enqueue_new_datagram+0x70>)
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	3308      	adds	r3, #8
 80132f4:	2214      	movs	r2, #20
 80132f6:	6879      	ldr	r1, [r7, #4]
 80132f8:	4618      	mov	r0, r3
 80132fa:	f000 ffba 	bl	8014272 <memcpy>
  return ipr;
 80132fe:	68fb      	ldr	r3, [r7, #12]
}
 8013300:	4618      	mov	r0, r3
 8013302:	3710      	adds	r7, #16
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}
 8013308:	200043d0 	.word	0x200043d0

0801330c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013316:	4b10      	ldr	r3, [pc, #64]	; (8013358 <ip_reass_dequeue_datagram+0x4c>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	687a      	ldr	r2, [r7, #4]
 801331c:	429a      	cmp	r2, r3
 801331e:	d104      	bne.n	801332a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4a0c      	ldr	r2, [pc, #48]	; (8013358 <ip_reass_dequeue_datagram+0x4c>)
 8013326:	6013      	str	r3, [r2, #0]
 8013328:	e00d      	b.n	8013346 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d106      	bne.n	801333e <ip_reass_dequeue_datagram+0x32>
 8013330:	4b0a      	ldr	r3, [pc, #40]	; (801335c <ip_reass_dequeue_datagram+0x50>)
 8013332:	f240 1245 	movw	r2, #325	; 0x145
 8013336:	490a      	ldr	r1, [pc, #40]	; (8013360 <ip_reass_dequeue_datagram+0x54>)
 8013338:	480a      	ldr	r0, [pc, #40]	; (8013364 <ip_reass_dequeue_datagram+0x58>)
 801333a:	f000 ffad 	bl	8014298 <iprintf>
    prev->next = ipr->next;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681a      	ldr	r2, [r3, #0]
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013346:	6879      	ldr	r1, [r7, #4]
 8013348:	2004      	movs	r0, #4
 801334a:	f7f6 fc8d 	bl	8009c68 <memp_free>
}
 801334e:	bf00      	nop
 8013350:	3708      	adds	r7, #8
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	200043d0 	.word	0x200043d0
 801335c:	08018520 	.word	0x08018520
 8013360:	080185e8 	.word	0x080185e8
 8013364:	08018568 	.word	0x08018568

08013368 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b08c      	sub	sp, #48	; 0x30
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013374:	2300      	movs	r3, #0
 8013376:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013378:	2301      	movs	r3, #1
 801337a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	885b      	ldrh	r3, [r3, #2]
 8013386:	b29b      	uxth	r3, r3
 8013388:	4618      	mov	r0, r3
 801338a:	f7f5 ff65 	bl	8009258 <lwip_htons>
 801338e:	4603      	mov	r3, r0
 8013390:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013392:	69fb      	ldr	r3, [r7, #28]
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	f003 030f 	and.w	r3, r3, #15
 801339a:	b2db      	uxtb	r3, r3
 801339c:	009b      	lsls	r3, r3, #2
 801339e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80133a0:	7e7b      	ldrb	r3, [r7, #25]
 80133a2:	b29b      	uxth	r3, r3
 80133a4:	8b7a      	ldrh	r2, [r7, #26]
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d202      	bcs.n	80133b0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133aa:	f04f 33ff 	mov.w	r3, #4294967295
 80133ae:	e135      	b.n	801361c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80133b0:	7e7b      	ldrb	r3, [r7, #25]
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	8b7a      	ldrh	r2, [r7, #26]
 80133b6:	1ad3      	subs	r3, r2, r3
 80133b8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80133ba:	69fb      	ldr	r3, [r7, #28]
 80133bc:	88db      	ldrh	r3, [r3, #6]
 80133be:	b29b      	uxth	r3, r3
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7f5 ff49 	bl	8009258 <lwip_htons>
 80133c6:	4603      	mov	r3, r0
 80133c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	00db      	lsls	r3, r3, #3
 80133d0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80133d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133da:	2200      	movs	r2, #0
 80133dc:	701a      	strb	r2, [r3, #0]
 80133de:	2200      	movs	r2, #0
 80133e0:	705a      	strb	r2, [r3, #1]
 80133e2:	2200      	movs	r2, #0
 80133e4:	709a      	strb	r2, [r3, #2]
 80133e6:	2200      	movs	r2, #0
 80133e8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80133ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ec:	8afa      	ldrh	r2, [r7, #22]
 80133ee:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80133f0:	8afa      	ldrh	r2, [r7, #22]
 80133f2:	8b7b      	ldrh	r3, [r7, #26]
 80133f4:	4413      	add	r3, r2
 80133f6:	b29a      	uxth	r2, r3
 80133f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80133fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fe:	88db      	ldrh	r3, [r3, #6]
 8013400:	b29b      	uxth	r3, r3
 8013402:	8afa      	ldrh	r2, [r7, #22]
 8013404:	429a      	cmp	r2, r3
 8013406:	d902      	bls.n	801340e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013408:	f04f 33ff 	mov.w	r3, #4294967295
 801340c:	e106      	b.n	801361c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	685b      	ldr	r3, [r3, #4]
 8013412:	627b      	str	r3, [r7, #36]	; 0x24
 8013414:	e068      	b.n	80134e8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013418:	685b      	ldr	r3, [r3, #4]
 801341a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341e:	889b      	ldrh	r3, [r3, #4]
 8013420:	b29a      	uxth	r2, r3
 8013422:	693b      	ldr	r3, [r7, #16]
 8013424:	889b      	ldrh	r3, [r3, #4]
 8013426:	b29b      	uxth	r3, r3
 8013428:	429a      	cmp	r2, r3
 801342a:	d235      	bcs.n	8013498 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013430:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013434:	2b00      	cmp	r3, #0
 8013436:	d020      	beq.n	801347a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801343a:	889b      	ldrh	r3, [r3, #4]
 801343c:	b29a      	uxth	r2, r3
 801343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013440:	88db      	ldrh	r3, [r3, #6]
 8013442:	b29b      	uxth	r3, r3
 8013444:	429a      	cmp	r2, r3
 8013446:	d307      	bcc.n	8013458 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801344a:	88db      	ldrh	r3, [r3, #6]
 801344c:	b29a      	uxth	r2, r3
 801344e:	693b      	ldr	r3, [r7, #16]
 8013450:	889b      	ldrh	r3, [r3, #4]
 8013452:	b29b      	uxth	r3, r3
 8013454:	429a      	cmp	r2, r3
 8013456:	d902      	bls.n	801345e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013458:	f04f 33ff 	mov.w	r3, #4294967295
 801345c:	e0de      	b.n	801361c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013460:	68ba      	ldr	r2, [r7, #8]
 8013462:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013466:	88db      	ldrh	r3, [r3, #6]
 8013468:	b29a      	uxth	r2, r3
 801346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346c:	889b      	ldrh	r3, [r3, #4]
 801346e:	b29b      	uxth	r3, r3
 8013470:	429a      	cmp	r2, r3
 8013472:	d03d      	beq.n	80134f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013474:	2300      	movs	r3, #0
 8013476:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013478:	e03a      	b.n	80134f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347c:	88db      	ldrh	r3, [r3, #6]
 801347e:	b29a      	uxth	r2, r3
 8013480:	693b      	ldr	r3, [r7, #16]
 8013482:	889b      	ldrh	r3, [r3, #4]
 8013484:	b29b      	uxth	r3, r3
 8013486:	429a      	cmp	r2, r3
 8013488:	d902      	bls.n	8013490 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801348a:	f04f 33ff 	mov.w	r3, #4294967295
 801348e:	e0c5      	b.n	801361c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	68ba      	ldr	r2, [r7, #8]
 8013494:	605a      	str	r2, [r3, #4]
      break;
 8013496:	e02b      	b.n	80134f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349a:	889b      	ldrh	r3, [r3, #4]
 801349c:	b29a      	uxth	r2, r3
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	889b      	ldrh	r3, [r3, #4]
 80134a2:	b29b      	uxth	r3, r3
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d102      	bne.n	80134ae <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134a8:	f04f 33ff 	mov.w	r3, #4294967295
 80134ac:	e0b6      	b.n	801361c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80134ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b0:	889b      	ldrh	r3, [r3, #4]
 80134b2:	b29a      	uxth	r2, r3
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	88db      	ldrh	r3, [r3, #6]
 80134b8:	b29b      	uxth	r3, r3
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d202      	bcs.n	80134c4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134be:	f04f 33ff 	mov.w	r3, #4294967295
 80134c2:	e0ab      	b.n	801361c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80134c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d009      	beq.n	80134de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80134ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134cc:	88db      	ldrh	r3, [r3, #6]
 80134ce:	b29a      	uxth	r2, r3
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	889b      	ldrh	r3, [r3, #4]
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	429a      	cmp	r2, r3
 80134d8:	d001      	beq.n	80134de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80134da:	2300      	movs	r3, #0
 80134dc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80134e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d193      	bne.n	8013416 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80134ee:	e000      	b.n	80134f2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80134f0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80134f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d12d      	bne.n	8013554 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80134f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d01c      	beq.n	8013538 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80134fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013500:	88db      	ldrh	r3, [r3, #6]
 8013502:	b29a      	uxth	r2, r3
 8013504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013506:	889b      	ldrh	r3, [r3, #4]
 8013508:	b29b      	uxth	r3, r3
 801350a:	429a      	cmp	r2, r3
 801350c:	d906      	bls.n	801351c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801350e:	4b45      	ldr	r3, [pc, #276]	; (8013624 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013510:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013514:	4944      	ldr	r1, [pc, #272]	; (8013628 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013516:	4845      	ldr	r0, [pc, #276]	; (801362c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013518:	f000 febe 	bl	8014298 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351e:	68ba      	ldr	r2, [r7, #8]
 8013520:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013524:	88db      	ldrh	r3, [r3, #6]
 8013526:	b29a      	uxth	r2, r3
 8013528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801352a:	889b      	ldrh	r3, [r3, #4]
 801352c:	b29b      	uxth	r3, r3
 801352e:	429a      	cmp	r2, r3
 8013530:	d010      	beq.n	8013554 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013532:	2300      	movs	r3, #0
 8013534:	623b      	str	r3, [r7, #32]
 8013536:	e00d      	b.n	8013554 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	685b      	ldr	r3, [r3, #4]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d006      	beq.n	801354e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013540:	4b38      	ldr	r3, [pc, #224]	; (8013624 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013542:	f240 12bf 	movw	r2, #447	; 0x1bf
 8013546:	493a      	ldr	r1, [pc, #232]	; (8013630 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013548:	4838      	ldr	r0, [pc, #224]	; (801362c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801354a:	f000 fea5 	bl	8014298 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	68ba      	ldr	r2, [r7, #8]
 8013552:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d105      	bne.n	8013566 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	7f9b      	ldrb	r3, [r3, #30]
 801355e:	f003 0301 	and.w	r3, r3, #1
 8013562:	2b00      	cmp	r3, #0
 8013564:	d059      	beq.n	801361a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013566:	6a3b      	ldr	r3, [r7, #32]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d04f      	beq.n	801360c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d006      	beq.n	8013582 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	889b      	ldrh	r3, [r3, #4]
 801357c:	b29b      	uxth	r3, r3
 801357e:	2b00      	cmp	r3, #0
 8013580:	d002      	beq.n	8013588 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013582:	2300      	movs	r3, #0
 8013584:	623b      	str	r3, [r7, #32]
 8013586:	e041      	b.n	801360c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013592:	e012      	b.n	80135ba <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801359c:	88db      	ldrh	r3, [r3, #6]
 801359e:	b29a      	uxth	r2, r3
 80135a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a2:	889b      	ldrh	r3, [r3, #4]
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d002      	beq.n	80135b0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80135aa:	2300      	movs	r3, #0
 80135ac:	623b      	str	r3, [r7, #32]
            break;
 80135ae:	e007      	b.n	80135c0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80135b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135b2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80135b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80135ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d1e9      	bne.n	8013594 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80135c0:	6a3b      	ldr	r3, [r7, #32]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d022      	beq.n	801360c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d106      	bne.n	80135dc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80135ce:	4b15      	ldr	r3, [pc, #84]	; (8013624 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80135d0:	f240 12df 	movw	r2, #479	; 0x1df
 80135d4:	4917      	ldr	r1, [pc, #92]	; (8013634 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80135d6:	4815      	ldr	r0, [pc, #84]	; (801362c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80135d8:	f000 fe5e 	bl	8014298 <iprintf>
          LWIP_ASSERT("sanity check",
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d106      	bne.n	80135f6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80135e8:	4b0e      	ldr	r3, [pc, #56]	; (8013624 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80135ea:	f240 12e1 	movw	r2, #481	; 0x1e1
 80135ee:	4911      	ldr	r1, [pc, #68]	; (8013634 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80135f0:	480e      	ldr	r0, [pc, #56]	; (801362c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80135f2:	f000 fe51 	bl	8014298 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80135f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d006      	beq.n	801360c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80135fe:	4b09      	ldr	r3, [pc, #36]	; (8013624 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013600:	f240 12e3 	movw	r2, #483	; 0x1e3
 8013604:	490c      	ldr	r1, [pc, #48]	; (8013638 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013606:	4809      	ldr	r0, [pc, #36]	; (801362c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013608:	f000 fe46 	bl	8014298 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801360c:	6a3b      	ldr	r3, [r7, #32]
 801360e:	2b00      	cmp	r3, #0
 8013610:	bf14      	ite	ne
 8013612:	2301      	movne	r3, #1
 8013614:	2300      	moveq	r3, #0
 8013616:	b2db      	uxtb	r3, r3
 8013618:	e000      	b.n	801361c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801361a:	2300      	movs	r3, #0
}
 801361c:	4618      	mov	r0, r3
 801361e:	3730      	adds	r7, #48	; 0x30
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}
 8013624:	08018520 	.word	0x08018520
 8013628:	08018604 	.word	0x08018604
 801362c:	08018568 	.word	0x08018568
 8013630:	08018624 	.word	0x08018624
 8013634:	0801865c 	.word	0x0801865c
 8013638:	0801866c 	.word	0x0801866c

0801363c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b08e      	sub	sp, #56	; 0x38
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	f003 030f 	and.w	r3, r3, #15
 8013652:	b2db      	uxtb	r3, r3
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	b2db      	uxtb	r3, r3
 8013658:	2b14      	cmp	r3, #20
 801365a:	f040 8167 	bne.w	801392c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013660:	88db      	ldrh	r3, [r3, #6]
 8013662:	b29b      	uxth	r3, r3
 8013664:	4618      	mov	r0, r3
 8013666:	f7f5 fdf7 	bl	8009258 <lwip_htons>
 801366a:	4603      	mov	r3, r0
 801366c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013670:	b29b      	uxth	r3, r3
 8013672:	00db      	lsls	r3, r3, #3
 8013674:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013678:	885b      	ldrh	r3, [r3, #2]
 801367a:	b29b      	uxth	r3, r3
 801367c:	4618      	mov	r0, r3
 801367e:	f7f5 fdeb 	bl	8009258 <lwip_htons>
 8013682:	4603      	mov	r3, r0
 8013684:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	f003 030f 	and.w	r3, r3, #15
 801368e:	b2db      	uxtb	r3, r3
 8013690:	009b      	lsls	r3, r3, #2
 8013692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801369a:	b29b      	uxth	r3, r3
 801369c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801369e:	429a      	cmp	r2, r3
 80136a0:	f0c0 8146 	bcc.w	8013930 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80136a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80136a8:	b29b      	uxth	r3, r3
 80136aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80136ac:	1ad3      	subs	r3, r2, r3
 80136ae:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7f7 fa07 	bl	800aac4 <pbuf_clen>
 80136b6:	4603      	mov	r3, r0
 80136b8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80136ba:	4ba3      	ldr	r3, [pc, #652]	; (8013948 <ip4_reass+0x30c>)
 80136bc:	881b      	ldrh	r3, [r3, #0]
 80136be:	461a      	mov	r2, r3
 80136c0:	8c3b      	ldrh	r3, [r7, #32]
 80136c2:	4413      	add	r3, r2
 80136c4:	2b0a      	cmp	r3, #10
 80136c6:	dd10      	ble.n	80136ea <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80136c8:	8c3b      	ldrh	r3, [r7, #32]
 80136ca:	4619      	mov	r1, r3
 80136cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136ce:	f7ff fd81 	bl	80131d4 <ip_reass_remove_oldest_datagram>
 80136d2:	4603      	mov	r3, r0
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	f000 812d 	beq.w	8013934 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80136da:	4b9b      	ldr	r3, [pc, #620]	; (8013948 <ip4_reass+0x30c>)
 80136dc:	881b      	ldrh	r3, [r3, #0]
 80136de:	461a      	mov	r2, r3
 80136e0:	8c3b      	ldrh	r3, [r7, #32]
 80136e2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80136e4:	2b0a      	cmp	r3, #10
 80136e6:	f300 8125 	bgt.w	8013934 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80136ea:	4b98      	ldr	r3, [pc, #608]	; (801394c <ip4_reass+0x310>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	633b      	str	r3, [r7, #48]	; 0x30
 80136f0:	e015      	b.n	801371e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80136f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f4:	695a      	ldr	r2, [r3, #20]
 80136f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d10c      	bne.n	8013718 <ip4_reass+0xdc>
 80136fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013700:	699a      	ldr	r2, [r3, #24]
 8013702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013704:	691b      	ldr	r3, [r3, #16]
 8013706:	429a      	cmp	r2, r3
 8013708:	d106      	bne.n	8013718 <ip4_reass+0xdc>
 801370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370c:	899a      	ldrh	r2, [r3, #12]
 801370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013710:	889b      	ldrh	r3, [r3, #4]
 8013712:	b29b      	uxth	r3, r3
 8013714:	429a      	cmp	r2, r3
 8013716:	d006      	beq.n	8013726 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	633b      	str	r3, [r7, #48]	; 0x30
 801371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013720:	2b00      	cmp	r3, #0
 8013722:	d1e6      	bne.n	80136f2 <ip4_reass+0xb6>
 8013724:	e000      	b.n	8013728 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013726:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372a:	2b00      	cmp	r3, #0
 801372c:	d109      	bne.n	8013742 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801372e:	8c3b      	ldrh	r3, [r7, #32]
 8013730:	4619      	mov	r1, r3
 8013732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013734:	f7ff fdb0 	bl	8013298 <ip_reass_enqueue_new_datagram>
 8013738:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373c:	2b00      	cmp	r3, #0
 801373e:	d11c      	bne.n	801377a <ip4_reass+0x13e>
      goto nullreturn;
 8013740:	e0f9      	b.n	8013936 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013744:	88db      	ldrh	r3, [r3, #6]
 8013746:	b29b      	uxth	r3, r3
 8013748:	4618      	mov	r0, r3
 801374a:	f7f5 fd85 	bl	8009258 <lwip_htons>
 801374e:	4603      	mov	r3, r0
 8013750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013754:	2b00      	cmp	r3, #0
 8013756:	d110      	bne.n	801377a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375a:	89db      	ldrh	r3, [r3, #14]
 801375c:	4618      	mov	r0, r3
 801375e:	f7f5 fd7b 	bl	8009258 <lwip_htons>
 8013762:	4603      	mov	r3, r0
 8013764:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013768:	2b00      	cmp	r3, #0
 801376a:	d006      	beq.n	801377a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801376e:	3308      	adds	r3, #8
 8013770:	2214      	movs	r2, #20
 8013772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013774:	4618      	mov	r0, r3
 8013776:	f000 fd7c 	bl	8014272 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801377c:	88db      	ldrh	r3, [r3, #6]
 801377e:	b29b      	uxth	r3, r3
 8013780:	f003 0320 	and.w	r3, r3, #32
 8013784:	2b00      	cmp	r3, #0
 8013786:	bf0c      	ite	eq
 8013788:	2301      	moveq	r3, #1
 801378a:	2300      	movne	r3, #0
 801378c:	b2db      	uxtb	r3, r3
 801378e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d00e      	beq.n	80137b4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013796:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801379a:	4413      	add	r3, r2
 801379c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801379e:	8b7a      	ldrh	r2, [r7, #26]
 80137a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80137a2:	429a      	cmp	r2, r3
 80137a4:	f0c0 80a0 	bcc.w	80138e8 <ip4_reass+0x2ac>
 80137a8:	8b7b      	ldrh	r3, [r7, #26]
 80137aa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80137ae:	4293      	cmp	r3, r2
 80137b0:	f200 809a 	bhi.w	80138e8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80137b4:	69fa      	ldr	r2, [r7, #28]
 80137b6:	6879      	ldr	r1, [r7, #4]
 80137b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137ba:	f7ff fdd5 	bl	8013368 <ip_reass_chain_frag_into_datagram_and_validate>
 80137be:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137c6:	f000 8091 	beq.w	80138ec <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80137ca:	4b5f      	ldr	r3, [pc, #380]	; (8013948 <ip4_reass+0x30c>)
 80137cc:	881a      	ldrh	r2, [r3, #0]
 80137ce:	8c3b      	ldrh	r3, [r7, #32]
 80137d0:	4413      	add	r3, r2
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	4b5c      	ldr	r3, [pc, #368]	; (8013948 <ip4_reass+0x30c>)
 80137d6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d00d      	beq.n	80137fa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80137de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80137e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137e2:	4413      	add	r3, r2
 80137e4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80137e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e8:	8a7a      	ldrh	r2, [r7, #18]
 80137ea:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80137ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ee:	7f9b      	ldrb	r3, [r3, #30]
 80137f0:	f043 0301 	orr.w	r3, r3, #1
 80137f4:	b2da      	uxtb	r2, r3
 80137f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80137fa:	697b      	ldr	r3, [r7, #20]
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	d171      	bne.n	80138e4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013802:	8b9b      	ldrh	r3, [r3, #28]
 8013804:	3314      	adds	r3, #20
 8013806:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380a:	685b      	ldr	r3, [r3, #4]
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013814:	685b      	ldr	r3, [r3, #4]
 8013816:	685b      	ldr	r3, [r3, #4]
 8013818:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381c:	3308      	adds	r3, #8
 801381e:	2214      	movs	r2, #20
 8013820:	4619      	mov	r1, r3
 8013822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013824:	f000 fd25 	bl	8014272 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013828:	8a3b      	ldrh	r3, [r7, #16]
 801382a:	4618      	mov	r0, r3
 801382c:	f7f5 fd14 	bl	8009258 <lwip_htons>
 8013830:	4603      	mov	r3, r0
 8013832:	461a      	mov	r2, r3
 8013834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013836:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383a:	2200      	movs	r2, #0
 801383c:	719a      	strb	r2, [r3, #6]
 801383e:	2200      	movs	r2, #0
 8013840:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013844:	2200      	movs	r2, #0
 8013846:	729a      	strb	r2, [r3, #10]
 8013848:	2200      	movs	r2, #0
 801384a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013852:	e00d      	b.n	8013870 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801385a:	2114      	movs	r1, #20
 801385c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801385e:	f7f7 f81d 	bl	800a89c <pbuf_remove_header>
      pbuf_cat(p, r);
 8013862:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013864:	6878      	ldr	r0, [r7, #4]
 8013866:	f7f7 f96d 	bl	800ab44 <pbuf_cat>
      r = iprh->next_pbuf;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013872:	2b00      	cmp	r3, #0
 8013874:	d1ee      	bne.n	8013854 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013876:	4b35      	ldr	r3, [pc, #212]	; (801394c <ip4_reass+0x310>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801387c:	429a      	cmp	r2, r3
 801387e:	d102      	bne.n	8013886 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013880:	2300      	movs	r3, #0
 8013882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013884:	e010      	b.n	80138a8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013886:	4b31      	ldr	r3, [pc, #196]	; (801394c <ip4_reass+0x310>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801388c:	e007      	b.n	801389e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013894:	429a      	cmp	r2, r3
 8013896:	d006      	beq.n	80138a6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d1f4      	bne.n	801388e <ip4_reass+0x252>
 80138a4:	e000      	b.n	80138a8 <ip4_reass+0x26c>
          break;
 80138a6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80138a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80138aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138ac:	f7ff fd2e 	bl	801330c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f7f7 f907 	bl	800aac4 <pbuf_clen>
 80138b6:	4603      	mov	r3, r0
 80138b8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80138ba:	4b23      	ldr	r3, [pc, #140]	; (8013948 <ip4_reass+0x30c>)
 80138bc:	881b      	ldrh	r3, [r3, #0]
 80138be:	8c3a      	ldrh	r2, [r7, #32]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d906      	bls.n	80138d2 <ip4_reass+0x296>
 80138c4:	4b22      	ldr	r3, [pc, #136]	; (8013950 <ip4_reass+0x314>)
 80138c6:	f240 229b 	movw	r2, #667	; 0x29b
 80138ca:	4922      	ldr	r1, [pc, #136]	; (8013954 <ip4_reass+0x318>)
 80138cc:	4822      	ldr	r0, [pc, #136]	; (8013958 <ip4_reass+0x31c>)
 80138ce:	f000 fce3 	bl	8014298 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80138d2:	4b1d      	ldr	r3, [pc, #116]	; (8013948 <ip4_reass+0x30c>)
 80138d4:	881a      	ldrh	r2, [r3, #0]
 80138d6:	8c3b      	ldrh	r3, [r7, #32]
 80138d8:	1ad3      	subs	r3, r2, r3
 80138da:	b29a      	uxth	r2, r3
 80138dc:	4b1a      	ldr	r3, [pc, #104]	; (8013948 <ip4_reass+0x30c>)
 80138de:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	e02c      	b.n	801393e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80138e4:	2300      	movs	r3, #0
 80138e6:	e02a      	b.n	801393e <ip4_reass+0x302>

nullreturn_ipr:
 80138e8:	bf00      	nop
 80138ea:	e000      	b.n	80138ee <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80138ec:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80138ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d106      	bne.n	8013902 <ip4_reass+0x2c6>
 80138f4:	4b16      	ldr	r3, [pc, #88]	; (8013950 <ip4_reass+0x314>)
 80138f6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80138fa:	4918      	ldr	r1, [pc, #96]	; (801395c <ip4_reass+0x320>)
 80138fc:	4816      	ldr	r0, [pc, #88]	; (8013958 <ip4_reass+0x31c>)
 80138fe:	f000 fccb 	bl	8014298 <iprintf>
  if (ipr->p == NULL) {
 8013902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d114      	bne.n	8013934 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801390a:	4b10      	ldr	r3, [pc, #64]	; (801394c <ip4_reass+0x310>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013910:	429a      	cmp	r2, r3
 8013912:	d006      	beq.n	8013922 <ip4_reass+0x2e6>
 8013914:	4b0e      	ldr	r3, [pc, #56]	; (8013950 <ip4_reass+0x314>)
 8013916:	f240 22ab 	movw	r2, #683	; 0x2ab
 801391a:	4911      	ldr	r1, [pc, #68]	; (8013960 <ip4_reass+0x324>)
 801391c:	480e      	ldr	r0, [pc, #56]	; (8013958 <ip4_reass+0x31c>)
 801391e:	f000 fcbb 	bl	8014298 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013922:	2100      	movs	r1, #0
 8013924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013926:	f7ff fcf1 	bl	801330c <ip_reass_dequeue_datagram>
 801392a:	e004      	b.n	8013936 <ip4_reass+0x2fa>
    goto nullreturn;
 801392c:	bf00      	nop
 801392e:	e002      	b.n	8013936 <ip4_reass+0x2fa>
    goto nullreturn;
 8013930:	bf00      	nop
 8013932:	e000      	b.n	8013936 <ip4_reass+0x2fa>
  }

nullreturn:
 8013934:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f7f7 f836 	bl	800a9a8 <pbuf_free>
  return NULL;
 801393c:	2300      	movs	r3, #0
}
 801393e:	4618      	mov	r0, r3
 8013940:	3738      	adds	r7, #56	; 0x38
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	200043d4 	.word	0x200043d4
 801394c:	200043d0 	.word	0x200043d0
 8013950:	08018520 	.word	0x08018520
 8013954:	08018690 	.word	0x08018690
 8013958:	08018568 	.word	0x08018568
 801395c:	080186ac 	.word	0x080186ac
 8013960:	080186b8 	.word	0x080186b8

08013964 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013968:	2005      	movs	r0, #5
 801396a:	f7f6 f92b 	bl	8009bc4 <memp_malloc>
 801396e:	4603      	mov	r3, r0
}
 8013970:	4618      	mov	r0, r3
 8013972:	bd80      	pop	{r7, pc}

08013974 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013982:	4b07      	ldr	r3, [pc, #28]	; (80139a0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013984:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013988:	4906      	ldr	r1, [pc, #24]	; (80139a4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801398a:	4807      	ldr	r0, [pc, #28]	; (80139a8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801398c:	f000 fc84 	bl	8014298 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013990:	6879      	ldr	r1, [r7, #4]
 8013992:	2005      	movs	r0, #5
 8013994:	f7f6 f968 	bl	8009c68 <memp_free>
}
 8013998:	bf00      	nop
 801399a:	3708      	adds	r7, #8
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	08018520 	.word	0x08018520
 80139a4:	080186d8 	.word	0x080186d8
 80139a8:	08018568 	.word	0x08018568

080139ac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b084      	sub	sp, #16
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d106      	bne.n	80139cc <ipfrag_free_pbuf_custom+0x20>
 80139be:	4b11      	ldr	r3, [pc, #68]	; (8013a04 <ipfrag_free_pbuf_custom+0x58>)
 80139c0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80139c4:	4910      	ldr	r1, [pc, #64]	; (8013a08 <ipfrag_free_pbuf_custom+0x5c>)
 80139c6:	4811      	ldr	r0, [pc, #68]	; (8013a0c <ipfrag_free_pbuf_custom+0x60>)
 80139c8:	f000 fc66 	bl	8014298 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80139cc:	68fa      	ldr	r2, [r7, #12]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d006      	beq.n	80139e2 <ipfrag_free_pbuf_custom+0x36>
 80139d4:	4b0b      	ldr	r3, [pc, #44]	; (8013a04 <ipfrag_free_pbuf_custom+0x58>)
 80139d6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80139da:	490d      	ldr	r1, [pc, #52]	; (8013a10 <ipfrag_free_pbuf_custom+0x64>)
 80139dc:	480b      	ldr	r0, [pc, #44]	; (8013a0c <ipfrag_free_pbuf_custom+0x60>)
 80139de:	f000 fc5b 	bl	8014298 <iprintf>
  if (pcr->original != NULL) {
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	695b      	ldr	r3, [r3, #20]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d004      	beq.n	80139f4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	695b      	ldr	r3, [r3, #20]
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7f6 ffda 	bl	800a9a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80139f4:	68f8      	ldr	r0, [r7, #12]
 80139f6:	f7ff ffbd 	bl	8013974 <ip_frag_free_pbuf_custom_ref>
}
 80139fa:	bf00      	nop
 80139fc:	3710      	adds	r7, #16
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}
 8013a02:	bf00      	nop
 8013a04:	08018520 	.word	0x08018520
 8013a08:	080186e4 	.word	0x080186e4
 8013a0c:	08018568 	.word	0x08018568
 8013a10:	080186f0 	.word	0x080186f0

08013a14 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b094      	sub	sp, #80	; 0x50
 8013a18:	af02      	add	r7, sp, #8
 8013a1a:	60f8      	str	r0, [r7, #12]
 8013a1c:	60b9      	str	r1, [r7, #8]
 8013a1e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013a20:	2300      	movs	r3, #0
 8013a22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013a2a:	3b14      	subs	r3, #20
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	da00      	bge.n	8013a32 <ip4_frag+0x1e>
 8013a30:	3307      	adds	r3, #7
 8013a32:	10db      	asrs	r3, r3, #3
 8013a34:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013a36:	2314      	movs	r3, #20
 8013a38:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a42:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	f003 030f 	and.w	r3, r3, #15
 8013a4c:	b2db      	uxtb	r3, r3
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	2b14      	cmp	r3, #20
 8013a54:	d002      	beq.n	8013a5c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013a56:	f06f 0305 	mvn.w	r3, #5
 8013a5a:	e10f      	b.n	8013c7c <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	895b      	ldrh	r3, [r3, #10]
 8013a60:	2b13      	cmp	r3, #19
 8013a62:	d809      	bhi.n	8013a78 <ip4_frag+0x64>
 8013a64:	4b87      	ldr	r3, [pc, #540]	; (8013c84 <ip4_frag+0x270>)
 8013a66:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013a6a:	4987      	ldr	r1, [pc, #540]	; (8013c88 <ip4_frag+0x274>)
 8013a6c:	4887      	ldr	r0, [pc, #540]	; (8013c8c <ip4_frag+0x278>)
 8013a6e:	f000 fc13 	bl	8014298 <iprintf>
 8013a72:	f06f 0305 	mvn.w	r3, #5
 8013a76:	e101      	b.n	8013c7c <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7a:	88db      	ldrh	r3, [r3, #6]
 8013a7c:	b29b      	uxth	r3, r3
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7f5 fbea 	bl	8009258 <lwip_htons>
 8013a84:	4603      	mov	r3, r0
 8013a86:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013a88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013a92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013a98:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	891b      	ldrh	r3, [r3, #8]
 8013a9e:	3b14      	subs	r3, #20
 8013aa0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013aa4:	e0e0      	b.n	8013c68 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013aa6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013aa8:	00db      	lsls	r3, r3, #3
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	bf28      	it	cs
 8013ab4:	4613      	movcs	r3, r2
 8013ab6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013ab8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013abc:	2114      	movs	r1, #20
 8013abe:	200e      	movs	r0, #14
 8013ac0:	f7f6 fc92 	bl	800a3e8 <pbuf_alloc>
 8013ac4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	f000 80d4 	beq.w	8013c76 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad0:	895b      	ldrh	r3, [r3, #10]
 8013ad2:	2b13      	cmp	r3, #19
 8013ad4:	d806      	bhi.n	8013ae4 <ip4_frag+0xd0>
 8013ad6:	4b6b      	ldr	r3, [pc, #428]	; (8013c84 <ip4_frag+0x270>)
 8013ad8:	f240 3225 	movw	r2, #805	; 0x325
 8013adc:	496c      	ldr	r1, [pc, #432]	; (8013c90 <ip4_frag+0x27c>)
 8013ade:	486b      	ldr	r0, [pc, #428]	; (8013c8c <ip4_frag+0x278>)
 8013ae0:	f000 fbda 	bl	8014298 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	2214      	movs	r2, #20
 8013aea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013aec:	4618      	mov	r0, r3
 8013aee:	f000 fbc0 	bl	8014272 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013af8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013afa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013afe:	e064      	b.n	8013bca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	895a      	ldrh	r2, [r3, #10]
 8013b04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013b06:	1ad3      	subs	r3, r2, r3
 8013b08:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	895b      	ldrh	r3, [r3, #10]
 8013b0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d906      	bls.n	8013b22 <ip4_frag+0x10e>
 8013b14:	4b5b      	ldr	r3, [pc, #364]	; (8013c84 <ip4_frag+0x270>)
 8013b16:	f240 322d 	movw	r2, #813	; 0x32d
 8013b1a:	495e      	ldr	r1, [pc, #376]	; (8013c94 <ip4_frag+0x280>)
 8013b1c:	485b      	ldr	r0, [pc, #364]	; (8013c8c <ip4_frag+0x278>)
 8013b1e:	f000 fbbb 	bl	8014298 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013b22:	8bfa      	ldrh	r2, [r7, #30]
 8013b24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013b28:	4293      	cmp	r3, r2
 8013b2a:	bf28      	it	cs
 8013b2c:	4613      	movcs	r3, r2
 8013b2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013b32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d105      	bne.n	8013b46 <ip4_frag+0x132>
        poff = 0;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	60fb      	str	r3, [r7, #12]
        continue;
 8013b44:	e041      	b.n	8013bca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013b46:	f7ff ff0d 	bl	8013964 <ip_frag_alloc_pbuf_custom_ref>
 8013b4a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013b4c:	69bb      	ldr	r3, [r7, #24]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d103      	bne.n	8013b5a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013b52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b54:	f7f6 ff28 	bl	800a9a8 <pbuf_free>
        goto memerr;
 8013b58:	e08e      	b.n	8013c78 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013b5a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013b60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013b62:	4413      	add	r3, r2
 8013b64:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013b68:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013b6c:	9201      	str	r2, [sp, #4]
 8013b6e:	9300      	str	r3, [sp, #0]
 8013b70:	4603      	mov	r3, r0
 8013b72:	2241      	movs	r2, #65	; 0x41
 8013b74:	2000      	movs	r0, #0
 8013b76:	f7f6 fd5d 	bl	800a634 <pbuf_alloced_custom>
 8013b7a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d106      	bne.n	8013b90 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013b82:	69b8      	ldr	r0, [r7, #24]
 8013b84:	f7ff fef6 	bl	8013974 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b8a:	f7f6 ff0d 	bl	800a9a8 <pbuf_free>
        goto memerr;
 8013b8e:	e073      	b.n	8013c78 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8013b90:	68f8      	ldr	r0, [r7, #12]
 8013b92:	f7f6 ffaf 	bl	800aaf4 <pbuf_ref>
      pcr->original = p;
 8013b96:	69bb      	ldr	r3, [r7, #24]
 8013b98:	68fa      	ldr	r2, [r7, #12]
 8013b9a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013b9c:	69bb      	ldr	r3, [r7, #24]
 8013b9e:	4a3e      	ldr	r2, [pc, #248]	; (8013c98 <ip4_frag+0x284>)
 8013ba0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013ba2:	6979      	ldr	r1, [r7, #20]
 8013ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ba6:	f7f6 ffcd 	bl	800ab44 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013baa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013bae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013bb2:	1ad3      	subs	r3, r2, r3
 8013bb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013bb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d004      	beq.n	8013bca <ip4_frag+0x1b6>
        poff = 0;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013bca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d196      	bne.n	8013b00 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013bd2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013bd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013bd8:	4413      	add	r3, r2
 8013bda:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013bdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013be4:	3b14      	subs	r3, #20
 8013be6:	429a      	cmp	r2, r3
 8013be8:	bfd4      	ite	le
 8013bea:	2301      	movle	r3, #1
 8013bec:	2300      	movgt	r3, #0
 8013bee:	b2db      	uxtb	r3, r3
 8013bf0:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013bf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013bf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013bfa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013bfc:	6a3b      	ldr	r3, [r7, #32]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d002      	beq.n	8013c08 <ip4_frag+0x1f4>
 8013c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d003      	beq.n	8013c10 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013c08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013c0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013c10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7f5 fb20 	bl	8009258 <lwip_htons>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c1e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013c20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c22:	3314      	adds	r3, #20
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7f5 fb16 	bl	8009258 <lwip_htons>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	461a      	mov	r2, r3
 8013c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c32:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c36:	2200      	movs	r2, #0
 8013c38:	729a      	strb	r2, [r3, #10]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	695b      	ldr	r3, [r3, #20]
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c46:	68b8      	ldr	r0, [r7, #8]
 8013c48:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013c4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c4c:	f7f6 feac 	bl	800a9a8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013c50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013c54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c56:	1ad3      	subs	r3, r2, r3
 8013c58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013c5c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013c60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c62:	4413      	add	r3, r2
 8013c64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013c68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	f47f af1a 	bne.w	8013aa6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013c72:	2300      	movs	r3, #0
 8013c74:	e002      	b.n	8013c7c <ip4_frag+0x268>
      goto memerr;
 8013c76:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3748      	adds	r7, #72	; 0x48
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	08018520 	.word	0x08018520
 8013c88:	080186fc 	.word	0x080186fc
 8013c8c:	08018568 	.word	0x08018568
 8013c90:	08018718 	.word	0x08018718
 8013c94:	08018738 	.word	0x08018738
 8013c98:	080139ad 	.word	0x080139ad

08013c9c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b086      	sub	sp, #24
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013ca6:	230e      	movs	r3, #14
 8013ca8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	895b      	ldrh	r3, [r3, #10]
 8013cae:	2b0e      	cmp	r3, #14
 8013cb0:	d96e      	bls.n	8013d90 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	7bdb      	ldrb	r3, [r3, #15]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d106      	bne.n	8013cc8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013cc0:	3301      	adds	r3, #1
 8013cc2:	b2da      	uxtb	r2, r3
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013cce:	693b      	ldr	r3, [r7, #16]
 8013cd0:	7b1a      	ldrb	r2, [r3, #12]
 8013cd2:	7b5b      	ldrb	r3, [r3, #13]
 8013cd4:	021b      	lsls	r3, r3, #8
 8013cd6:	4313      	orrs	r3, r2
 8013cd8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	f003 0301 	and.w	r3, r3, #1
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d023      	beq.n	8013d2e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	781b      	ldrb	r3, [r3, #0]
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	d10f      	bne.n	8013d0e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013cee:	693b      	ldr	r3, [r7, #16]
 8013cf0:	785b      	ldrb	r3, [r3, #1]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d11b      	bne.n	8013d2e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013cfa:	2b5e      	cmp	r3, #94	; 0x5e
 8013cfc:	d117      	bne.n	8013d2e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	7b5b      	ldrb	r3, [r3, #13]
 8013d02:	f043 0310 	orr.w	r3, r3, #16
 8013d06:	b2da      	uxtb	r2, r3
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	735a      	strb	r2, [r3, #13]
 8013d0c:	e00f      	b.n	8013d2e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	2206      	movs	r2, #6
 8013d12:	4928      	ldr	r1, [pc, #160]	; (8013db4 <ethernet_input+0x118>)
 8013d14:	4618      	mov	r0, r3
 8013d16:	f000 fa9d 	bl	8014254 <memcmp>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d106      	bne.n	8013d2e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	7b5b      	ldrb	r3, [r3, #13]
 8013d24:	f043 0308 	orr.w	r3, r3, #8
 8013d28:	b2da      	uxtb	r2, r3
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013d2e:	89fb      	ldrh	r3, [r7, #14]
 8013d30:	2b08      	cmp	r3, #8
 8013d32:	d003      	beq.n	8013d3c <ethernet_input+0xa0>
 8013d34:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013d38:	d014      	beq.n	8013d64 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013d3a:	e032      	b.n	8013da2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d42:	f003 0308 	and.w	r3, r3, #8
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d024      	beq.n	8013d94 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013d4a:	8afb      	ldrh	r3, [r7, #22]
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f7f6 fda4 	bl	800a89c <pbuf_remove_header>
 8013d54:	4603      	mov	r3, r0
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d11e      	bne.n	8013d98 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013d5a:	6839      	ldr	r1, [r7, #0]
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f7fe ff2d 	bl	8012bbc <ip4_input>
      break;
 8013d62:	e013      	b.n	8013d8c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d6a:	f003 0308 	and.w	r3, r3, #8
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d014      	beq.n	8013d9c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013d72:	8afb      	ldrh	r3, [r7, #22]
 8013d74:	4619      	mov	r1, r3
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f7f6 fd90 	bl	800a89c <pbuf_remove_header>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d10e      	bne.n	8013da0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013d82:	6839      	ldr	r1, [r7, #0]
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f7fe f8cd 	bl	8011f24 <etharp_input>
      break;
 8013d8a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	e00c      	b.n	8013daa <ethernet_input+0x10e>
    goto free_and_return;
 8013d90:	bf00      	nop
 8013d92:	e006      	b.n	8013da2 <ethernet_input+0x106>
        goto free_and_return;
 8013d94:	bf00      	nop
 8013d96:	e004      	b.n	8013da2 <ethernet_input+0x106>
        goto free_and_return;
 8013d98:	bf00      	nop
 8013d9a:	e002      	b.n	8013da2 <ethernet_input+0x106>
        goto free_and_return;
 8013d9c:	bf00      	nop
 8013d9e:	e000      	b.n	8013da2 <ethernet_input+0x106>
        goto free_and_return;
 8013da0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f7f6 fe00 	bl	800a9a8 <pbuf_free>
  return ERR_OK;
 8013da8:	2300      	movs	r3, #0
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3718      	adds	r7, #24
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	0801890c 	.word	0x0801890c

08013db8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b086      	sub	sp, #24
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	60f8      	str	r0, [r7, #12]
 8013dc0:	60b9      	str	r1, [r7, #8]
 8013dc2:	607a      	str	r2, [r7, #4]
 8013dc4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013dc6:	8c3b      	ldrh	r3, [r7, #32]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7f5 fa45 	bl	8009258 <lwip_htons>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013dd2:	210e      	movs	r1, #14
 8013dd4:	68b8      	ldr	r0, [r7, #8]
 8013dd6:	f7f6 fd51 	bl	800a87c <pbuf_add_header>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d125      	bne.n	8013e2c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	685b      	ldr	r3, [r3, #4]
 8013de4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	8afa      	ldrh	r2, [r7, #22]
 8013dea:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	2206      	movs	r2, #6
 8013df0:	6839      	ldr	r1, [r7, #0]
 8013df2:	4618      	mov	r0, r3
 8013df4:	f000 fa3d 	bl	8014272 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	3306      	adds	r3, #6
 8013dfc:	2206      	movs	r2, #6
 8013dfe:	6879      	ldr	r1, [r7, #4]
 8013e00:	4618      	mov	r0, r3
 8013e02:	f000 fa36 	bl	8014272 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013e0c:	2b06      	cmp	r3, #6
 8013e0e:	d006      	beq.n	8013e1e <ethernet_output+0x66>
 8013e10:	4b0a      	ldr	r3, [pc, #40]	; (8013e3c <ethernet_output+0x84>)
 8013e12:	f240 1233 	movw	r2, #307	; 0x133
 8013e16:	490a      	ldr	r1, [pc, #40]	; (8013e40 <ethernet_output+0x88>)
 8013e18:	480a      	ldr	r0, [pc, #40]	; (8013e44 <ethernet_output+0x8c>)
 8013e1a:	f000 fa3d 	bl	8014298 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	699b      	ldr	r3, [r3, #24]
 8013e22:	68b9      	ldr	r1, [r7, #8]
 8013e24:	68f8      	ldr	r0, [r7, #12]
 8013e26:	4798      	blx	r3
 8013e28:	4603      	mov	r3, r0
 8013e2a:	e002      	b.n	8013e32 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013e2c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013e2e:	f06f 0301 	mvn.w	r3, #1
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3718      	adds	r7, #24
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	08018748 	.word	0x08018748
 8013e40:	08018780 	.word	0x08018780
 8013e44:	080187b4 	.word	0x080187b4

08013e48 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b086      	sub	sp, #24
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
 8013e50:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	60bb      	str	r3, [r7, #8]
 8013e56:	2304      	movs	r3, #4
 8013e58:	60fb      	str	r3, [r7, #12]
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	613b      	str	r3, [r7, #16]
 8013e5e:	2300      	movs	r3, #0
 8013e60:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013e62:	f107 0308 	add.w	r3, r7, #8
 8013e66:	2100      	movs	r1, #0
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7f0 f95e 	bl	800412a <osMessageCreate>
 8013e6e:	4602      	mov	r2, r0
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d102      	bne.n	8013e82 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e80:	e000      	b.n	8013e84 <sys_mbox_new+0x3c>

  return ERR_OK;
 8013e82:	2300      	movs	r3, #0
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3718      	adds	r7, #24
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}

08013e8c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b082      	sub	sp, #8
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7f0 fa23 	bl	80042e4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7f0 fa34 	bl	8004310 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8013ea8:	bf00      	nop
 8013eaa:	3708      	adds	r7, #8
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}

08013eb0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b084      	sub	sp, #16
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
 8013eb8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	6839      	ldr	r1, [r7, #0]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7f0 f95a 	bl	800417c <osMessagePut>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d102      	bne.n	8013ed4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8013ece:	2300      	movs	r3, #0
 8013ed0:	73fb      	strb	r3, [r7, #15]
 8013ed2:	e001      	b.n	8013ed8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013ed4:	23ff      	movs	r3, #255	; 0xff
 8013ed6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3710      	adds	r7, #16
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}

08013ee4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b08c      	sub	sp, #48	; 0x30
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	61f8      	str	r0, [r7, #28]
 8013eec:	61b9      	str	r1, [r7, #24]
 8013eee:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8013ef0:	f7ef ff43 	bl	8003d7a <osKernelSysTick>
 8013ef4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013ef6:	697b      	ldr	r3, [r7, #20]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d017      	beq.n	8013f2c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8013efc:	69fb      	ldr	r3, [r7, #28]
 8013efe:	6819      	ldr	r1, [r3, #0]
 8013f00:	f107 0320 	add.w	r3, r7, #32
 8013f04:	697a      	ldr	r2, [r7, #20]
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7f0 f978 	bl	80041fc <osMessageGet>

    if(event.status == osEventMessage)
 8013f0c:	6a3b      	ldr	r3, [r7, #32]
 8013f0e:	2b10      	cmp	r3, #16
 8013f10:	d109      	bne.n	8013f26 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f14:	461a      	mov	r2, r3
 8013f16:	69bb      	ldr	r3, [r7, #24]
 8013f18:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8013f1a:	f7ef ff2e 	bl	8003d7a <osKernelSysTick>
 8013f1e:	4602      	mov	r2, r0
 8013f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f22:	1ad3      	subs	r3, r2, r3
 8013f24:	e019      	b.n	8013f5a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013f26:	f04f 33ff 	mov.w	r3, #4294967295
 8013f2a:	e016      	b.n	8013f5a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8013f2c:	69fb      	ldr	r3, [r7, #28]
 8013f2e:	6819      	ldr	r1, [r3, #0]
 8013f30:	463b      	mov	r3, r7
 8013f32:	f04f 32ff 	mov.w	r2, #4294967295
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7f0 f960 	bl	80041fc <osMessageGet>
 8013f3c:	f107 0320 	add.w	r3, r7, #32
 8013f40:	463a      	mov	r2, r7
 8013f42:	ca07      	ldmia	r2, {r0, r1, r2}
 8013f44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	69bb      	ldr	r3, [r7, #24]
 8013f4e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013f50:	f7ef ff13 	bl	8003d7a <osKernelSysTick>
 8013f54:	4602      	mov	r2, r0
 8013f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f58:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3730      	adds	r7, #48	; 0x30
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}

08013f62 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b086      	sub	sp, #24
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
 8013f6a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	6819      	ldr	r1, [r3, #0]
 8013f70:	f107 030c 	add.w	r3, r7, #12
 8013f74:	2200      	movs	r2, #0
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7f0 f940 	bl	80041fc <osMessageGet>

  if(event.status == osEventMessage)
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	2b10      	cmp	r3, #16
 8013f80:	d105      	bne.n	8013f8e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	461a      	mov	r2, r3
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	e001      	b.n	8013f92 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8013f8e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3718      	adds	r7, #24
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}

08013f9a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013f9a:	b480      	push	{r7}
 8013f9c:	b083      	sub	sp, #12
 8013f9e:	af00      	add	r7, sp, #0
 8013fa0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d101      	bne.n	8013fae <sys_mbox_valid+0x14>
    return 0;
 8013faa:	2300      	movs	r3, #0
 8013fac:	e000      	b.n	8013fb0 <sys_mbox_valid+0x16>
  else
    return 1;
 8013fae:	2301      	movs	r3, #1
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	370c      	adds	r7, #12
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fba:	4770      	bx	lr

08013fbc <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	b083      	sub	sp, #12
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	601a      	str	r2, [r3, #0]
}
 8013fca:	bf00      	nop
 8013fcc:	370c      	adds	r7, #12
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd4:	4770      	bx	lr

08013fd6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8013fd6:	b580      	push	{r7, lr}
 8013fd8:	b084      	sub	sp, #16
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	6078      	str	r0, [r7, #4]
 8013fde:	460b      	mov	r3, r1
 8013fe0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	60bb      	str	r3, [r7, #8]
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8013fea:	f107 0308 	add.w	r3, r7, #8
 8013fee:	2101      	movs	r1, #1
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f7ef ffcf 	bl	8003f94 <osSemaphoreCreate>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d102      	bne.n	801400a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014004:	f04f 33ff 	mov.w	r3, #4294967295
 8014008:	e009      	b.n	801401e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801400a:	78fb      	ldrb	r3, [r7, #3]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d105      	bne.n	801401c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	2100      	movs	r1, #0
 8014016:	4618      	mov	r0, r3
 8014018:	f7ef fff0 	bl	8003ffc <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801401c:	2300      	movs	r3, #0
}
 801401e:	4618      	mov	r0, r3
 8014020:	3710      	adds	r7, #16
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}

08014026 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014026:	b580      	push	{r7, lr}
 8014028:	b084      	sub	sp, #16
 801402a:	af00      	add	r7, sp, #0
 801402c:	6078      	str	r0, [r7, #4]
 801402e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8014030:	f7ef fea3 	bl	8003d7a <osKernelSysTick>
 8014034:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d011      	beq.n	8014060 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	6839      	ldr	r1, [r7, #0]
 8014042:	4618      	mov	r0, r3
 8014044:	f7ef ffda 	bl	8003ffc <osSemaphoreWait>
 8014048:	4603      	mov	r3, r0
 801404a:	2b00      	cmp	r3, #0
 801404c:	d105      	bne.n	801405a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801404e:	f7ef fe94 	bl	8003d7a <osKernelSysTick>
 8014052:	4602      	mov	r2, r0
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	1ad3      	subs	r3, r2, r3
 8014058:	e012      	b.n	8014080 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801405a:	f04f 33ff 	mov.w	r3, #4294967295
 801405e:	e00f      	b.n	8014080 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8014060:	bf00      	nop
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	f04f 31ff 	mov.w	r1, #4294967295
 801406a:	4618      	mov	r0, r3
 801406c:	f7ef ffc6 	bl	8003ffc <osSemaphoreWait>
 8014070:	4603      	mov	r3, r0
 8014072:	2b00      	cmp	r3, #0
 8014074:	d1f5      	bne.n	8014062 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8014076:	f7ef fe80 	bl	8003d7a <osKernelSysTick>
 801407a:	4602      	mov	r2, r0
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014080:	4618      	mov	r0, r3
 8014082:	3710      	adds	r7, #16
 8014084:	46bd      	mov	sp, r7
 8014086:	bd80      	pop	{r7, pc}

08014088 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b082      	sub	sp, #8
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	4618      	mov	r0, r3
 8014096:	f7ef ffff 	bl	8004098 <osSemaphoreRelease>
}
 801409a:	bf00      	nop
 801409c:	3708      	adds	r7, #8
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}

080140a2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80140a2:	b580      	push	{r7, lr}
 80140a4:	b082      	sub	sp, #8
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7f0 f828 	bl	8004104 <osSemaphoreDelete>
}
 80140b4:	bf00      	nop
 80140b6:	3708      	adds	r7, #8
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80140bc:	b480      	push	{r7}
 80140be:	b083      	sub	sp, #12
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d101      	bne.n	80140d0 <sys_sem_valid+0x14>
    return 0;
 80140cc:	2300      	movs	r3, #0
 80140ce:	e000      	b.n	80140d2 <sys_sem_valid+0x16>
  else
    return 1;
 80140d0:	2301      	movs	r3, #1
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	370c      	adds	r7, #12
 80140d6:	46bd      	mov	sp, r7
 80140d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140dc:	4770      	bx	lr

080140de <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80140de:	b480      	push	{r7}
 80140e0:	b083      	sub	sp, #12
 80140e2:	af00      	add	r7, sp, #0
 80140e4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2200      	movs	r2, #0
 80140ea:	601a      	str	r2, [r3, #0]
}
 80140ec:	bf00      	nop
 80140ee:	370c      	adds	r7, #12
 80140f0:	46bd      	mov	sp, r7
 80140f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f6:	4770      	bx	lr

080140f8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80140fc:	4803      	ldr	r0, [pc, #12]	; (801410c <sys_init+0x14>)
 80140fe:	f7ef feac 	bl	8003e5a <osMutexCreate>
 8014102:	4602      	mov	r2, r0
 8014104:	4b02      	ldr	r3, [pc, #8]	; (8014110 <sys_init+0x18>)
 8014106:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014108:	bf00      	nop
 801410a:	bd80      	pop	{r7, pc}
 801410c:	0801891c 	.word	0x0801891c
 8014110:	2000acdc 	.word	0x2000acdc

08014114 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014114:	b580      	push	{r7, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801411c:	2300      	movs	r3, #0
 801411e:	60bb      	str	r3, [r7, #8]
 8014120:	2300      	movs	r3, #0
 8014122:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014124:	f107 0308 	add.w	r3, r7, #8
 8014128:	4618      	mov	r0, r3
 801412a:	f7ef fe96 	bl	8003e5a <osMutexCreate>
 801412e:	4602      	mov	r2, r0
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d102      	bne.n	8014142 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801413c:	f04f 33ff 	mov.w	r3, #4294967295
 8014140:	e000      	b.n	8014144 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014142:	2300      	movs	r3, #0
}
 8014144:	4618      	mov	r0, r3
 8014146:	3710      	adds	r7, #16
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}

0801414c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	f04f 31ff 	mov.w	r1, #4294967295
 801415c:	4618      	mov	r0, r3
 801415e:	f7ef fe95 	bl	8003e8c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014162:	bf00      	nop
 8014164:	3708      	adds	r7, #8
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}

0801416a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801416a:	b580      	push	{r7, lr}
 801416c:	b082      	sub	sp, #8
 801416e:	af00      	add	r7, sp, #0
 8014170:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	4618      	mov	r0, r3
 8014178:	f7ef fed6 	bl	8003f28 <osMutexRelease>
}
 801417c:	bf00      	nop
 801417e:	3708      	adds	r7, #8
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b08c      	sub	sp, #48	; 0x30
 8014188:	af00      	add	r7, sp, #0
 801418a:	60f8      	str	r0, [r7, #12]
 801418c:	60b9      	str	r1, [r7, #8]
 801418e:	607a      	str	r2, [r7, #4]
 8014190:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014192:	f107 0314 	add.w	r3, r7, #20
 8014196:	2200      	movs	r2, #0
 8014198:	601a      	str	r2, [r3, #0]
 801419a:	605a      	str	r2, [r3, #4]
 801419c:	609a      	str	r2, [r3, #8]
 801419e:	60da      	str	r2, [r3, #12]
 80141a0:	611a      	str	r2, [r3, #16]
 80141a2:	615a      	str	r2, [r3, #20]
 80141a4:	619a      	str	r2, [r3, #24]
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	617b      	str	r3, [r7, #20]
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	61bb      	str	r3, [r7, #24]
 80141ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b0:	b21b      	sxth	r3, r3
 80141b2:	83bb      	strh	r3, [r7, #28]
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80141b8:	f107 0314 	add.w	r3, r7, #20
 80141bc:	6879      	ldr	r1, [r7, #4]
 80141be:	4618      	mov	r0, r3
 80141c0:	f7ef fdeb 	bl	8003d9a <osThreadCreate>
 80141c4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3730      	adds	r7, #48	; 0x30
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}
	...

080141d0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80141d4:	4b04      	ldr	r3, [pc, #16]	; (80141e8 <sys_arch_protect+0x18>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	f04f 31ff 	mov.w	r1, #4294967295
 80141dc:	4618      	mov	r0, r3
 80141de:	f7ef fe55 	bl	8003e8c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80141e2:	2301      	movs	r3, #1
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	bd80      	pop	{r7, pc}
 80141e8:	2000acdc 	.word	0x2000acdc

080141ec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80141f4:	4b04      	ldr	r3, [pc, #16]	; (8014208 <sys_arch_unprotect+0x1c>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7ef fe95 	bl	8003f28 <osMutexRelease>
}
 80141fe:	bf00      	nop
 8014200:	3708      	adds	r7, #8
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}
 8014206:	bf00      	nop
 8014208:	2000acdc 	.word	0x2000acdc

0801420c <__libc_init_array>:
 801420c:	b570      	push	{r4, r5, r6, lr}
 801420e:	4e0d      	ldr	r6, [pc, #52]	; (8014244 <__libc_init_array+0x38>)
 8014210:	4c0d      	ldr	r4, [pc, #52]	; (8014248 <__libc_init_array+0x3c>)
 8014212:	1ba4      	subs	r4, r4, r6
 8014214:	10a4      	asrs	r4, r4, #2
 8014216:	2500      	movs	r5, #0
 8014218:	42a5      	cmp	r5, r4
 801421a:	d109      	bne.n	8014230 <__libc_init_array+0x24>
 801421c:	4e0b      	ldr	r6, [pc, #44]	; (801424c <__libc_init_array+0x40>)
 801421e:	4c0c      	ldr	r4, [pc, #48]	; (8014250 <__libc_init_array+0x44>)
 8014220:	f000 ffbe 	bl	80151a0 <_init>
 8014224:	1ba4      	subs	r4, r4, r6
 8014226:	10a4      	asrs	r4, r4, #2
 8014228:	2500      	movs	r5, #0
 801422a:	42a5      	cmp	r5, r4
 801422c:	d105      	bne.n	801423a <__libc_init_array+0x2e>
 801422e:	bd70      	pop	{r4, r5, r6, pc}
 8014230:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014234:	4798      	blx	r3
 8014236:	3501      	adds	r5, #1
 8014238:	e7ee      	b.n	8014218 <__libc_init_array+0xc>
 801423a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801423e:	4798      	blx	r3
 8014240:	3501      	adds	r5, #1
 8014242:	e7f2      	b.n	801422a <__libc_init_array+0x1e>
 8014244:	080189c4 	.word	0x080189c4
 8014248:	080189c4 	.word	0x080189c4
 801424c:	080189c4 	.word	0x080189c4
 8014250:	080189c8 	.word	0x080189c8

08014254 <memcmp>:
 8014254:	b530      	push	{r4, r5, lr}
 8014256:	2400      	movs	r4, #0
 8014258:	42a2      	cmp	r2, r4
 801425a:	d101      	bne.n	8014260 <memcmp+0xc>
 801425c:	2000      	movs	r0, #0
 801425e:	e007      	b.n	8014270 <memcmp+0x1c>
 8014260:	5d03      	ldrb	r3, [r0, r4]
 8014262:	3401      	adds	r4, #1
 8014264:	190d      	adds	r5, r1, r4
 8014266:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801426a:	42ab      	cmp	r3, r5
 801426c:	d0f4      	beq.n	8014258 <memcmp+0x4>
 801426e:	1b58      	subs	r0, r3, r5
 8014270:	bd30      	pop	{r4, r5, pc}

08014272 <memcpy>:
 8014272:	b510      	push	{r4, lr}
 8014274:	1e43      	subs	r3, r0, #1
 8014276:	440a      	add	r2, r1
 8014278:	4291      	cmp	r1, r2
 801427a:	d100      	bne.n	801427e <memcpy+0xc>
 801427c:	bd10      	pop	{r4, pc}
 801427e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014286:	e7f7      	b.n	8014278 <memcpy+0x6>

08014288 <memset>:
 8014288:	4402      	add	r2, r0
 801428a:	4603      	mov	r3, r0
 801428c:	4293      	cmp	r3, r2
 801428e:	d100      	bne.n	8014292 <memset+0xa>
 8014290:	4770      	bx	lr
 8014292:	f803 1b01 	strb.w	r1, [r3], #1
 8014296:	e7f9      	b.n	801428c <memset+0x4>

08014298 <iprintf>:
 8014298:	b40f      	push	{r0, r1, r2, r3}
 801429a:	4b0a      	ldr	r3, [pc, #40]	; (80142c4 <iprintf+0x2c>)
 801429c:	b513      	push	{r0, r1, r4, lr}
 801429e:	681c      	ldr	r4, [r3, #0]
 80142a0:	b124      	cbz	r4, 80142ac <iprintf+0x14>
 80142a2:	69a3      	ldr	r3, [r4, #24]
 80142a4:	b913      	cbnz	r3, 80142ac <iprintf+0x14>
 80142a6:	4620      	mov	r0, r4
 80142a8:	f000 fa56 	bl	8014758 <__sinit>
 80142ac:	ab05      	add	r3, sp, #20
 80142ae:	9a04      	ldr	r2, [sp, #16]
 80142b0:	68a1      	ldr	r1, [r4, #8]
 80142b2:	9301      	str	r3, [sp, #4]
 80142b4:	4620      	mov	r0, r4
 80142b6:	f000 fc17 	bl	8014ae8 <_vfiprintf_r>
 80142ba:	b002      	add	sp, #8
 80142bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142c0:	b004      	add	sp, #16
 80142c2:	4770      	bx	lr
 80142c4:	2000001c 	.word	0x2000001c

080142c8 <_puts_r>:
 80142c8:	b570      	push	{r4, r5, r6, lr}
 80142ca:	460e      	mov	r6, r1
 80142cc:	4605      	mov	r5, r0
 80142ce:	b118      	cbz	r0, 80142d8 <_puts_r+0x10>
 80142d0:	6983      	ldr	r3, [r0, #24]
 80142d2:	b90b      	cbnz	r3, 80142d8 <_puts_r+0x10>
 80142d4:	f000 fa40 	bl	8014758 <__sinit>
 80142d8:	69ab      	ldr	r3, [r5, #24]
 80142da:	68ac      	ldr	r4, [r5, #8]
 80142dc:	b913      	cbnz	r3, 80142e4 <_puts_r+0x1c>
 80142de:	4628      	mov	r0, r5
 80142e0:	f000 fa3a 	bl	8014758 <__sinit>
 80142e4:	4b23      	ldr	r3, [pc, #140]	; (8014374 <_puts_r+0xac>)
 80142e6:	429c      	cmp	r4, r3
 80142e8:	d117      	bne.n	801431a <_puts_r+0x52>
 80142ea:	686c      	ldr	r4, [r5, #4]
 80142ec:	89a3      	ldrh	r3, [r4, #12]
 80142ee:	071b      	lsls	r3, r3, #28
 80142f0:	d51d      	bpl.n	801432e <_puts_r+0x66>
 80142f2:	6923      	ldr	r3, [r4, #16]
 80142f4:	b1db      	cbz	r3, 801432e <_puts_r+0x66>
 80142f6:	3e01      	subs	r6, #1
 80142f8:	68a3      	ldr	r3, [r4, #8]
 80142fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80142fe:	3b01      	subs	r3, #1
 8014300:	60a3      	str	r3, [r4, #8]
 8014302:	b9e9      	cbnz	r1, 8014340 <_puts_r+0x78>
 8014304:	2b00      	cmp	r3, #0
 8014306:	da2e      	bge.n	8014366 <_puts_r+0x9e>
 8014308:	4622      	mov	r2, r4
 801430a:	210a      	movs	r1, #10
 801430c:	4628      	mov	r0, r5
 801430e:	f000 f873 	bl	80143f8 <__swbuf_r>
 8014312:	3001      	adds	r0, #1
 8014314:	d011      	beq.n	801433a <_puts_r+0x72>
 8014316:	200a      	movs	r0, #10
 8014318:	e011      	b.n	801433e <_puts_r+0x76>
 801431a:	4b17      	ldr	r3, [pc, #92]	; (8014378 <_puts_r+0xb0>)
 801431c:	429c      	cmp	r4, r3
 801431e:	d101      	bne.n	8014324 <_puts_r+0x5c>
 8014320:	68ac      	ldr	r4, [r5, #8]
 8014322:	e7e3      	b.n	80142ec <_puts_r+0x24>
 8014324:	4b15      	ldr	r3, [pc, #84]	; (801437c <_puts_r+0xb4>)
 8014326:	429c      	cmp	r4, r3
 8014328:	bf08      	it	eq
 801432a:	68ec      	ldreq	r4, [r5, #12]
 801432c:	e7de      	b.n	80142ec <_puts_r+0x24>
 801432e:	4621      	mov	r1, r4
 8014330:	4628      	mov	r0, r5
 8014332:	f000 f8b3 	bl	801449c <__swsetup_r>
 8014336:	2800      	cmp	r0, #0
 8014338:	d0dd      	beq.n	80142f6 <_puts_r+0x2e>
 801433a:	f04f 30ff 	mov.w	r0, #4294967295
 801433e:	bd70      	pop	{r4, r5, r6, pc}
 8014340:	2b00      	cmp	r3, #0
 8014342:	da04      	bge.n	801434e <_puts_r+0x86>
 8014344:	69a2      	ldr	r2, [r4, #24]
 8014346:	429a      	cmp	r2, r3
 8014348:	dc06      	bgt.n	8014358 <_puts_r+0x90>
 801434a:	290a      	cmp	r1, #10
 801434c:	d004      	beq.n	8014358 <_puts_r+0x90>
 801434e:	6823      	ldr	r3, [r4, #0]
 8014350:	1c5a      	adds	r2, r3, #1
 8014352:	6022      	str	r2, [r4, #0]
 8014354:	7019      	strb	r1, [r3, #0]
 8014356:	e7cf      	b.n	80142f8 <_puts_r+0x30>
 8014358:	4622      	mov	r2, r4
 801435a:	4628      	mov	r0, r5
 801435c:	f000 f84c 	bl	80143f8 <__swbuf_r>
 8014360:	3001      	adds	r0, #1
 8014362:	d1c9      	bne.n	80142f8 <_puts_r+0x30>
 8014364:	e7e9      	b.n	801433a <_puts_r+0x72>
 8014366:	6823      	ldr	r3, [r4, #0]
 8014368:	200a      	movs	r0, #10
 801436a:	1c5a      	adds	r2, r3, #1
 801436c:	6022      	str	r2, [r4, #0]
 801436e:	7018      	strb	r0, [r3, #0]
 8014370:	e7e5      	b.n	801433e <_puts_r+0x76>
 8014372:	bf00      	nop
 8014374:	08018948 	.word	0x08018948
 8014378:	08018968 	.word	0x08018968
 801437c:	08018928 	.word	0x08018928

08014380 <puts>:
 8014380:	4b02      	ldr	r3, [pc, #8]	; (801438c <puts+0xc>)
 8014382:	4601      	mov	r1, r0
 8014384:	6818      	ldr	r0, [r3, #0]
 8014386:	f7ff bf9f 	b.w	80142c8 <_puts_r>
 801438a:	bf00      	nop
 801438c:	2000001c 	.word	0x2000001c

08014390 <rand>:
 8014390:	b538      	push	{r3, r4, r5, lr}
 8014392:	4b13      	ldr	r3, [pc, #76]	; (80143e0 <rand+0x50>)
 8014394:	681c      	ldr	r4, [r3, #0]
 8014396:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014398:	b97b      	cbnz	r3, 80143ba <rand+0x2a>
 801439a:	2018      	movs	r0, #24
 801439c:	f000 faca 	bl	8014934 <malloc>
 80143a0:	4a10      	ldr	r2, [pc, #64]	; (80143e4 <rand+0x54>)
 80143a2:	4b11      	ldr	r3, [pc, #68]	; (80143e8 <rand+0x58>)
 80143a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80143a6:	e9c0 2300 	strd	r2, r3, [r0]
 80143aa:	4b10      	ldr	r3, [pc, #64]	; (80143ec <rand+0x5c>)
 80143ac:	6083      	str	r3, [r0, #8]
 80143ae:	230b      	movs	r3, #11
 80143b0:	8183      	strh	r3, [r0, #12]
 80143b2:	2201      	movs	r2, #1
 80143b4:	2300      	movs	r3, #0
 80143b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80143ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80143bc:	480c      	ldr	r0, [pc, #48]	; (80143f0 <rand+0x60>)
 80143be:	690a      	ldr	r2, [r1, #16]
 80143c0:	694b      	ldr	r3, [r1, #20]
 80143c2:	4c0c      	ldr	r4, [pc, #48]	; (80143f4 <rand+0x64>)
 80143c4:	4350      	muls	r0, r2
 80143c6:	fb04 0003 	mla	r0, r4, r3, r0
 80143ca:	fba2 2304 	umull	r2, r3, r2, r4
 80143ce:	4403      	add	r3, r0
 80143d0:	1c54      	adds	r4, r2, #1
 80143d2:	f143 0500 	adc.w	r5, r3, #0
 80143d6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80143da:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80143de:	bd38      	pop	{r3, r4, r5, pc}
 80143e0:	2000001c 	.word	0x2000001c
 80143e4:	abcd330e 	.word	0xabcd330e
 80143e8:	e66d1234 	.word	0xe66d1234
 80143ec:	0005deec 	.word	0x0005deec
 80143f0:	5851f42d 	.word	0x5851f42d
 80143f4:	4c957f2d 	.word	0x4c957f2d

080143f8 <__swbuf_r>:
 80143f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143fa:	460e      	mov	r6, r1
 80143fc:	4614      	mov	r4, r2
 80143fe:	4605      	mov	r5, r0
 8014400:	b118      	cbz	r0, 801440a <__swbuf_r+0x12>
 8014402:	6983      	ldr	r3, [r0, #24]
 8014404:	b90b      	cbnz	r3, 801440a <__swbuf_r+0x12>
 8014406:	f000 f9a7 	bl	8014758 <__sinit>
 801440a:	4b21      	ldr	r3, [pc, #132]	; (8014490 <__swbuf_r+0x98>)
 801440c:	429c      	cmp	r4, r3
 801440e:	d12a      	bne.n	8014466 <__swbuf_r+0x6e>
 8014410:	686c      	ldr	r4, [r5, #4]
 8014412:	69a3      	ldr	r3, [r4, #24]
 8014414:	60a3      	str	r3, [r4, #8]
 8014416:	89a3      	ldrh	r3, [r4, #12]
 8014418:	071a      	lsls	r2, r3, #28
 801441a:	d52e      	bpl.n	801447a <__swbuf_r+0x82>
 801441c:	6923      	ldr	r3, [r4, #16]
 801441e:	b363      	cbz	r3, 801447a <__swbuf_r+0x82>
 8014420:	6923      	ldr	r3, [r4, #16]
 8014422:	6820      	ldr	r0, [r4, #0]
 8014424:	1ac0      	subs	r0, r0, r3
 8014426:	6963      	ldr	r3, [r4, #20]
 8014428:	b2f6      	uxtb	r6, r6
 801442a:	4283      	cmp	r3, r0
 801442c:	4637      	mov	r7, r6
 801442e:	dc04      	bgt.n	801443a <__swbuf_r+0x42>
 8014430:	4621      	mov	r1, r4
 8014432:	4628      	mov	r0, r5
 8014434:	f000 f926 	bl	8014684 <_fflush_r>
 8014438:	bb28      	cbnz	r0, 8014486 <__swbuf_r+0x8e>
 801443a:	68a3      	ldr	r3, [r4, #8]
 801443c:	3b01      	subs	r3, #1
 801443e:	60a3      	str	r3, [r4, #8]
 8014440:	6823      	ldr	r3, [r4, #0]
 8014442:	1c5a      	adds	r2, r3, #1
 8014444:	6022      	str	r2, [r4, #0]
 8014446:	701e      	strb	r6, [r3, #0]
 8014448:	6963      	ldr	r3, [r4, #20]
 801444a:	3001      	adds	r0, #1
 801444c:	4283      	cmp	r3, r0
 801444e:	d004      	beq.n	801445a <__swbuf_r+0x62>
 8014450:	89a3      	ldrh	r3, [r4, #12]
 8014452:	07db      	lsls	r3, r3, #31
 8014454:	d519      	bpl.n	801448a <__swbuf_r+0x92>
 8014456:	2e0a      	cmp	r6, #10
 8014458:	d117      	bne.n	801448a <__swbuf_r+0x92>
 801445a:	4621      	mov	r1, r4
 801445c:	4628      	mov	r0, r5
 801445e:	f000 f911 	bl	8014684 <_fflush_r>
 8014462:	b190      	cbz	r0, 801448a <__swbuf_r+0x92>
 8014464:	e00f      	b.n	8014486 <__swbuf_r+0x8e>
 8014466:	4b0b      	ldr	r3, [pc, #44]	; (8014494 <__swbuf_r+0x9c>)
 8014468:	429c      	cmp	r4, r3
 801446a:	d101      	bne.n	8014470 <__swbuf_r+0x78>
 801446c:	68ac      	ldr	r4, [r5, #8]
 801446e:	e7d0      	b.n	8014412 <__swbuf_r+0x1a>
 8014470:	4b09      	ldr	r3, [pc, #36]	; (8014498 <__swbuf_r+0xa0>)
 8014472:	429c      	cmp	r4, r3
 8014474:	bf08      	it	eq
 8014476:	68ec      	ldreq	r4, [r5, #12]
 8014478:	e7cb      	b.n	8014412 <__swbuf_r+0x1a>
 801447a:	4621      	mov	r1, r4
 801447c:	4628      	mov	r0, r5
 801447e:	f000 f80d 	bl	801449c <__swsetup_r>
 8014482:	2800      	cmp	r0, #0
 8014484:	d0cc      	beq.n	8014420 <__swbuf_r+0x28>
 8014486:	f04f 37ff 	mov.w	r7, #4294967295
 801448a:	4638      	mov	r0, r7
 801448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801448e:	bf00      	nop
 8014490:	08018948 	.word	0x08018948
 8014494:	08018968 	.word	0x08018968
 8014498:	08018928 	.word	0x08018928

0801449c <__swsetup_r>:
 801449c:	4b32      	ldr	r3, [pc, #200]	; (8014568 <__swsetup_r+0xcc>)
 801449e:	b570      	push	{r4, r5, r6, lr}
 80144a0:	681d      	ldr	r5, [r3, #0]
 80144a2:	4606      	mov	r6, r0
 80144a4:	460c      	mov	r4, r1
 80144a6:	b125      	cbz	r5, 80144b2 <__swsetup_r+0x16>
 80144a8:	69ab      	ldr	r3, [r5, #24]
 80144aa:	b913      	cbnz	r3, 80144b2 <__swsetup_r+0x16>
 80144ac:	4628      	mov	r0, r5
 80144ae:	f000 f953 	bl	8014758 <__sinit>
 80144b2:	4b2e      	ldr	r3, [pc, #184]	; (801456c <__swsetup_r+0xd0>)
 80144b4:	429c      	cmp	r4, r3
 80144b6:	d10f      	bne.n	80144d8 <__swsetup_r+0x3c>
 80144b8:	686c      	ldr	r4, [r5, #4]
 80144ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144be:	b29a      	uxth	r2, r3
 80144c0:	0715      	lsls	r5, r2, #28
 80144c2:	d42c      	bmi.n	801451e <__swsetup_r+0x82>
 80144c4:	06d0      	lsls	r0, r2, #27
 80144c6:	d411      	bmi.n	80144ec <__swsetup_r+0x50>
 80144c8:	2209      	movs	r2, #9
 80144ca:	6032      	str	r2, [r6, #0]
 80144cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144d0:	81a3      	strh	r3, [r4, #12]
 80144d2:	f04f 30ff 	mov.w	r0, #4294967295
 80144d6:	e03e      	b.n	8014556 <__swsetup_r+0xba>
 80144d8:	4b25      	ldr	r3, [pc, #148]	; (8014570 <__swsetup_r+0xd4>)
 80144da:	429c      	cmp	r4, r3
 80144dc:	d101      	bne.n	80144e2 <__swsetup_r+0x46>
 80144de:	68ac      	ldr	r4, [r5, #8]
 80144e0:	e7eb      	b.n	80144ba <__swsetup_r+0x1e>
 80144e2:	4b24      	ldr	r3, [pc, #144]	; (8014574 <__swsetup_r+0xd8>)
 80144e4:	429c      	cmp	r4, r3
 80144e6:	bf08      	it	eq
 80144e8:	68ec      	ldreq	r4, [r5, #12]
 80144ea:	e7e6      	b.n	80144ba <__swsetup_r+0x1e>
 80144ec:	0751      	lsls	r1, r2, #29
 80144ee:	d512      	bpl.n	8014516 <__swsetup_r+0x7a>
 80144f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144f2:	b141      	cbz	r1, 8014506 <__swsetup_r+0x6a>
 80144f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144f8:	4299      	cmp	r1, r3
 80144fa:	d002      	beq.n	8014502 <__swsetup_r+0x66>
 80144fc:	4630      	mov	r0, r6
 80144fe:	f000 fa21 	bl	8014944 <_free_r>
 8014502:	2300      	movs	r3, #0
 8014504:	6363      	str	r3, [r4, #52]	; 0x34
 8014506:	89a3      	ldrh	r3, [r4, #12]
 8014508:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801450c:	81a3      	strh	r3, [r4, #12]
 801450e:	2300      	movs	r3, #0
 8014510:	6063      	str	r3, [r4, #4]
 8014512:	6923      	ldr	r3, [r4, #16]
 8014514:	6023      	str	r3, [r4, #0]
 8014516:	89a3      	ldrh	r3, [r4, #12]
 8014518:	f043 0308 	orr.w	r3, r3, #8
 801451c:	81a3      	strh	r3, [r4, #12]
 801451e:	6923      	ldr	r3, [r4, #16]
 8014520:	b94b      	cbnz	r3, 8014536 <__swsetup_r+0x9a>
 8014522:	89a3      	ldrh	r3, [r4, #12]
 8014524:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801452c:	d003      	beq.n	8014536 <__swsetup_r+0x9a>
 801452e:	4621      	mov	r1, r4
 8014530:	4630      	mov	r0, r6
 8014532:	f000 f9bf 	bl	80148b4 <__smakebuf_r>
 8014536:	89a2      	ldrh	r2, [r4, #12]
 8014538:	f012 0301 	ands.w	r3, r2, #1
 801453c:	d00c      	beq.n	8014558 <__swsetup_r+0xbc>
 801453e:	2300      	movs	r3, #0
 8014540:	60a3      	str	r3, [r4, #8]
 8014542:	6963      	ldr	r3, [r4, #20]
 8014544:	425b      	negs	r3, r3
 8014546:	61a3      	str	r3, [r4, #24]
 8014548:	6923      	ldr	r3, [r4, #16]
 801454a:	b953      	cbnz	r3, 8014562 <__swsetup_r+0xc6>
 801454c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014550:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014554:	d1ba      	bne.n	80144cc <__swsetup_r+0x30>
 8014556:	bd70      	pop	{r4, r5, r6, pc}
 8014558:	0792      	lsls	r2, r2, #30
 801455a:	bf58      	it	pl
 801455c:	6963      	ldrpl	r3, [r4, #20]
 801455e:	60a3      	str	r3, [r4, #8]
 8014560:	e7f2      	b.n	8014548 <__swsetup_r+0xac>
 8014562:	2000      	movs	r0, #0
 8014564:	e7f7      	b.n	8014556 <__swsetup_r+0xba>
 8014566:	bf00      	nop
 8014568:	2000001c 	.word	0x2000001c
 801456c:	08018948 	.word	0x08018948
 8014570:	08018968 	.word	0x08018968
 8014574:	08018928 	.word	0x08018928

08014578 <__sflush_r>:
 8014578:	898a      	ldrh	r2, [r1, #12]
 801457a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801457e:	4605      	mov	r5, r0
 8014580:	0710      	lsls	r0, r2, #28
 8014582:	460c      	mov	r4, r1
 8014584:	d458      	bmi.n	8014638 <__sflush_r+0xc0>
 8014586:	684b      	ldr	r3, [r1, #4]
 8014588:	2b00      	cmp	r3, #0
 801458a:	dc05      	bgt.n	8014598 <__sflush_r+0x20>
 801458c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801458e:	2b00      	cmp	r3, #0
 8014590:	dc02      	bgt.n	8014598 <__sflush_r+0x20>
 8014592:	2000      	movs	r0, #0
 8014594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801459a:	2e00      	cmp	r6, #0
 801459c:	d0f9      	beq.n	8014592 <__sflush_r+0x1a>
 801459e:	2300      	movs	r3, #0
 80145a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80145a4:	682f      	ldr	r7, [r5, #0]
 80145a6:	6a21      	ldr	r1, [r4, #32]
 80145a8:	602b      	str	r3, [r5, #0]
 80145aa:	d032      	beq.n	8014612 <__sflush_r+0x9a>
 80145ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80145ae:	89a3      	ldrh	r3, [r4, #12]
 80145b0:	075a      	lsls	r2, r3, #29
 80145b2:	d505      	bpl.n	80145c0 <__sflush_r+0x48>
 80145b4:	6863      	ldr	r3, [r4, #4]
 80145b6:	1ac0      	subs	r0, r0, r3
 80145b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80145ba:	b10b      	cbz	r3, 80145c0 <__sflush_r+0x48>
 80145bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80145be:	1ac0      	subs	r0, r0, r3
 80145c0:	2300      	movs	r3, #0
 80145c2:	4602      	mov	r2, r0
 80145c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145c6:	6a21      	ldr	r1, [r4, #32]
 80145c8:	4628      	mov	r0, r5
 80145ca:	47b0      	blx	r6
 80145cc:	1c43      	adds	r3, r0, #1
 80145ce:	89a3      	ldrh	r3, [r4, #12]
 80145d0:	d106      	bne.n	80145e0 <__sflush_r+0x68>
 80145d2:	6829      	ldr	r1, [r5, #0]
 80145d4:	291d      	cmp	r1, #29
 80145d6:	d848      	bhi.n	801466a <__sflush_r+0xf2>
 80145d8:	4a29      	ldr	r2, [pc, #164]	; (8014680 <__sflush_r+0x108>)
 80145da:	40ca      	lsrs	r2, r1
 80145dc:	07d6      	lsls	r6, r2, #31
 80145de:	d544      	bpl.n	801466a <__sflush_r+0xf2>
 80145e0:	2200      	movs	r2, #0
 80145e2:	6062      	str	r2, [r4, #4]
 80145e4:	04d9      	lsls	r1, r3, #19
 80145e6:	6922      	ldr	r2, [r4, #16]
 80145e8:	6022      	str	r2, [r4, #0]
 80145ea:	d504      	bpl.n	80145f6 <__sflush_r+0x7e>
 80145ec:	1c42      	adds	r2, r0, #1
 80145ee:	d101      	bne.n	80145f4 <__sflush_r+0x7c>
 80145f0:	682b      	ldr	r3, [r5, #0]
 80145f2:	b903      	cbnz	r3, 80145f6 <__sflush_r+0x7e>
 80145f4:	6560      	str	r0, [r4, #84]	; 0x54
 80145f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145f8:	602f      	str	r7, [r5, #0]
 80145fa:	2900      	cmp	r1, #0
 80145fc:	d0c9      	beq.n	8014592 <__sflush_r+0x1a>
 80145fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014602:	4299      	cmp	r1, r3
 8014604:	d002      	beq.n	801460c <__sflush_r+0x94>
 8014606:	4628      	mov	r0, r5
 8014608:	f000 f99c 	bl	8014944 <_free_r>
 801460c:	2000      	movs	r0, #0
 801460e:	6360      	str	r0, [r4, #52]	; 0x34
 8014610:	e7c0      	b.n	8014594 <__sflush_r+0x1c>
 8014612:	2301      	movs	r3, #1
 8014614:	4628      	mov	r0, r5
 8014616:	47b0      	blx	r6
 8014618:	1c41      	adds	r1, r0, #1
 801461a:	d1c8      	bne.n	80145ae <__sflush_r+0x36>
 801461c:	682b      	ldr	r3, [r5, #0]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d0c5      	beq.n	80145ae <__sflush_r+0x36>
 8014622:	2b1d      	cmp	r3, #29
 8014624:	d001      	beq.n	801462a <__sflush_r+0xb2>
 8014626:	2b16      	cmp	r3, #22
 8014628:	d101      	bne.n	801462e <__sflush_r+0xb6>
 801462a:	602f      	str	r7, [r5, #0]
 801462c:	e7b1      	b.n	8014592 <__sflush_r+0x1a>
 801462e:	89a3      	ldrh	r3, [r4, #12]
 8014630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014634:	81a3      	strh	r3, [r4, #12]
 8014636:	e7ad      	b.n	8014594 <__sflush_r+0x1c>
 8014638:	690f      	ldr	r7, [r1, #16]
 801463a:	2f00      	cmp	r7, #0
 801463c:	d0a9      	beq.n	8014592 <__sflush_r+0x1a>
 801463e:	0793      	lsls	r3, r2, #30
 8014640:	680e      	ldr	r6, [r1, #0]
 8014642:	bf08      	it	eq
 8014644:	694b      	ldreq	r3, [r1, #20]
 8014646:	600f      	str	r7, [r1, #0]
 8014648:	bf18      	it	ne
 801464a:	2300      	movne	r3, #0
 801464c:	eba6 0807 	sub.w	r8, r6, r7
 8014650:	608b      	str	r3, [r1, #8]
 8014652:	f1b8 0f00 	cmp.w	r8, #0
 8014656:	dd9c      	ble.n	8014592 <__sflush_r+0x1a>
 8014658:	4643      	mov	r3, r8
 801465a:	463a      	mov	r2, r7
 801465c:	6a21      	ldr	r1, [r4, #32]
 801465e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014660:	4628      	mov	r0, r5
 8014662:	47b0      	blx	r6
 8014664:	2800      	cmp	r0, #0
 8014666:	dc06      	bgt.n	8014676 <__sflush_r+0xfe>
 8014668:	89a3      	ldrh	r3, [r4, #12]
 801466a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801466e:	81a3      	strh	r3, [r4, #12]
 8014670:	f04f 30ff 	mov.w	r0, #4294967295
 8014674:	e78e      	b.n	8014594 <__sflush_r+0x1c>
 8014676:	4407      	add	r7, r0
 8014678:	eba8 0800 	sub.w	r8, r8, r0
 801467c:	e7e9      	b.n	8014652 <__sflush_r+0xda>
 801467e:	bf00      	nop
 8014680:	20400001 	.word	0x20400001

08014684 <_fflush_r>:
 8014684:	b538      	push	{r3, r4, r5, lr}
 8014686:	690b      	ldr	r3, [r1, #16]
 8014688:	4605      	mov	r5, r0
 801468a:	460c      	mov	r4, r1
 801468c:	b1db      	cbz	r3, 80146c6 <_fflush_r+0x42>
 801468e:	b118      	cbz	r0, 8014698 <_fflush_r+0x14>
 8014690:	6983      	ldr	r3, [r0, #24]
 8014692:	b90b      	cbnz	r3, 8014698 <_fflush_r+0x14>
 8014694:	f000 f860 	bl	8014758 <__sinit>
 8014698:	4b0c      	ldr	r3, [pc, #48]	; (80146cc <_fflush_r+0x48>)
 801469a:	429c      	cmp	r4, r3
 801469c:	d109      	bne.n	80146b2 <_fflush_r+0x2e>
 801469e:	686c      	ldr	r4, [r5, #4]
 80146a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146a4:	b17b      	cbz	r3, 80146c6 <_fflush_r+0x42>
 80146a6:	4621      	mov	r1, r4
 80146a8:	4628      	mov	r0, r5
 80146aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146ae:	f7ff bf63 	b.w	8014578 <__sflush_r>
 80146b2:	4b07      	ldr	r3, [pc, #28]	; (80146d0 <_fflush_r+0x4c>)
 80146b4:	429c      	cmp	r4, r3
 80146b6:	d101      	bne.n	80146bc <_fflush_r+0x38>
 80146b8:	68ac      	ldr	r4, [r5, #8]
 80146ba:	e7f1      	b.n	80146a0 <_fflush_r+0x1c>
 80146bc:	4b05      	ldr	r3, [pc, #20]	; (80146d4 <_fflush_r+0x50>)
 80146be:	429c      	cmp	r4, r3
 80146c0:	bf08      	it	eq
 80146c2:	68ec      	ldreq	r4, [r5, #12]
 80146c4:	e7ec      	b.n	80146a0 <_fflush_r+0x1c>
 80146c6:	2000      	movs	r0, #0
 80146c8:	bd38      	pop	{r3, r4, r5, pc}
 80146ca:	bf00      	nop
 80146cc:	08018948 	.word	0x08018948
 80146d0:	08018968 	.word	0x08018968
 80146d4:	08018928 	.word	0x08018928

080146d8 <std>:
 80146d8:	2300      	movs	r3, #0
 80146da:	b510      	push	{r4, lr}
 80146dc:	4604      	mov	r4, r0
 80146de:	e9c0 3300 	strd	r3, r3, [r0]
 80146e2:	6083      	str	r3, [r0, #8]
 80146e4:	8181      	strh	r1, [r0, #12]
 80146e6:	6643      	str	r3, [r0, #100]	; 0x64
 80146e8:	81c2      	strh	r2, [r0, #14]
 80146ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80146ee:	6183      	str	r3, [r0, #24]
 80146f0:	4619      	mov	r1, r3
 80146f2:	2208      	movs	r2, #8
 80146f4:	305c      	adds	r0, #92	; 0x5c
 80146f6:	f7ff fdc7 	bl	8014288 <memset>
 80146fa:	4b05      	ldr	r3, [pc, #20]	; (8014710 <std+0x38>)
 80146fc:	6263      	str	r3, [r4, #36]	; 0x24
 80146fe:	4b05      	ldr	r3, [pc, #20]	; (8014714 <std+0x3c>)
 8014700:	62a3      	str	r3, [r4, #40]	; 0x28
 8014702:	4b05      	ldr	r3, [pc, #20]	; (8014718 <std+0x40>)
 8014704:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014706:	4b05      	ldr	r3, [pc, #20]	; (801471c <std+0x44>)
 8014708:	6224      	str	r4, [r4, #32]
 801470a:	6323      	str	r3, [r4, #48]	; 0x30
 801470c:	bd10      	pop	{r4, pc}
 801470e:	bf00      	nop
 8014710:	08015045 	.word	0x08015045
 8014714:	08015067 	.word	0x08015067
 8014718:	0801509f 	.word	0x0801509f
 801471c:	080150c3 	.word	0x080150c3

08014720 <_cleanup_r>:
 8014720:	4901      	ldr	r1, [pc, #4]	; (8014728 <_cleanup_r+0x8>)
 8014722:	f000 b885 	b.w	8014830 <_fwalk_reent>
 8014726:	bf00      	nop
 8014728:	08014685 	.word	0x08014685

0801472c <__sfmoreglue>:
 801472c:	b570      	push	{r4, r5, r6, lr}
 801472e:	1e4a      	subs	r2, r1, #1
 8014730:	2568      	movs	r5, #104	; 0x68
 8014732:	4355      	muls	r5, r2
 8014734:	460e      	mov	r6, r1
 8014736:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801473a:	f000 f951 	bl	80149e0 <_malloc_r>
 801473e:	4604      	mov	r4, r0
 8014740:	b140      	cbz	r0, 8014754 <__sfmoreglue+0x28>
 8014742:	2100      	movs	r1, #0
 8014744:	e9c0 1600 	strd	r1, r6, [r0]
 8014748:	300c      	adds	r0, #12
 801474a:	60a0      	str	r0, [r4, #8]
 801474c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014750:	f7ff fd9a 	bl	8014288 <memset>
 8014754:	4620      	mov	r0, r4
 8014756:	bd70      	pop	{r4, r5, r6, pc}

08014758 <__sinit>:
 8014758:	6983      	ldr	r3, [r0, #24]
 801475a:	b510      	push	{r4, lr}
 801475c:	4604      	mov	r4, r0
 801475e:	bb33      	cbnz	r3, 80147ae <__sinit+0x56>
 8014760:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014764:	6503      	str	r3, [r0, #80]	; 0x50
 8014766:	4b12      	ldr	r3, [pc, #72]	; (80147b0 <__sinit+0x58>)
 8014768:	4a12      	ldr	r2, [pc, #72]	; (80147b4 <__sinit+0x5c>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	6282      	str	r2, [r0, #40]	; 0x28
 801476e:	4298      	cmp	r0, r3
 8014770:	bf04      	itt	eq
 8014772:	2301      	moveq	r3, #1
 8014774:	6183      	streq	r3, [r0, #24]
 8014776:	f000 f81f 	bl	80147b8 <__sfp>
 801477a:	6060      	str	r0, [r4, #4]
 801477c:	4620      	mov	r0, r4
 801477e:	f000 f81b 	bl	80147b8 <__sfp>
 8014782:	60a0      	str	r0, [r4, #8]
 8014784:	4620      	mov	r0, r4
 8014786:	f000 f817 	bl	80147b8 <__sfp>
 801478a:	2200      	movs	r2, #0
 801478c:	60e0      	str	r0, [r4, #12]
 801478e:	2104      	movs	r1, #4
 8014790:	6860      	ldr	r0, [r4, #4]
 8014792:	f7ff ffa1 	bl	80146d8 <std>
 8014796:	2201      	movs	r2, #1
 8014798:	2109      	movs	r1, #9
 801479a:	68a0      	ldr	r0, [r4, #8]
 801479c:	f7ff ff9c 	bl	80146d8 <std>
 80147a0:	2202      	movs	r2, #2
 80147a2:	2112      	movs	r1, #18
 80147a4:	68e0      	ldr	r0, [r4, #12]
 80147a6:	f7ff ff97 	bl	80146d8 <std>
 80147aa:	2301      	movs	r3, #1
 80147ac:	61a3      	str	r3, [r4, #24]
 80147ae:	bd10      	pop	{r4, pc}
 80147b0:	08018924 	.word	0x08018924
 80147b4:	08014721 	.word	0x08014721

080147b8 <__sfp>:
 80147b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ba:	4b1b      	ldr	r3, [pc, #108]	; (8014828 <__sfp+0x70>)
 80147bc:	681e      	ldr	r6, [r3, #0]
 80147be:	69b3      	ldr	r3, [r6, #24]
 80147c0:	4607      	mov	r7, r0
 80147c2:	b913      	cbnz	r3, 80147ca <__sfp+0x12>
 80147c4:	4630      	mov	r0, r6
 80147c6:	f7ff ffc7 	bl	8014758 <__sinit>
 80147ca:	3648      	adds	r6, #72	; 0x48
 80147cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80147d0:	3b01      	subs	r3, #1
 80147d2:	d503      	bpl.n	80147dc <__sfp+0x24>
 80147d4:	6833      	ldr	r3, [r6, #0]
 80147d6:	b133      	cbz	r3, 80147e6 <__sfp+0x2e>
 80147d8:	6836      	ldr	r6, [r6, #0]
 80147da:	e7f7      	b.n	80147cc <__sfp+0x14>
 80147dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80147e0:	b16d      	cbz	r5, 80147fe <__sfp+0x46>
 80147e2:	3468      	adds	r4, #104	; 0x68
 80147e4:	e7f4      	b.n	80147d0 <__sfp+0x18>
 80147e6:	2104      	movs	r1, #4
 80147e8:	4638      	mov	r0, r7
 80147ea:	f7ff ff9f 	bl	801472c <__sfmoreglue>
 80147ee:	6030      	str	r0, [r6, #0]
 80147f0:	2800      	cmp	r0, #0
 80147f2:	d1f1      	bne.n	80147d8 <__sfp+0x20>
 80147f4:	230c      	movs	r3, #12
 80147f6:	603b      	str	r3, [r7, #0]
 80147f8:	4604      	mov	r4, r0
 80147fa:	4620      	mov	r0, r4
 80147fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147fe:	4b0b      	ldr	r3, [pc, #44]	; (801482c <__sfp+0x74>)
 8014800:	6665      	str	r5, [r4, #100]	; 0x64
 8014802:	e9c4 5500 	strd	r5, r5, [r4]
 8014806:	60a5      	str	r5, [r4, #8]
 8014808:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801480c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014810:	2208      	movs	r2, #8
 8014812:	4629      	mov	r1, r5
 8014814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014818:	f7ff fd36 	bl	8014288 <memset>
 801481c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014824:	e7e9      	b.n	80147fa <__sfp+0x42>
 8014826:	bf00      	nop
 8014828:	08018924 	.word	0x08018924
 801482c:	ffff0001 	.word	0xffff0001

08014830 <_fwalk_reent>:
 8014830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014834:	4680      	mov	r8, r0
 8014836:	4689      	mov	r9, r1
 8014838:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801483c:	2600      	movs	r6, #0
 801483e:	b914      	cbnz	r4, 8014846 <_fwalk_reent+0x16>
 8014840:	4630      	mov	r0, r6
 8014842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014846:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801484a:	3f01      	subs	r7, #1
 801484c:	d501      	bpl.n	8014852 <_fwalk_reent+0x22>
 801484e:	6824      	ldr	r4, [r4, #0]
 8014850:	e7f5      	b.n	801483e <_fwalk_reent+0xe>
 8014852:	89ab      	ldrh	r3, [r5, #12]
 8014854:	2b01      	cmp	r3, #1
 8014856:	d907      	bls.n	8014868 <_fwalk_reent+0x38>
 8014858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801485c:	3301      	adds	r3, #1
 801485e:	d003      	beq.n	8014868 <_fwalk_reent+0x38>
 8014860:	4629      	mov	r1, r5
 8014862:	4640      	mov	r0, r8
 8014864:	47c8      	blx	r9
 8014866:	4306      	orrs	r6, r0
 8014868:	3568      	adds	r5, #104	; 0x68
 801486a:	e7ee      	b.n	801484a <_fwalk_reent+0x1a>

0801486c <__swhatbuf_r>:
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	460e      	mov	r6, r1
 8014870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014874:	2900      	cmp	r1, #0
 8014876:	b096      	sub	sp, #88	; 0x58
 8014878:	4614      	mov	r4, r2
 801487a:	461d      	mov	r5, r3
 801487c:	da07      	bge.n	801488e <__swhatbuf_r+0x22>
 801487e:	2300      	movs	r3, #0
 8014880:	602b      	str	r3, [r5, #0]
 8014882:	89b3      	ldrh	r3, [r6, #12]
 8014884:	061a      	lsls	r2, r3, #24
 8014886:	d410      	bmi.n	80148aa <__swhatbuf_r+0x3e>
 8014888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801488c:	e00e      	b.n	80148ac <__swhatbuf_r+0x40>
 801488e:	466a      	mov	r2, sp
 8014890:	f000 fc3e 	bl	8015110 <_fstat_r>
 8014894:	2800      	cmp	r0, #0
 8014896:	dbf2      	blt.n	801487e <__swhatbuf_r+0x12>
 8014898:	9a01      	ldr	r2, [sp, #4]
 801489a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801489e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80148a2:	425a      	negs	r2, r3
 80148a4:	415a      	adcs	r2, r3
 80148a6:	602a      	str	r2, [r5, #0]
 80148a8:	e7ee      	b.n	8014888 <__swhatbuf_r+0x1c>
 80148aa:	2340      	movs	r3, #64	; 0x40
 80148ac:	2000      	movs	r0, #0
 80148ae:	6023      	str	r3, [r4, #0]
 80148b0:	b016      	add	sp, #88	; 0x58
 80148b2:	bd70      	pop	{r4, r5, r6, pc}

080148b4 <__smakebuf_r>:
 80148b4:	898b      	ldrh	r3, [r1, #12]
 80148b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80148b8:	079d      	lsls	r5, r3, #30
 80148ba:	4606      	mov	r6, r0
 80148bc:	460c      	mov	r4, r1
 80148be:	d507      	bpl.n	80148d0 <__smakebuf_r+0x1c>
 80148c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80148c4:	6023      	str	r3, [r4, #0]
 80148c6:	6123      	str	r3, [r4, #16]
 80148c8:	2301      	movs	r3, #1
 80148ca:	6163      	str	r3, [r4, #20]
 80148cc:	b002      	add	sp, #8
 80148ce:	bd70      	pop	{r4, r5, r6, pc}
 80148d0:	ab01      	add	r3, sp, #4
 80148d2:	466a      	mov	r2, sp
 80148d4:	f7ff ffca 	bl	801486c <__swhatbuf_r>
 80148d8:	9900      	ldr	r1, [sp, #0]
 80148da:	4605      	mov	r5, r0
 80148dc:	4630      	mov	r0, r6
 80148de:	f000 f87f 	bl	80149e0 <_malloc_r>
 80148e2:	b948      	cbnz	r0, 80148f8 <__smakebuf_r+0x44>
 80148e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148e8:	059a      	lsls	r2, r3, #22
 80148ea:	d4ef      	bmi.n	80148cc <__smakebuf_r+0x18>
 80148ec:	f023 0303 	bic.w	r3, r3, #3
 80148f0:	f043 0302 	orr.w	r3, r3, #2
 80148f4:	81a3      	strh	r3, [r4, #12]
 80148f6:	e7e3      	b.n	80148c0 <__smakebuf_r+0xc>
 80148f8:	4b0d      	ldr	r3, [pc, #52]	; (8014930 <__smakebuf_r+0x7c>)
 80148fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80148fc:	89a3      	ldrh	r3, [r4, #12]
 80148fe:	6020      	str	r0, [r4, #0]
 8014900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014904:	81a3      	strh	r3, [r4, #12]
 8014906:	9b00      	ldr	r3, [sp, #0]
 8014908:	6163      	str	r3, [r4, #20]
 801490a:	9b01      	ldr	r3, [sp, #4]
 801490c:	6120      	str	r0, [r4, #16]
 801490e:	b15b      	cbz	r3, 8014928 <__smakebuf_r+0x74>
 8014910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014914:	4630      	mov	r0, r6
 8014916:	f000 fc0d 	bl	8015134 <_isatty_r>
 801491a:	b128      	cbz	r0, 8014928 <__smakebuf_r+0x74>
 801491c:	89a3      	ldrh	r3, [r4, #12]
 801491e:	f023 0303 	bic.w	r3, r3, #3
 8014922:	f043 0301 	orr.w	r3, r3, #1
 8014926:	81a3      	strh	r3, [r4, #12]
 8014928:	89a3      	ldrh	r3, [r4, #12]
 801492a:	431d      	orrs	r5, r3
 801492c:	81a5      	strh	r5, [r4, #12]
 801492e:	e7cd      	b.n	80148cc <__smakebuf_r+0x18>
 8014930:	08014721 	.word	0x08014721

08014934 <malloc>:
 8014934:	4b02      	ldr	r3, [pc, #8]	; (8014940 <malloc+0xc>)
 8014936:	4601      	mov	r1, r0
 8014938:	6818      	ldr	r0, [r3, #0]
 801493a:	f000 b851 	b.w	80149e0 <_malloc_r>
 801493e:	bf00      	nop
 8014940:	2000001c 	.word	0x2000001c

08014944 <_free_r>:
 8014944:	b538      	push	{r3, r4, r5, lr}
 8014946:	4605      	mov	r5, r0
 8014948:	2900      	cmp	r1, #0
 801494a:	d045      	beq.n	80149d8 <_free_r+0x94>
 801494c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014950:	1f0c      	subs	r4, r1, #4
 8014952:	2b00      	cmp	r3, #0
 8014954:	bfb8      	it	lt
 8014956:	18e4      	addlt	r4, r4, r3
 8014958:	f000 fc0e 	bl	8015178 <__malloc_lock>
 801495c:	4a1f      	ldr	r2, [pc, #124]	; (80149dc <_free_r+0x98>)
 801495e:	6813      	ldr	r3, [r2, #0]
 8014960:	4610      	mov	r0, r2
 8014962:	b933      	cbnz	r3, 8014972 <_free_r+0x2e>
 8014964:	6063      	str	r3, [r4, #4]
 8014966:	6014      	str	r4, [r2, #0]
 8014968:	4628      	mov	r0, r5
 801496a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801496e:	f000 bc04 	b.w	801517a <__malloc_unlock>
 8014972:	42a3      	cmp	r3, r4
 8014974:	d90c      	bls.n	8014990 <_free_r+0x4c>
 8014976:	6821      	ldr	r1, [r4, #0]
 8014978:	1862      	adds	r2, r4, r1
 801497a:	4293      	cmp	r3, r2
 801497c:	bf04      	itt	eq
 801497e:	681a      	ldreq	r2, [r3, #0]
 8014980:	685b      	ldreq	r3, [r3, #4]
 8014982:	6063      	str	r3, [r4, #4]
 8014984:	bf04      	itt	eq
 8014986:	1852      	addeq	r2, r2, r1
 8014988:	6022      	streq	r2, [r4, #0]
 801498a:	6004      	str	r4, [r0, #0]
 801498c:	e7ec      	b.n	8014968 <_free_r+0x24>
 801498e:	4613      	mov	r3, r2
 8014990:	685a      	ldr	r2, [r3, #4]
 8014992:	b10a      	cbz	r2, 8014998 <_free_r+0x54>
 8014994:	42a2      	cmp	r2, r4
 8014996:	d9fa      	bls.n	801498e <_free_r+0x4a>
 8014998:	6819      	ldr	r1, [r3, #0]
 801499a:	1858      	adds	r0, r3, r1
 801499c:	42a0      	cmp	r0, r4
 801499e:	d10b      	bne.n	80149b8 <_free_r+0x74>
 80149a0:	6820      	ldr	r0, [r4, #0]
 80149a2:	4401      	add	r1, r0
 80149a4:	1858      	adds	r0, r3, r1
 80149a6:	4282      	cmp	r2, r0
 80149a8:	6019      	str	r1, [r3, #0]
 80149aa:	d1dd      	bne.n	8014968 <_free_r+0x24>
 80149ac:	6810      	ldr	r0, [r2, #0]
 80149ae:	6852      	ldr	r2, [r2, #4]
 80149b0:	605a      	str	r2, [r3, #4]
 80149b2:	4401      	add	r1, r0
 80149b4:	6019      	str	r1, [r3, #0]
 80149b6:	e7d7      	b.n	8014968 <_free_r+0x24>
 80149b8:	d902      	bls.n	80149c0 <_free_r+0x7c>
 80149ba:	230c      	movs	r3, #12
 80149bc:	602b      	str	r3, [r5, #0]
 80149be:	e7d3      	b.n	8014968 <_free_r+0x24>
 80149c0:	6820      	ldr	r0, [r4, #0]
 80149c2:	1821      	adds	r1, r4, r0
 80149c4:	428a      	cmp	r2, r1
 80149c6:	bf04      	itt	eq
 80149c8:	6811      	ldreq	r1, [r2, #0]
 80149ca:	6852      	ldreq	r2, [r2, #4]
 80149cc:	6062      	str	r2, [r4, #4]
 80149ce:	bf04      	itt	eq
 80149d0:	1809      	addeq	r1, r1, r0
 80149d2:	6021      	streq	r1, [r4, #0]
 80149d4:	605c      	str	r4, [r3, #4]
 80149d6:	e7c7      	b.n	8014968 <_free_r+0x24>
 80149d8:	bd38      	pop	{r3, r4, r5, pc}
 80149da:	bf00      	nop
 80149dc:	200043d8 	.word	0x200043d8

080149e0 <_malloc_r>:
 80149e0:	b570      	push	{r4, r5, r6, lr}
 80149e2:	1ccd      	adds	r5, r1, #3
 80149e4:	f025 0503 	bic.w	r5, r5, #3
 80149e8:	3508      	adds	r5, #8
 80149ea:	2d0c      	cmp	r5, #12
 80149ec:	bf38      	it	cc
 80149ee:	250c      	movcc	r5, #12
 80149f0:	2d00      	cmp	r5, #0
 80149f2:	4606      	mov	r6, r0
 80149f4:	db01      	blt.n	80149fa <_malloc_r+0x1a>
 80149f6:	42a9      	cmp	r1, r5
 80149f8:	d903      	bls.n	8014a02 <_malloc_r+0x22>
 80149fa:	230c      	movs	r3, #12
 80149fc:	6033      	str	r3, [r6, #0]
 80149fe:	2000      	movs	r0, #0
 8014a00:	bd70      	pop	{r4, r5, r6, pc}
 8014a02:	f000 fbb9 	bl	8015178 <__malloc_lock>
 8014a06:	4a21      	ldr	r2, [pc, #132]	; (8014a8c <_malloc_r+0xac>)
 8014a08:	6814      	ldr	r4, [r2, #0]
 8014a0a:	4621      	mov	r1, r4
 8014a0c:	b991      	cbnz	r1, 8014a34 <_malloc_r+0x54>
 8014a0e:	4c20      	ldr	r4, [pc, #128]	; (8014a90 <_malloc_r+0xb0>)
 8014a10:	6823      	ldr	r3, [r4, #0]
 8014a12:	b91b      	cbnz	r3, 8014a1c <_malloc_r+0x3c>
 8014a14:	4630      	mov	r0, r6
 8014a16:	f000 fb05 	bl	8015024 <_sbrk_r>
 8014a1a:	6020      	str	r0, [r4, #0]
 8014a1c:	4629      	mov	r1, r5
 8014a1e:	4630      	mov	r0, r6
 8014a20:	f000 fb00 	bl	8015024 <_sbrk_r>
 8014a24:	1c43      	adds	r3, r0, #1
 8014a26:	d124      	bne.n	8014a72 <_malloc_r+0x92>
 8014a28:	230c      	movs	r3, #12
 8014a2a:	6033      	str	r3, [r6, #0]
 8014a2c:	4630      	mov	r0, r6
 8014a2e:	f000 fba4 	bl	801517a <__malloc_unlock>
 8014a32:	e7e4      	b.n	80149fe <_malloc_r+0x1e>
 8014a34:	680b      	ldr	r3, [r1, #0]
 8014a36:	1b5b      	subs	r3, r3, r5
 8014a38:	d418      	bmi.n	8014a6c <_malloc_r+0x8c>
 8014a3a:	2b0b      	cmp	r3, #11
 8014a3c:	d90f      	bls.n	8014a5e <_malloc_r+0x7e>
 8014a3e:	600b      	str	r3, [r1, #0]
 8014a40:	50cd      	str	r5, [r1, r3]
 8014a42:	18cc      	adds	r4, r1, r3
 8014a44:	4630      	mov	r0, r6
 8014a46:	f000 fb98 	bl	801517a <__malloc_unlock>
 8014a4a:	f104 000b 	add.w	r0, r4, #11
 8014a4e:	1d23      	adds	r3, r4, #4
 8014a50:	f020 0007 	bic.w	r0, r0, #7
 8014a54:	1ac3      	subs	r3, r0, r3
 8014a56:	d0d3      	beq.n	8014a00 <_malloc_r+0x20>
 8014a58:	425a      	negs	r2, r3
 8014a5a:	50e2      	str	r2, [r4, r3]
 8014a5c:	e7d0      	b.n	8014a00 <_malloc_r+0x20>
 8014a5e:	428c      	cmp	r4, r1
 8014a60:	684b      	ldr	r3, [r1, #4]
 8014a62:	bf16      	itet	ne
 8014a64:	6063      	strne	r3, [r4, #4]
 8014a66:	6013      	streq	r3, [r2, #0]
 8014a68:	460c      	movne	r4, r1
 8014a6a:	e7eb      	b.n	8014a44 <_malloc_r+0x64>
 8014a6c:	460c      	mov	r4, r1
 8014a6e:	6849      	ldr	r1, [r1, #4]
 8014a70:	e7cc      	b.n	8014a0c <_malloc_r+0x2c>
 8014a72:	1cc4      	adds	r4, r0, #3
 8014a74:	f024 0403 	bic.w	r4, r4, #3
 8014a78:	42a0      	cmp	r0, r4
 8014a7a:	d005      	beq.n	8014a88 <_malloc_r+0xa8>
 8014a7c:	1a21      	subs	r1, r4, r0
 8014a7e:	4630      	mov	r0, r6
 8014a80:	f000 fad0 	bl	8015024 <_sbrk_r>
 8014a84:	3001      	adds	r0, #1
 8014a86:	d0cf      	beq.n	8014a28 <_malloc_r+0x48>
 8014a88:	6025      	str	r5, [r4, #0]
 8014a8a:	e7db      	b.n	8014a44 <_malloc_r+0x64>
 8014a8c:	200043d8 	.word	0x200043d8
 8014a90:	200043dc 	.word	0x200043dc

08014a94 <__sfputc_r>:
 8014a94:	6893      	ldr	r3, [r2, #8]
 8014a96:	3b01      	subs	r3, #1
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	b410      	push	{r4}
 8014a9c:	6093      	str	r3, [r2, #8]
 8014a9e:	da08      	bge.n	8014ab2 <__sfputc_r+0x1e>
 8014aa0:	6994      	ldr	r4, [r2, #24]
 8014aa2:	42a3      	cmp	r3, r4
 8014aa4:	db01      	blt.n	8014aaa <__sfputc_r+0x16>
 8014aa6:	290a      	cmp	r1, #10
 8014aa8:	d103      	bne.n	8014ab2 <__sfputc_r+0x1e>
 8014aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014aae:	f7ff bca3 	b.w	80143f8 <__swbuf_r>
 8014ab2:	6813      	ldr	r3, [r2, #0]
 8014ab4:	1c58      	adds	r0, r3, #1
 8014ab6:	6010      	str	r0, [r2, #0]
 8014ab8:	7019      	strb	r1, [r3, #0]
 8014aba:	4608      	mov	r0, r1
 8014abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ac0:	4770      	bx	lr

08014ac2 <__sfputs_r>:
 8014ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ac4:	4606      	mov	r6, r0
 8014ac6:	460f      	mov	r7, r1
 8014ac8:	4614      	mov	r4, r2
 8014aca:	18d5      	adds	r5, r2, r3
 8014acc:	42ac      	cmp	r4, r5
 8014ace:	d101      	bne.n	8014ad4 <__sfputs_r+0x12>
 8014ad0:	2000      	movs	r0, #0
 8014ad2:	e007      	b.n	8014ae4 <__sfputs_r+0x22>
 8014ad4:	463a      	mov	r2, r7
 8014ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ada:	4630      	mov	r0, r6
 8014adc:	f7ff ffda 	bl	8014a94 <__sfputc_r>
 8014ae0:	1c43      	adds	r3, r0, #1
 8014ae2:	d1f3      	bne.n	8014acc <__sfputs_r+0xa>
 8014ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ae8 <_vfiprintf_r>:
 8014ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aec:	460c      	mov	r4, r1
 8014aee:	b09d      	sub	sp, #116	; 0x74
 8014af0:	4617      	mov	r7, r2
 8014af2:	461d      	mov	r5, r3
 8014af4:	4606      	mov	r6, r0
 8014af6:	b118      	cbz	r0, 8014b00 <_vfiprintf_r+0x18>
 8014af8:	6983      	ldr	r3, [r0, #24]
 8014afa:	b90b      	cbnz	r3, 8014b00 <_vfiprintf_r+0x18>
 8014afc:	f7ff fe2c 	bl	8014758 <__sinit>
 8014b00:	4b7c      	ldr	r3, [pc, #496]	; (8014cf4 <_vfiprintf_r+0x20c>)
 8014b02:	429c      	cmp	r4, r3
 8014b04:	d158      	bne.n	8014bb8 <_vfiprintf_r+0xd0>
 8014b06:	6874      	ldr	r4, [r6, #4]
 8014b08:	89a3      	ldrh	r3, [r4, #12]
 8014b0a:	0718      	lsls	r0, r3, #28
 8014b0c:	d55e      	bpl.n	8014bcc <_vfiprintf_r+0xe4>
 8014b0e:	6923      	ldr	r3, [r4, #16]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d05b      	beq.n	8014bcc <_vfiprintf_r+0xe4>
 8014b14:	2300      	movs	r3, #0
 8014b16:	9309      	str	r3, [sp, #36]	; 0x24
 8014b18:	2320      	movs	r3, #32
 8014b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b1e:	2330      	movs	r3, #48	; 0x30
 8014b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b24:	9503      	str	r5, [sp, #12]
 8014b26:	f04f 0b01 	mov.w	fp, #1
 8014b2a:	46b8      	mov	r8, r7
 8014b2c:	4645      	mov	r5, r8
 8014b2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014b32:	b10b      	cbz	r3, 8014b38 <_vfiprintf_r+0x50>
 8014b34:	2b25      	cmp	r3, #37	; 0x25
 8014b36:	d154      	bne.n	8014be2 <_vfiprintf_r+0xfa>
 8014b38:	ebb8 0a07 	subs.w	sl, r8, r7
 8014b3c:	d00b      	beq.n	8014b56 <_vfiprintf_r+0x6e>
 8014b3e:	4653      	mov	r3, sl
 8014b40:	463a      	mov	r2, r7
 8014b42:	4621      	mov	r1, r4
 8014b44:	4630      	mov	r0, r6
 8014b46:	f7ff ffbc 	bl	8014ac2 <__sfputs_r>
 8014b4a:	3001      	adds	r0, #1
 8014b4c:	f000 80c2 	beq.w	8014cd4 <_vfiprintf_r+0x1ec>
 8014b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b52:	4453      	add	r3, sl
 8014b54:	9309      	str	r3, [sp, #36]	; 0x24
 8014b56:	f898 3000 	ldrb.w	r3, [r8]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	f000 80ba 	beq.w	8014cd4 <_vfiprintf_r+0x1ec>
 8014b60:	2300      	movs	r3, #0
 8014b62:	f04f 32ff 	mov.w	r2, #4294967295
 8014b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b6a:	9304      	str	r3, [sp, #16]
 8014b6c:	9307      	str	r3, [sp, #28]
 8014b6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b72:	931a      	str	r3, [sp, #104]	; 0x68
 8014b74:	46a8      	mov	r8, r5
 8014b76:	2205      	movs	r2, #5
 8014b78:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014b7c:	485e      	ldr	r0, [pc, #376]	; (8014cf8 <_vfiprintf_r+0x210>)
 8014b7e:	f7eb fb27 	bl	80001d0 <memchr>
 8014b82:	9b04      	ldr	r3, [sp, #16]
 8014b84:	bb78      	cbnz	r0, 8014be6 <_vfiprintf_r+0xfe>
 8014b86:	06d9      	lsls	r1, r3, #27
 8014b88:	bf44      	itt	mi
 8014b8a:	2220      	movmi	r2, #32
 8014b8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014b90:	071a      	lsls	r2, r3, #28
 8014b92:	bf44      	itt	mi
 8014b94:	222b      	movmi	r2, #43	; 0x2b
 8014b96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014b9a:	782a      	ldrb	r2, [r5, #0]
 8014b9c:	2a2a      	cmp	r2, #42	; 0x2a
 8014b9e:	d02a      	beq.n	8014bf6 <_vfiprintf_r+0x10e>
 8014ba0:	9a07      	ldr	r2, [sp, #28]
 8014ba2:	46a8      	mov	r8, r5
 8014ba4:	2000      	movs	r0, #0
 8014ba6:	250a      	movs	r5, #10
 8014ba8:	4641      	mov	r1, r8
 8014baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bae:	3b30      	subs	r3, #48	; 0x30
 8014bb0:	2b09      	cmp	r3, #9
 8014bb2:	d969      	bls.n	8014c88 <_vfiprintf_r+0x1a0>
 8014bb4:	b360      	cbz	r0, 8014c10 <_vfiprintf_r+0x128>
 8014bb6:	e024      	b.n	8014c02 <_vfiprintf_r+0x11a>
 8014bb8:	4b50      	ldr	r3, [pc, #320]	; (8014cfc <_vfiprintf_r+0x214>)
 8014bba:	429c      	cmp	r4, r3
 8014bbc:	d101      	bne.n	8014bc2 <_vfiprintf_r+0xda>
 8014bbe:	68b4      	ldr	r4, [r6, #8]
 8014bc0:	e7a2      	b.n	8014b08 <_vfiprintf_r+0x20>
 8014bc2:	4b4f      	ldr	r3, [pc, #316]	; (8014d00 <_vfiprintf_r+0x218>)
 8014bc4:	429c      	cmp	r4, r3
 8014bc6:	bf08      	it	eq
 8014bc8:	68f4      	ldreq	r4, [r6, #12]
 8014bca:	e79d      	b.n	8014b08 <_vfiprintf_r+0x20>
 8014bcc:	4621      	mov	r1, r4
 8014bce:	4630      	mov	r0, r6
 8014bd0:	f7ff fc64 	bl	801449c <__swsetup_r>
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	d09d      	beq.n	8014b14 <_vfiprintf_r+0x2c>
 8014bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8014bdc:	b01d      	add	sp, #116	; 0x74
 8014bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014be2:	46a8      	mov	r8, r5
 8014be4:	e7a2      	b.n	8014b2c <_vfiprintf_r+0x44>
 8014be6:	4a44      	ldr	r2, [pc, #272]	; (8014cf8 <_vfiprintf_r+0x210>)
 8014be8:	1a80      	subs	r0, r0, r2
 8014bea:	fa0b f000 	lsl.w	r0, fp, r0
 8014bee:	4318      	orrs	r0, r3
 8014bf0:	9004      	str	r0, [sp, #16]
 8014bf2:	4645      	mov	r5, r8
 8014bf4:	e7be      	b.n	8014b74 <_vfiprintf_r+0x8c>
 8014bf6:	9a03      	ldr	r2, [sp, #12]
 8014bf8:	1d11      	adds	r1, r2, #4
 8014bfa:	6812      	ldr	r2, [r2, #0]
 8014bfc:	9103      	str	r1, [sp, #12]
 8014bfe:	2a00      	cmp	r2, #0
 8014c00:	db01      	blt.n	8014c06 <_vfiprintf_r+0x11e>
 8014c02:	9207      	str	r2, [sp, #28]
 8014c04:	e004      	b.n	8014c10 <_vfiprintf_r+0x128>
 8014c06:	4252      	negs	r2, r2
 8014c08:	f043 0302 	orr.w	r3, r3, #2
 8014c0c:	9207      	str	r2, [sp, #28]
 8014c0e:	9304      	str	r3, [sp, #16]
 8014c10:	f898 3000 	ldrb.w	r3, [r8]
 8014c14:	2b2e      	cmp	r3, #46	; 0x2e
 8014c16:	d10e      	bne.n	8014c36 <_vfiprintf_r+0x14e>
 8014c18:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8014c1e:	d138      	bne.n	8014c92 <_vfiprintf_r+0x1aa>
 8014c20:	9b03      	ldr	r3, [sp, #12]
 8014c22:	1d1a      	adds	r2, r3, #4
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	9203      	str	r2, [sp, #12]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	bfb8      	it	lt
 8014c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014c30:	f108 0802 	add.w	r8, r8, #2
 8014c34:	9305      	str	r3, [sp, #20]
 8014c36:	4d33      	ldr	r5, [pc, #204]	; (8014d04 <_vfiprintf_r+0x21c>)
 8014c38:	f898 1000 	ldrb.w	r1, [r8]
 8014c3c:	2203      	movs	r2, #3
 8014c3e:	4628      	mov	r0, r5
 8014c40:	f7eb fac6 	bl	80001d0 <memchr>
 8014c44:	b140      	cbz	r0, 8014c58 <_vfiprintf_r+0x170>
 8014c46:	2340      	movs	r3, #64	; 0x40
 8014c48:	1b40      	subs	r0, r0, r5
 8014c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8014c4e:	9b04      	ldr	r3, [sp, #16]
 8014c50:	4303      	orrs	r3, r0
 8014c52:	f108 0801 	add.w	r8, r8, #1
 8014c56:	9304      	str	r3, [sp, #16]
 8014c58:	f898 1000 	ldrb.w	r1, [r8]
 8014c5c:	482a      	ldr	r0, [pc, #168]	; (8014d08 <_vfiprintf_r+0x220>)
 8014c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c62:	2206      	movs	r2, #6
 8014c64:	f108 0701 	add.w	r7, r8, #1
 8014c68:	f7eb fab2 	bl	80001d0 <memchr>
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	d037      	beq.n	8014ce0 <_vfiprintf_r+0x1f8>
 8014c70:	4b26      	ldr	r3, [pc, #152]	; (8014d0c <_vfiprintf_r+0x224>)
 8014c72:	bb1b      	cbnz	r3, 8014cbc <_vfiprintf_r+0x1d4>
 8014c74:	9b03      	ldr	r3, [sp, #12]
 8014c76:	3307      	adds	r3, #7
 8014c78:	f023 0307 	bic.w	r3, r3, #7
 8014c7c:	3308      	adds	r3, #8
 8014c7e:	9303      	str	r3, [sp, #12]
 8014c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c82:	444b      	add	r3, r9
 8014c84:	9309      	str	r3, [sp, #36]	; 0x24
 8014c86:	e750      	b.n	8014b2a <_vfiprintf_r+0x42>
 8014c88:	fb05 3202 	mla	r2, r5, r2, r3
 8014c8c:	2001      	movs	r0, #1
 8014c8e:	4688      	mov	r8, r1
 8014c90:	e78a      	b.n	8014ba8 <_vfiprintf_r+0xc0>
 8014c92:	2300      	movs	r3, #0
 8014c94:	f108 0801 	add.w	r8, r8, #1
 8014c98:	9305      	str	r3, [sp, #20]
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	250a      	movs	r5, #10
 8014c9e:	4640      	mov	r0, r8
 8014ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ca4:	3a30      	subs	r2, #48	; 0x30
 8014ca6:	2a09      	cmp	r2, #9
 8014ca8:	d903      	bls.n	8014cb2 <_vfiprintf_r+0x1ca>
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d0c3      	beq.n	8014c36 <_vfiprintf_r+0x14e>
 8014cae:	9105      	str	r1, [sp, #20]
 8014cb0:	e7c1      	b.n	8014c36 <_vfiprintf_r+0x14e>
 8014cb2:	fb05 2101 	mla	r1, r5, r1, r2
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	4680      	mov	r8, r0
 8014cba:	e7f0      	b.n	8014c9e <_vfiprintf_r+0x1b6>
 8014cbc:	ab03      	add	r3, sp, #12
 8014cbe:	9300      	str	r3, [sp, #0]
 8014cc0:	4622      	mov	r2, r4
 8014cc2:	4b13      	ldr	r3, [pc, #76]	; (8014d10 <_vfiprintf_r+0x228>)
 8014cc4:	a904      	add	r1, sp, #16
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	f3af 8000 	nop.w
 8014ccc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014cd0:	4681      	mov	r9, r0
 8014cd2:	d1d5      	bne.n	8014c80 <_vfiprintf_r+0x198>
 8014cd4:	89a3      	ldrh	r3, [r4, #12]
 8014cd6:	065b      	lsls	r3, r3, #25
 8014cd8:	f53f af7e 	bmi.w	8014bd8 <_vfiprintf_r+0xf0>
 8014cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cde:	e77d      	b.n	8014bdc <_vfiprintf_r+0xf4>
 8014ce0:	ab03      	add	r3, sp, #12
 8014ce2:	9300      	str	r3, [sp, #0]
 8014ce4:	4622      	mov	r2, r4
 8014ce6:	4b0a      	ldr	r3, [pc, #40]	; (8014d10 <_vfiprintf_r+0x228>)
 8014ce8:	a904      	add	r1, sp, #16
 8014cea:	4630      	mov	r0, r6
 8014cec:	f000 f888 	bl	8014e00 <_printf_i>
 8014cf0:	e7ec      	b.n	8014ccc <_vfiprintf_r+0x1e4>
 8014cf2:	bf00      	nop
 8014cf4:	08018948 	.word	0x08018948
 8014cf8:	08018988 	.word	0x08018988
 8014cfc:	08018968 	.word	0x08018968
 8014d00:	08018928 	.word	0x08018928
 8014d04:	0801898e 	.word	0x0801898e
 8014d08:	08018992 	.word	0x08018992
 8014d0c:	00000000 	.word	0x00000000
 8014d10:	08014ac3 	.word	0x08014ac3

08014d14 <_printf_common>:
 8014d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d18:	4691      	mov	r9, r2
 8014d1a:	461f      	mov	r7, r3
 8014d1c:	688a      	ldr	r2, [r1, #8]
 8014d1e:	690b      	ldr	r3, [r1, #16]
 8014d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014d24:	4293      	cmp	r3, r2
 8014d26:	bfb8      	it	lt
 8014d28:	4613      	movlt	r3, r2
 8014d2a:	f8c9 3000 	str.w	r3, [r9]
 8014d2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014d32:	4606      	mov	r6, r0
 8014d34:	460c      	mov	r4, r1
 8014d36:	b112      	cbz	r2, 8014d3e <_printf_common+0x2a>
 8014d38:	3301      	adds	r3, #1
 8014d3a:	f8c9 3000 	str.w	r3, [r9]
 8014d3e:	6823      	ldr	r3, [r4, #0]
 8014d40:	0699      	lsls	r1, r3, #26
 8014d42:	bf42      	ittt	mi
 8014d44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014d48:	3302      	addmi	r3, #2
 8014d4a:	f8c9 3000 	strmi.w	r3, [r9]
 8014d4e:	6825      	ldr	r5, [r4, #0]
 8014d50:	f015 0506 	ands.w	r5, r5, #6
 8014d54:	d107      	bne.n	8014d66 <_printf_common+0x52>
 8014d56:	f104 0a19 	add.w	sl, r4, #25
 8014d5a:	68e3      	ldr	r3, [r4, #12]
 8014d5c:	f8d9 2000 	ldr.w	r2, [r9]
 8014d60:	1a9b      	subs	r3, r3, r2
 8014d62:	42ab      	cmp	r3, r5
 8014d64:	dc28      	bgt.n	8014db8 <_printf_common+0xa4>
 8014d66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014d6a:	6822      	ldr	r2, [r4, #0]
 8014d6c:	3300      	adds	r3, #0
 8014d6e:	bf18      	it	ne
 8014d70:	2301      	movne	r3, #1
 8014d72:	0692      	lsls	r2, r2, #26
 8014d74:	d42d      	bmi.n	8014dd2 <_printf_common+0xbe>
 8014d76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014d7a:	4639      	mov	r1, r7
 8014d7c:	4630      	mov	r0, r6
 8014d7e:	47c0      	blx	r8
 8014d80:	3001      	adds	r0, #1
 8014d82:	d020      	beq.n	8014dc6 <_printf_common+0xb2>
 8014d84:	6823      	ldr	r3, [r4, #0]
 8014d86:	68e5      	ldr	r5, [r4, #12]
 8014d88:	f8d9 2000 	ldr.w	r2, [r9]
 8014d8c:	f003 0306 	and.w	r3, r3, #6
 8014d90:	2b04      	cmp	r3, #4
 8014d92:	bf08      	it	eq
 8014d94:	1aad      	subeq	r5, r5, r2
 8014d96:	68a3      	ldr	r3, [r4, #8]
 8014d98:	6922      	ldr	r2, [r4, #16]
 8014d9a:	bf0c      	ite	eq
 8014d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014da0:	2500      	movne	r5, #0
 8014da2:	4293      	cmp	r3, r2
 8014da4:	bfc4      	itt	gt
 8014da6:	1a9b      	subgt	r3, r3, r2
 8014da8:	18ed      	addgt	r5, r5, r3
 8014daa:	f04f 0900 	mov.w	r9, #0
 8014dae:	341a      	adds	r4, #26
 8014db0:	454d      	cmp	r5, r9
 8014db2:	d11a      	bne.n	8014dea <_printf_common+0xd6>
 8014db4:	2000      	movs	r0, #0
 8014db6:	e008      	b.n	8014dca <_printf_common+0xb6>
 8014db8:	2301      	movs	r3, #1
 8014dba:	4652      	mov	r2, sl
 8014dbc:	4639      	mov	r1, r7
 8014dbe:	4630      	mov	r0, r6
 8014dc0:	47c0      	blx	r8
 8014dc2:	3001      	adds	r0, #1
 8014dc4:	d103      	bne.n	8014dce <_printf_common+0xba>
 8014dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8014dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dce:	3501      	adds	r5, #1
 8014dd0:	e7c3      	b.n	8014d5a <_printf_common+0x46>
 8014dd2:	18e1      	adds	r1, r4, r3
 8014dd4:	1c5a      	adds	r2, r3, #1
 8014dd6:	2030      	movs	r0, #48	; 0x30
 8014dd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014ddc:	4422      	add	r2, r4
 8014dde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014de2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014de6:	3302      	adds	r3, #2
 8014de8:	e7c5      	b.n	8014d76 <_printf_common+0x62>
 8014dea:	2301      	movs	r3, #1
 8014dec:	4622      	mov	r2, r4
 8014dee:	4639      	mov	r1, r7
 8014df0:	4630      	mov	r0, r6
 8014df2:	47c0      	blx	r8
 8014df4:	3001      	adds	r0, #1
 8014df6:	d0e6      	beq.n	8014dc6 <_printf_common+0xb2>
 8014df8:	f109 0901 	add.w	r9, r9, #1
 8014dfc:	e7d8      	b.n	8014db0 <_printf_common+0x9c>
	...

08014e00 <_printf_i>:
 8014e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014e08:	460c      	mov	r4, r1
 8014e0a:	7e09      	ldrb	r1, [r1, #24]
 8014e0c:	b085      	sub	sp, #20
 8014e0e:	296e      	cmp	r1, #110	; 0x6e
 8014e10:	4617      	mov	r7, r2
 8014e12:	4606      	mov	r6, r0
 8014e14:	4698      	mov	r8, r3
 8014e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e18:	f000 80b3 	beq.w	8014f82 <_printf_i+0x182>
 8014e1c:	d822      	bhi.n	8014e64 <_printf_i+0x64>
 8014e1e:	2963      	cmp	r1, #99	; 0x63
 8014e20:	d036      	beq.n	8014e90 <_printf_i+0x90>
 8014e22:	d80a      	bhi.n	8014e3a <_printf_i+0x3a>
 8014e24:	2900      	cmp	r1, #0
 8014e26:	f000 80b9 	beq.w	8014f9c <_printf_i+0x19c>
 8014e2a:	2958      	cmp	r1, #88	; 0x58
 8014e2c:	f000 8083 	beq.w	8014f36 <_printf_i+0x136>
 8014e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014e38:	e032      	b.n	8014ea0 <_printf_i+0xa0>
 8014e3a:	2964      	cmp	r1, #100	; 0x64
 8014e3c:	d001      	beq.n	8014e42 <_printf_i+0x42>
 8014e3e:	2969      	cmp	r1, #105	; 0x69
 8014e40:	d1f6      	bne.n	8014e30 <_printf_i+0x30>
 8014e42:	6820      	ldr	r0, [r4, #0]
 8014e44:	6813      	ldr	r3, [r2, #0]
 8014e46:	0605      	lsls	r5, r0, #24
 8014e48:	f103 0104 	add.w	r1, r3, #4
 8014e4c:	d52a      	bpl.n	8014ea4 <_printf_i+0xa4>
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	6011      	str	r1, [r2, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	da03      	bge.n	8014e5e <_printf_i+0x5e>
 8014e56:	222d      	movs	r2, #45	; 0x2d
 8014e58:	425b      	negs	r3, r3
 8014e5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014e5e:	486f      	ldr	r0, [pc, #444]	; (801501c <_printf_i+0x21c>)
 8014e60:	220a      	movs	r2, #10
 8014e62:	e039      	b.n	8014ed8 <_printf_i+0xd8>
 8014e64:	2973      	cmp	r1, #115	; 0x73
 8014e66:	f000 809d 	beq.w	8014fa4 <_printf_i+0x1a4>
 8014e6a:	d808      	bhi.n	8014e7e <_printf_i+0x7e>
 8014e6c:	296f      	cmp	r1, #111	; 0x6f
 8014e6e:	d020      	beq.n	8014eb2 <_printf_i+0xb2>
 8014e70:	2970      	cmp	r1, #112	; 0x70
 8014e72:	d1dd      	bne.n	8014e30 <_printf_i+0x30>
 8014e74:	6823      	ldr	r3, [r4, #0]
 8014e76:	f043 0320 	orr.w	r3, r3, #32
 8014e7a:	6023      	str	r3, [r4, #0]
 8014e7c:	e003      	b.n	8014e86 <_printf_i+0x86>
 8014e7e:	2975      	cmp	r1, #117	; 0x75
 8014e80:	d017      	beq.n	8014eb2 <_printf_i+0xb2>
 8014e82:	2978      	cmp	r1, #120	; 0x78
 8014e84:	d1d4      	bne.n	8014e30 <_printf_i+0x30>
 8014e86:	2378      	movs	r3, #120	; 0x78
 8014e88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014e8c:	4864      	ldr	r0, [pc, #400]	; (8015020 <_printf_i+0x220>)
 8014e8e:	e055      	b.n	8014f3c <_printf_i+0x13c>
 8014e90:	6813      	ldr	r3, [r2, #0]
 8014e92:	1d19      	adds	r1, r3, #4
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	6011      	str	r1, [r2, #0]
 8014e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	e08c      	b.n	8014fbe <_printf_i+0x1be>
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	6011      	str	r1, [r2, #0]
 8014ea8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014eac:	bf18      	it	ne
 8014eae:	b21b      	sxthne	r3, r3
 8014eb0:	e7cf      	b.n	8014e52 <_printf_i+0x52>
 8014eb2:	6813      	ldr	r3, [r2, #0]
 8014eb4:	6825      	ldr	r5, [r4, #0]
 8014eb6:	1d18      	adds	r0, r3, #4
 8014eb8:	6010      	str	r0, [r2, #0]
 8014eba:	0628      	lsls	r0, r5, #24
 8014ebc:	d501      	bpl.n	8014ec2 <_printf_i+0xc2>
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	e002      	b.n	8014ec8 <_printf_i+0xc8>
 8014ec2:	0668      	lsls	r0, r5, #25
 8014ec4:	d5fb      	bpl.n	8014ebe <_printf_i+0xbe>
 8014ec6:	881b      	ldrh	r3, [r3, #0]
 8014ec8:	4854      	ldr	r0, [pc, #336]	; (801501c <_printf_i+0x21c>)
 8014eca:	296f      	cmp	r1, #111	; 0x6f
 8014ecc:	bf14      	ite	ne
 8014ece:	220a      	movne	r2, #10
 8014ed0:	2208      	moveq	r2, #8
 8014ed2:	2100      	movs	r1, #0
 8014ed4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014ed8:	6865      	ldr	r5, [r4, #4]
 8014eda:	60a5      	str	r5, [r4, #8]
 8014edc:	2d00      	cmp	r5, #0
 8014ede:	f2c0 8095 	blt.w	801500c <_printf_i+0x20c>
 8014ee2:	6821      	ldr	r1, [r4, #0]
 8014ee4:	f021 0104 	bic.w	r1, r1, #4
 8014ee8:	6021      	str	r1, [r4, #0]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d13d      	bne.n	8014f6a <_printf_i+0x16a>
 8014eee:	2d00      	cmp	r5, #0
 8014ef0:	f040 808e 	bne.w	8015010 <_printf_i+0x210>
 8014ef4:	4665      	mov	r5, ip
 8014ef6:	2a08      	cmp	r2, #8
 8014ef8:	d10b      	bne.n	8014f12 <_printf_i+0x112>
 8014efa:	6823      	ldr	r3, [r4, #0]
 8014efc:	07db      	lsls	r3, r3, #31
 8014efe:	d508      	bpl.n	8014f12 <_printf_i+0x112>
 8014f00:	6923      	ldr	r3, [r4, #16]
 8014f02:	6862      	ldr	r2, [r4, #4]
 8014f04:	429a      	cmp	r2, r3
 8014f06:	bfde      	ittt	le
 8014f08:	2330      	movle	r3, #48	; 0x30
 8014f0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014f0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014f12:	ebac 0305 	sub.w	r3, ip, r5
 8014f16:	6123      	str	r3, [r4, #16]
 8014f18:	f8cd 8000 	str.w	r8, [sp]
 8014f1c:	463b      	mov	r3, r7
 8014f1e:	aa03      	add	r2, sp, #12
 8014f20:	4621      	mov	r1, r4
 8014f22:	4630      	mov	r0, r6
 8014f24:	f7ff fef6 	bl	8014d14 <_printf_common>
 8014f28:	3001      	adds	r0, #1
 8014f2a:	d14d      	bne.n	8014fc8 <_printf_i+0x1c8>
 8014f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f30:	b005      	add	sp, #20
 8014f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f36:	4839      	ldr	r0, [pc, #228]	; (801501c <_printf_i+0x21c>)
 8014f38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014f3c:	6813      	ldr	r3, [r2, #0]
 8014f3e:	6821      	ldr	r1, [r4, #0]
 8014f40:	1d1d      	adds	r5, r3, #4
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	6015      	str	r5, [r2, #0]
 8014f46:	060a      	lsls	r2, r1, #24
 8014f48:	d50b      	bpl.n	8014f62 <_printf_i+0x162>
 8014f4a:	07ca      	lsls	r2, r1, #31
 8014f4c:	bf44      	itt	mi
 8014f4e:	f041 0120 	orrmi.w	r1, r1, #32
 8014f52:	6021      	strmi	r1, [r4, #0]
 8014f54:	b91b      	cbnz	r3, 8014f5e <_printf_i+0x15e>
 8014f56:	6822      	ldr	r2, [r4, #0]
 8014f58:	f022 0220 	bic.w	r2, r2, #32
 8014f5c:	6022      	str	r2, [r4, #0]
 8014f5e:	2210      	movs	r2, #16
 8014f60:	e7b7      	b.n	8014ed2 <_printf_i+0xd2>
 8014f62:	064d      	lsls	r5, r1, #25
 8014f64:	bf48      	it	mi
 8014f66:	b29b      	uxthmi	r3, r3
 8014f68:	e7ef      	b.n	8014f4a <_printf_i+0x14a>
 8014f6a:	4665      	mov	r5, ip
 8014f6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014f70:	fb02 3311 	mls	r3, r2, r1, r3
 8014f74:	5cc3      	ldrb	r3, [r0, r3]
 8014f76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014f7a:	460b      	mov	r3, r1
 8014f7c:	2900      	cmp	r1, #0
 8014f7e:	d1f5      	bne.n	8014f6c <_printf_i+0x16c>
 8014f80:	e7b9      	b.n	8014ef6 <_printf_i+0xf6>
 8014f82:	6813      	ldr	r3, [r2, #0]
 8014f84:	6825      	ldr	r5, [r4, #0]
 8014f86:	6961      	ldr	r1, [r4, #20]
 8014f88:	1d18      	adds	r0, r3, #4
 8014f8a:	6010      	str	r0, [r2, #0]
 8014f8c:	0628      	lsls	r0, r5, #24
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	d501      	bpl.n	8014f96 <_printf_i+0x196>
 8014f92:	6019      	str	r1, [r3, #0]
 8014f94:	e002      	b.n	8014f9c <_printf_i+0x19c>
 8014f96:	066a      	lsls	r2, r5, #25
 8014f98:	d5fb      	bpl.n	8014f92 <_printf_i+0x192>
 8014f9a:	8019      	strh	r1, [r3, #0]
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	6123      	str	r3, [r4, #16]
 8014fa0:	4665      	mov	r5, ip
 8014fa2:	e7b9      	b.n	8014f18 <_printf_i+0x118>
 8014fa4:	6813      	ldr	r3, [r2, #0]
 8014fa6:	1d19      	adds	r1, r3, #4
 8014fa8:	6011      	str	r1, [r2, #0]
 8014faa:	681d      	ldr	r5, [r3, #0]
 8014fac:	6862      	ldr	r2, [r4, #4]
 8014fae:	2100      	movs	r1, #0
 8014fb0:	4628      	mov	r0, r5
 8014fb2:	f7eb f90d 	bl	80001d0 <memchr>
 8014fb6:	b108      	cbz	r0, 8014fbc <_printf_i+0x1bc>
 8014fb8:	1b40      	subs	r0, r0, r5
 8014fba:	6060      	str	r0, [r4, #4]
 8014fbc:	6863      	ldr	r3, [r4, #4]
 8014fbe:	6123      	str	r3, [r4, #16]
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014fc6:	e7a7      	b.n	8014f18 <_printf_i+0x118>
 8014fc8:	6923      	ldr	r3, [r4, #16]
 8014fca:	462a      	mov	r2, r5
 8014fcc:	4639      	mov	r1, r7
 8014fce:	4630      	mov	r0, r6
 8014fd0:	47c0      	blx	r8
 8014fd2:	3001      	adds	r0, #1
 8014fd4:	d0aa      	beq.n	8014f2c <_printf_i+0x12c>
 8014fd6:	6823      	ldr	r3, [r4, #0]
 8014fd8:	079b      	lsls	r3, r3, #30
 8014fda:	d413      	bmi.n	8015004 <_printf_i+0x204>
 8014fdc:	68e0      	ldr	r0, [r4, #12]
 8014fde:	9b03      	ldr	r3, [sp, #12]
 8014fe0:	4298      	cmp	r0, r3
 8014fe2:	bfb8      	it	lt
 8014fe4:	4618      	movlt	r0, r3
 8014fe6:	e7a3      	b.n	8014f30 <_printf_i+0x130>
 8014fe8:	2301      	movs	r3, #1
 8014fea:	464a      	mov	r2, r9
 8014fec:	4639      	mov	r1, r7
 8014fee:	4630      	mov	r0, r6
 8014ff0:	47c0      	blx	r8
 8014ff2:	3001      	adds	r0, #1
 8014ff4:	d09a      	beq.n	8014f2c <_printf_i+0x12c>
 8014ff6:	3501      	adds	r5, #1
 8014ff8:	68e3      	ldr	r3, [r4, #12]
 8014ffa:	9a03      	ldr	r2, [sp, #12]
 8014ffc:	1a9b      	subs	r3, r3, r2
 8014ffe:	42ab      	cmp	r3, r5
 8015000:	dcf2      	bgt.n	8014fe8 <_printf_i+0x1e8>
 8015002:	e7eb      	b.n	8014fdc <_printf_i+0x1dc>
 8015004:	2500      	movs	r5, #0
 8015006:	f104 0919 	add.w	r9, r4, #25
 801500a:	e7f5      	b.n	8014ff8 <_printf_i+0x1f8>
 801500c:	2b00      	cmp	r3, #0
 801500e:	d1ac      	bne.n	8014f6a <_printf_i+0x16a>
 8015010:	7803      	ldrb	r3, [r0, #0]
 8015012:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015016:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801501a:	e76c      	b.n	8014ef6 <_printf_i+0xf6>
 801501c:	08018999 	.word	0x08018999
 8015020:	080189aa 	.word	0x080189aa

08015024 <_sbrk_r>:
 8015024:	b538      	push	{r3, r4, r5, lr}
 8015026:	4c06      	ldr	r4, [pc, #24]	; (8015040 <_sbrk_r+0x1c>)
 8015028:	2300      	movs	r3, #0
 801502a:	4605      	mov	r5, r0
 801502c:	4608      	mov	r0, r1
 801502e:	6023      	str	r3, [r4, #0]
 8015030:	f7eb fd50 	bl	8000ad4 <_sbrk>
 8015034:	1c43      	adds	r3, r0, #1
 8015036:	d102      	bne.n	801503e <_sbrk_r+0x1a>
 8015038:	6823      	ldr	r3, [r4, #0]
 801503a:	b103      	cbz	r3, 801503e <_sbrk_r+0x1a>
 801503c:	602b      	str	r3, [r5, #0]
 801503e:	bd38      	pop	{r3, r4, r5, pc}
 8015040:	2000acd8 	.word	0x2000acd8

08015044 <__sread>:
 8015044:	b510      	push	{r4, lr}
 8015046:	460c      	mov	r4, r1
 8015048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801504c:	f000 f896 	bl	801517c <_read_r>
 8015050:	2800      	cmp	r0, #0
 8015052:	bfab      	itete	ge
 8015054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015056:	89a3      	ldrhlt	r3, [r4, #12]
 8015058:	181b      	addge	r3, r3, r0
 801505a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801505e:	bfac      	ite	ge
 8015060:	6563      	strge	r3, [r4, #84]	; 0x54
 8015062:	81a3      	strhlt	r3, [r4, #12]
 8015064:	bd10      	pop	{r4, pc}

08015066 <__swrite>:
 8015066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801506a:	461f      	mov	r7, r3
 801506c:	898b      	ldrh	r3, [r1, #12]
 801506e:	05db      	lsls	r3, r3, #23
 8015070:	4605      	mov	r5, r0
 8015072:	460c      	mov	r4, r1
 8015074:	4616      	mov	r6, r2
 8015076:	d505      	bpl.n	8015084 <__swrite+0x1e>
 8015078:	2302      	movs	r3, #2
 801507a:	2200      	movs	r2, #0
 801507c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015080:	f000 f868 	bl	8015154 <_lseek_r>
 8015084:	89a3      	ldrh	r3, [r4, #12]
 8015086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801508a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801508e:	81a3      	strh	r3, [r4, #12]
 8015090:	4632      	mov	r2, r6
 8015092:	463b      	mov	r3, r7
 8015094:	4628      	mov	r0, r5
 8015096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801509a:	f000 b817 	b.w	80150cc <_write_r>

0801509e <__sseek>:
 801509e:	b510      	push	{r4, lr}
 80150a0:	460c      	mov	r4, r1
 80150a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150a6:	f000 f855 	bl	8015154 <_lseek_r>
 80150aa:	1c43      	adds	r3, r0, #1
 80150ac:	89a3      	ldrh	r3, [r4, #12]
 80150ae:	bf15      	itete	ne
 80150b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80150b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80150ba:	81a3      	strheq	r3, [r4, #12]
 80150bc:	bf18      	it	ne
 80150be:	81a3      	strhne	r3, [r4, #12]
 80150c0:	bd10      	pop	{r4, pc}

080150c2 <__sclose>:
 80150c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150c6:	f000 b813 	b.w	80150f0 <_close_r>
	...

080150cc <_write_r>:
 80150cc:	b538      	push	{r3, r4, r5, lr}
 80150ce:	4c07      	ldr	r4, [pc, #28]	; (80150ec <_write_r+0x20>)
 80150d0:	4605      	mov	r5, r0
 80150d2:	4608      	mov	r0, r1
 80150d4:	4611      	mov	r1, r2
 80150d6:	2200      	movs	r2, #0
 80150d8:	6022      	str	r2, [r4, #0]
 80150da:	461a      	mov	r2, r3
 80150dc:	f7eb fcaa 	bl	8000a34 <_write>
 80150e0:	1c43      	adds	r3, r0, #1
 80150e2:	d102      	bne.n	80150ea <_write_r+0x1e>
 80150e4:	6823      	ldr	r3, [r4, #0]
 80150e6:	b103      	cbz	r3, 80150ea <_write_r+0x1e>
 80150e8:	602b      	str	r3, [r5, #0]
 80150ea:	bd38      	pop	{r3, r4, r5, pc}
 80150ec:	2000acd8 	.word	0x2000acd8

080150f0 <_close_r>:
 80150f0:	b538      	push	{r3, r4, r5, lr}
 80150f2:	4c06      	ldr	r4, [pc, #24]	; (801510c <_close_r+0x1c>)
 80150f4:	2300      	movs	r3, #0
 80150f6:	4605      	mov	r5, r0
 80150f8:	4608      	mov	r0, r1
 80150fa:	6023      	str	r3, [r4, #0]
 80150fc:	f7eb fcb6 	bl	8000a6c <_close>
 8015100:	1c43      	adds	r3, r0, #1
 8015102:	d102      	bne.n	801510a <_close_r+0x1a>
 8015104:	6823      	ldr	r3, [r4, #0]
 8015106:	b103      	cbz	r3, 801510a <_close_r+0x1a>
 8015108:	602b      	str	r3, [r5, #0]
 801510a:	bd38      	pop	{r3, r4, r5, pc}
 801510c:	2000acd8 	.word	0x2000acd8

08015110 <_fstat_r>:
 8015110:	b538      	push	{r3, r4, r5, lr}
 8015112:	4c07      	ldr	r4, [pc, #28]	; (8015130 <_fstat_r+0x20>)
 8015114:	2300      	movs	r3, #0
 8015116:	4605      	mov	r5, r0
 8015118:	4608      	mov	r0, r1
 801511a:	4611      	mov	r1, r2
 801511c:	6023      	str	r3, [r4, #0]
 801511e:	f7eb fcb1 	bl	8000a84 <_fstat>
 8015122:	1c43      	adds	r3, r0, #1
 8015124:	d102      	bne.n	801512c <_fstat_r+0x1c>
 8015126:	6823      	ldr	r3, [r4, #0]
 8015128:	b103      	cbz	r3, 801512c <_fstat_r+0x1c>
 801512a:	602b      	str	r3, [r5, #0]
 801512c:	bd38      	pop	{r3, r4, r5, pc}
 801512e:	bf00      	nop
 8015130:	2000acd8 	.word	0x2000acd8

08015134 <_isatty_r>:
 8015134:	b538      	push	{r3, r4, r5, lr}
 8015136:	4c06      	ldr	r4, [pc, #24]	; (8015150 <_isatty_r+0x1c>)
 8015138:	2300      	movs	r3, #0
 801513a:	4605      	mov	r5, r0
 801513c:	4608      	mov	r0, r1
 801513e:	6023      	str	r3, [r4, #0]
 8015140:	f7eb fcb0 	bl	8000aa4 <_isatty>
 8015144:	1c43      	adds	r3, r0, #1
 8015146:	d102      	bne.n	801514e <_isatty_r+0x1a>
 8015148:	6823      	ldr	r3, [r4, #0]
 801514a:	b103      	cbz	r3, 801514e <_isatty_r+0x1a>
 801514c:	602b      	str	r3, [r5, #0]
 801514e:	bd38      	pop	{r3, r4, r5, pc}
 8015150:	2000acd8 	.word	0x2000acd8

08015154 <_lseek_r>:
 8015154:	b538      	push	{r3, r4, r5, lr}
 8015156:	4c07      	ldr	r4, [pc, #28]	; (8015174 <_lseek_r+0x20>)
 8015158:	4605      	mov	r5, r0
 801515a:	4608      	mov	r0, r1
 801515c:	4611      	mov	r1, r2
 801515e:	2200      	movs	r2, #0
 8015160:	6022      	str	r2, [r4, #0]
 8015162:	461a      	mov	r2, r3
 8015164:	f7eb fca9 	bl	8000aba <_lseek>
 8015168:	1c43      	adds	r3, r0, #1
 801516a:	d102      	bne.n	8015172 <_lseek_r+0x1e>
 801516c:	6823      	ldr	r3, [r4, #0]
 801516e:	b103      	cbz	r3, 8015172 <_lseek_r+0x1e>
 8015170:	602b      	str	r3, [r5, #0]
 8015172:	bd38      	pop	{r3, r4, r5, pc}
 8015174:	2000acd8 	.word	0x2000acd8

08015178 <__malloc_lock>:
 8015178:	4770      	bx	lr

0801517a <__malloc_unlock>:
 801517a:	4770      	bx	lr

0801517c <_read_r>:
 801517c:	b538      	push	{r3, r4, r5, lr}
 801517e:	4c07      	ldr	r4, [pc, #28]	; (801519c <_read_r+0x20>)
 8015180:	4605      	mov	r5, r0
 8015182:	4608      	mov	r0, r1
 8015184:	4611      	mov	r1, r2
 8015186:	2200      	movs	r2, #0
 8015188:	6022      	str	r2, [r4, #0]
 801518a:	461a      	mov	r2, r3
 801518c:	f7eb fc35 	bl	80009fa <_read>
 8015190:	1c43      	adds	r3, r0, #1
 8015192:	d102      	bne.n	801519a <_read_r+0x1e>
 8015194:	6823      	ldr	r3, [r4, #0]
 8015196:	b103      	cbz	r3, 801519a <_read_r+0x1e>
 8015198:	602b      	str	r3, [r5, #0]
 801519a:	bd38      	pop	{r3, r4, r5, pc}
 801519c:	2000acd8 	.word	0x2000acd8

080151a0 <_init>:
 80151a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151a2:	bf00      	nop
 80151a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151a6:	bc08      	pop	{r3}
 80151a8:	469e      	mov	lr, r3
 80151aa:	4770      	bx	lr

080151ac <_fini>:
 80151ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ae:	bf00      	nop
 80151b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151b2:	bc08      	pop	{r3}
 80151b4:	469e      	mov	lr, r3
 80151b6:	4770      	bx	lr
